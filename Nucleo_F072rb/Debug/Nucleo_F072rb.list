
Nucleo_F072rb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007824  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  080078e4  080078e4  000178e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800798c  0800798c  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  0800798c  0800798c  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800798c  0800798c  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800798c  0800798c  0001798c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007990  08007990  00017990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08007994  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000042c  20000030  080079c4  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000045c  080079c4  0002045c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001508b  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f65  00000000  00000000  000350e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001190  00000000  00000000  00038048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001068  00000000  00000000  000391d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bd08  00000000  00000000  0003a240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014a37  00000000  00000000  00055f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d058  00000000  00000000  0006a97f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001079d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f0c  00000000  00000000  00107a2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000030 	.word	0x20000030
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080078cc 	.word	0x080078cc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000034 	.word	0x20000034
 8000104:	080078cc 	.word	0x080078cc

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000234:	f000 fbd6 	bl	80009e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();            // конфигурация системы тактирования всего микроконтроллера
 8000238:	f000 f82e 	bl	8000298 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();       // Инициализация всех пинов используемых в данном проекте
 800023c:	f000 f92c 	bl	8000498 <MX_GPIO_Init>
  MX_USART2_UART_Init(); // Инициализация UART2
 8000240:	f000 f8fa 	bl	8000438 <MX_USART2_UART_Init>
// MX_USB_DEVICE_Init();
  MX_TIM6_Init();       // Инициализация таймера TIM6
 8000244:	f000 f880 	bl	8000348 <MX_TIM6_Init>
  MX_TIM7_Init();       // Инициализация таймера TIM7
 8000248:	f000 f8ba 	bl	80003c0 <MX_TIM7_Init>
 * старт таймеров для использования в программе,
 * после инициализации обработка событий обоих таймеров производится
 * в функции void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim);
 *
 */
  HAL_TIM_Base_Start_IT(&htim6);    //  стартуем работу и наступление событий по прерванию от TIM6
 800024c:	4b0f      	ldr	r3, [pc, #60]	; (800028c <main+0x5c>)
 800024e:	0018      	movs	r0, r3
 8000250:	f003 f86a 	bl	8003328 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);    //  стартуем работу и наступление событий по прерванию от TIM7
 8000254:	4b0e      	ldr	r3, [pc, #56]	; (8000290 <main+0x60>)
 8000256:	0018      	movs	r0, r3
 8000258:	f003 f866 	bl	8003328 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */

  // в while  отправлем события в UART, все остальные действия выполняем в прерываниях.
  while (1)
  {
	  if(EnableFlag)      // флаг наступления события тревоги, флаг выставляется в обработчике прерывания
 800025c:	4b0d      	ldr	r3, [pc, #52]	; (8000294 <main+0x64>)
 800025e:	781b      	ldrb	r3, [r3, #0]
 8000260:	2b00      	cmp	r3, #0
 8000262:	d009      	beq.n	8000278 <main+0x48>
	  {

		setGreenColor();  // выставить зеленый цвет для вывода отладочной информации в UART
 8000264:	f000 fa5a 	bl	800071c <setGreenColor>

		sendAlarm();      // отправка события "ALARM" в UART
 8000268:	f000 fa30 	bl	80006cc <sendAlarm>

	    HAL_Delay(1000);  // пауза в 1000 ms
 800026c:	23fa      	movs	r3, #250	; 0xfa
 800026e:	009b      	lsls	r3, r3, #2
 8000270:	0018      	movs	r0, r3
 8000272:	f000 fc1b 	bl	8000aac <HAL_Delay>
 8000276:	e7f1      	b.n	800025c <main+0x2c>
	  }

	  else
	  {

		  setBlueColor();  // выставить голубой цвет для вывода отладочной информации в UART
 8000278:	f000 fa60 	bl	800073c <setBlueColor>

		  sendOk();        // отправка события "OK" в UART
 800027c:	f000 fa3a 	bl	80006f4 <sendOk>

		  HAL_Delay(2000); // пауза в 2000 ms
 8000280:	23fa      	movs	r3, #250	; 0xfa
 8000282:	00db      	lsls	r3, r3, #3
 8000284:	0018      	movs	r0, r3
 8000286:	f000 fc11 	bl	8000aac <HAL_Delay>
	  if(EnableFlag)      // флаг наступления события тревоги, флаг выставляется в обработчике прерывания
 800028a:	e7e7      	b.n	800025c <main+0x2c>
 800028c:	20000050 	.word	0x20000050
 8000290:	2000011c 	.word	0x2000011c
 8000294:	2000004c 	.word	0x2000004c

08000298 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000298:	b590      	push	{r4, r7, lr}
 800029a:	b099      	sub	sp, #100	; 0x64
 800029c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800029e:	242c      	movs	r4, #44	; 0x2c
 80002a0:	193b      	adds	r3, r7, r4
 80002a2:	0018      	movs	r0, r3
 80002a4:	2334      	movs	r3, #52	; 0x34
 80002a6:	001a      	movs	r2, r3
 80002a8:	2100      	movs	r1, #0
 80002aa:	f007 fb07 	bl	80078bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ae:	231c      	movs	r3, #28
 80002b0:	18fb      	adds	r3, r7, r3
 80002b2:	0018      	movs	r0, r3
 80002b4:	2310      	movs	r3, #16
 80002b6:	001a      	movs	r2, r3
 80002b8:	2100      	movs	r1, #0
 80002ba:	f007 faff 	bl	80078bc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002be:	003b      	movs	r3, r7
 80002c0:	0018      	movs	r0, r3
 80002c2:	231c      	movs	r3, #28
 80002c4:	001a      	movs	r2, r3
 80002c6:	2100      	movs	r1, #0
 80002c8:	f007 faf8 	bl	80078bc <memset>

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80002cc:	193b      	adds	r3, r7, r4
 80002ce:	2220      	movs	r2, #32
 80002d0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80002d2:	193b      	adds	r3, r7, r4
 80002d4:	2201      	movs	r2, #1
 80002d6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002d8:	193b      	adds	r3, r7, r4
 80002da:	2200      	movs	r2, #0
 80002dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002de:	193b      	adds	r3, r7, r4
 80002e0:	0018      	movs	r0, r3
 80002e2:	f002 f9d3 	bl	800268c <HAL_RCC_OscConfig>
 80002e6:	1e03      	subs	r3, r0, #0
 80002e8:	d001      	beq.n	80002ee <SystemClock_Config+0x56>
  {
    Error_Handler();
 80002ea:	f000 fa37 	bl	800075c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ee:	211c      	movs	r1, #28
 80002f0:	187b      	adds	r3, r7, r1
 80002f2:	2207      	movs	r2, #7
 80002f4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80002f6:	187b      	adds	r3, r7, r1
 80002f8:	2203      	movs	r2, #3
 80002fa:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002fc:	187b      	adds	r3, r7, r1
 80002fe:	2200      	movs	r2, #0
 8000300:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000302:	187b      	adds	r3, r7, r1
 8000304:	2200      	movs	r2, #0
 8000306:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000308:	187b      	adds	r3, r7, r1
 800030a:	2101      	movs	r1, #1
 800030c:	0018      	movs	r0, r3
 800030e:	f002 fd43 	bl	8002d98 <HAL_RCC_ClockConfig>
 8000312:	1e03      	subs	r3, r0, #0
 8000314:	d001      	beq.n	800031a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000316:	f000 fa21 	bl	800075c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART2;
 800031a:	003b      	movs	r3, r7
 800031c:	4a09      	ldr	r2, [pc, #36]	; (8000344 <SystemClock_Config+0xac>)
 800031e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000320:	003b      	movs	r3, r7
 8000322:	2200      	movs	r2, #0
 8000324:	60da      	str	r2, [r3, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000326:	003b      	movs	r3, r7
 8000328:	2200      	movs	r2, #0
 800032a:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800032c:	003b      	movs	r3, r7
 800032e:	0018      	movs	r0, r3
 8000330:	f002 feac 	bl	800308c <HAL_RCCEx_PeriphCLKConfig>
 8000334:	1e03      	subs	r3, r0, #0
 8000336:	d001      	beq.n	800033c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000338:	f000 fa10 	bl	800075c <Error_Handler>
  }
}
 800033c:	46c0      	nop			; (mov r8, r8)
 800033e:	46bd      	mov	sp, r7
 8000340:	b019      	add	sp, #100	; 0x64
 8000342:	bd90      	pop	{r4, r7, pc}
 8000344:	00020002 	.word	0x00020002

08000348 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800034e:	003b      	movs	r3, r7
 8000350:	0018      	movs	r0, r3
 8000352:	2308      	movs	r3, #8
 8000354:	001a      	movs	r2, r3
 8000356:	2100      	movs	r1, #0
 8000358:	f007 fab0 	bl	80078bc <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800035c:	4b15      	ldr	r3, [pc, #84]	; (80003b4 <MX_TIM6_Init+0x6c>)
 800035e:	4a16      	ldr	r2, [pc, #88]	; (80003b8 <MX_TIM6_Init+0x70>)
 8000360:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 47999;                // делим частоту 48.000.000 на 48000 и получаем 1000 Гц, это тактирование таймера раз 1 ms
 8000362:	4b14      	ldr	r3, [pc, #80]	; (80003b4 <MX_TIM6_Init+0x6c>)
 8000364:	4a15      	ldr	r2, [pc, #84]	; (80003bc <MX_TIM6_Init+0x74>)
 8000366:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP; // счетчик испульсов считает вверх
 8000368:	4b12      	ldr	r3, [pc, #72]	; (80003b4 <MX_TIM6_Init+0x6c>)
 800036a:	2200      	movs	r2, #0
 800036c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9;                       // отсчитываем 10 тактов, то есть 10 ms, и каждые 10 ms выдаем событие
 800036e:	4b11      	ldr	r3, [pc, #68]	; (80003b4 <MX_TIM6_Init+0x6c>)
 8000370:	2209      	movs	r2, #9
 8000372:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000374:	4b0f      	ldr	r3, [pc, #60]	; (80003b4 <MX_TIM6_Init+0x6c>)
 8000376:	2200      	movs	r2, #0
 8000378:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800037a:	4b0e      	ldr	r3, [pc, #56]	; (80003b4 <MX_TIM6_Init+0x6c>)
 800037c:	0018      	movs	r0, r3
 800037e:	f002 ff83 	bl	8003288 <HAL_TIM_Base_Init>
 8000382:	1e03      	subs	r3, r0, #0
 8000384:	d001      	beq.n	800038a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000386:	f000 f9e9 	bl	800075c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800038a:	003b      	movs	r3, r7
 800038c:	2200      	movs	r2, #0
 800038e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000390:	003b      	movs	r3, r7
 8000392:	2200      	movs	r2, #0
 8000394:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000396:	003a      	movs	r2, r7
 8000398:	4b06      	ldr	r3, [pc, #24]	; (80003b4 <MX_TIM6_Init+0x6c>)
 800039a:	0011      	movs	r1, r2
 800039c:	0018      	movs	r0, r3
 800039e:	f003 f9cb 	bl	8003738 <HAL_TIMEx_MasterConfigSynchronization>
 80003a2:	1e03      	subs	r3, r0, #0
 80003a4:	d001      	beq.n	80003aa <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 80003a6:	f000 f9d9 	bl	800075c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80003aa:	46c0      	nop			; (mov r8, r8)
 80003ac:	46bd      	mov	sp, r7
 80003ae:	b002      	add	sp, #8
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	46c0      	nop			; (mov r8, r8)
 80003b4:	20000050 	.word	0x20000050
 80003b8:	40001000 	.word	0x40001000
 80003bc:	0000bb7f 	.word	0x0000bb7f

080003c0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b082      	sub	sp, #8
 80003c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003c6:	003b      	movs	r3, r7
 80003c8:	0018      	movs	r0, r3
 80003ca:	2308      	movs	r3, #8
 80003cc:	001a      	movs	r2, r3
 80003ce:	2100      	movs	r1, #0
 80003d0:	f007 fa74 	bl	80078bc <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80003d4:	4b15      	ldr	r3, [pc, #84]	; (800042c <MX_TIM7_Init+0x6c>)
 80003d6:	4a16      	ldr	r2, [pc, #88]	; (8000430 <MX_TIM7_Init+0x70>)
 80003d8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 47999;              // делим частоту 48.000.000 на 48000 и получаем 1000 Гц, это тактирование таймера  раз 1 ms
 80003da:	4b14      	ldr	r3, [pc, #80]	; (800042c <MX_TIM7_Init+0x6c>)
 80003dc:	4a15      	ldr	r2, [pc, #84]	; (8000434 <MX_TIM7_Init+0x74>)
 80003de:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003e0:	4b12      	ldr	r3, [pc, #72]	; (800042c <MX_TIM7_Init+0x6c>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 499;                    // отсчитываем 10 тактов, то есть 500 ms, и каждые 500 ms выдаем событие
 80003e6:	4b11      	ldr	r3, [pc, #68]	; (800042c <MX_TIM7_Init+0x6c>)
 80003e8:	22f4      	movs	r2, #244	; 0xf4
 80003ea:	32ff      	adds	r2, #255	; 0xff
 80003ec:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003ee:	4b0f      	ldr	r3, [pc, #60]	; (800042c <MX_TIM7_Init+0x6c>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80003f4:	4b0d      	ldr	r3, [pc, #52]	; (800042c <MX_TIM7_Init+0x6c>)
 80003f6:	0018      	movs	r0, r3
 80003f8:	f002 ff46 	bl	8003288 <HAL_TIM_Base_Init>
 80003fc:	1e03      	subs	r3, r0, #0
 80003fe:	d001      	beq.n	8000404 <MX_TIM7_Init+0x44>
  {
    Error_Handler();
 8000400:	f000 f9ac 	bl	800075c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000404:	003b      	movs	r3, r7
 8000406:	2200      	movs	r2, #0
 8000408:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800040a:	003b      	movs	r3, r7
 800040c:	2200      	movs	r2, #0
 800040e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000410:	003a      	movs	r2, r7
 8000412:	4b06      	ldr	r3, [pc, #24]	; (800042c <MX_TIM7_Init+0x6c>)
 8000414:	0011      	movs	r1, r2
 8000416:	0018      	movs	r0, r3
 8000418:	f003 f98e 	bl	8003738 <HAL_TIMEx_MasterConfigSynchronization>
 800041c:	1e03      	subs	r3, r0, #0
 800041e:	d001      	beq.n	8000424 <MX_TIM7_Init+0x64>
  {
    Error_Handler();
 8000420:	f000 f99c 	bl	800075c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000424:	46c0      	nop			; (mov r8, r8)
 8000426:	46bd      	mov	sp, r7
 8000428:	b002      	add	sp, #8
 800042a:	bd80      	pop	{r7, pc}
 800042c:	2000011c 	.word	0x2000011c
 8000430:	40001400 	.word	0x40001400
 8000434:	0000bb7f 	.word	0x0000bb7f

08000438 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800043c:	4b14      	ldr	r3, [pc, #80]	; (8000490 <MX_USART2_UART_Init+0x58>)
 800043e:	4a15      	ldr	r2, [pc, #84]	; (8000494 <MX_USART2_UART_Init+0x5c>)
 8000440:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;                 // скорость работы UART 9600
 8000442:	4b13      	ldr	r3, [pc, #76]	; (8000490 <MX_USART2_UART_Init+0x58>)
 8000444:	22e1      	movs	r2, #225	; 0xe1
 8000446:	0252      	lsls	r2, r2, #9
 8000448:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B; // длина слова 8 бит
 800044a:	4b11      	ldr	r3, [pc, #68]	; (8000490 <MX_USART2_UART_Init+0x58>)
 800044c:	2200      	movs	r2, #0
 800044e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;      // 1 stop bit
 8000450:	4b0f      	ldr	r3, [pc, #60]	; (8000490 <MX_USART2_UART_Init+0x58>)
 8000452:	2200      	movs	r2, #0
 8000454:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000456:	4b0e      	ldr	r3, [pc, #56]	; (8000490 <MX_USART2_UART_Init+0x58>)
 8000458:	2200      	movs	r2, #0
 800045a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800045c:	4b0c      	ldr	r3, [pc, #48]	; (8000490 <MX_USART2_UART_Init+0x58>)
 800045e:	220c      	movs	r2, #12
 8000460:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000462:	4b0b      	ldr	r3, [pc, #44]	; (8000490 <MX_USART2_UART_Init+0x58>)
 8000464:	2200      	movs	r2, #0
 8000466:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000468:	4b09      	ldr	r3, [pc, #36]	; (8000490 <MX_USART2_UART_Init+0x58>)
 800046a:	2200      	movs	r2, #0
 800046c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800046e:	4b08      	ldr	r3, [pc, #32]	; (8000490 <MX_USART2_UART_Init+0x58>)
 8000470:	2200      	movs	r2, #0
 8000472:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000474:	4b06      	ldr	r3, [pc, #24]	; (8000490 <MX_USART2_UART_Init+0x58>)
 8000476:	2200      	movs	r2, #0
 8000478:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800047a:	4b05      	ldr	r3, [pc, #20]	; (8000490 <MX_USART2_UART_Init+0x58>)
 800047c:	0018      	movs	r0, r3
 800047e:	f003 f9c9 	bl	8003814 <HAL_UART_Init>
 8000482:	1e03      	subs	r3, r0, #0
 8000484:	d001      	beq.n	800048a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000486:	f000 f969 	bl	800075c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}
 8000490:	20000098 	.word	0x20000098
 8000494:	40004400 	.word	0x40004400

08000498 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000498:	b590      	push	{r4, r7, lr}
 800049a:	b08b      	sub	sp, #44	; 0x2c
 800049c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800049e:	2414      	movs	r4, #20
 80004a0:	193b      	adds	r3, r7, r4
 80004a2:	0018      	movs	r0, r3
 80004a4:	2314      	movs	r3, #20
 80004a6:	001a      	movs	r2, r3
 80004a8:	2100      	movs	r1, #0
 80004aa:	f007 fa07 	bl	80078bc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();  //тактирование порта С
 80004ae:	4b4b      	ldr	r3, [pc, #300]	; (80005dc <MX_GPIO_Init+0x144>)
 80004b0:	695a      	ldr	r2, [r3, #20]
 80004b2:	4b4a      	ldr	r3, [pc, #296]	; (80005dc <MX_GPIO_Init+0x144>)
 80004b4:	2180      	movs	r1, #128	; 0x80
 80004b6:	0309      	lsls	r1, r1, #12
 80004b8:	430a      	orrs	r2, r1
 80004ba:	615a      	str	r2, [r3, #20]
 80004bc:	4b47      	ldr	r3, [pc, #284]	; (80005dc <MX_GPIO_Init+0x144>)
 80004be:	695a      	ldr	r2, [r3, #20]
 80004c0:	2380      	movs	r3, #128	; 0x80
 80004c2:	031b      	lsls	r3, r3, #12
 80004c4:	4013      	ands	r3, r2
 80004c6:	613b      	str	r3, [r7, #16]
 80004c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();  //тактирование порта F
 80004ca:	4b44      	ldr	r3, [pc, #272]	; (80005dc <MX_GPIO_Init+0x144>)
 80004cc:	695a      	ldr	r2, [r3, #20]
 80004ce:	4b43      	ldr	r3, [pc, #268]	; (80005dc <MX_GPIO_Init+0x144>)
 80004d0:	2180      	movs	r1, #128	; 0x80
 80004d2:	03c9      	lsls	r1, r1, #15
 80004d4:	430a      	orrs	r2, r1
 80004d6:	615a      	str	r2, [r3, #20]
 80004d8:	4b40      	ldr	r3, [pc, #256]	; (80005dc <MX_GPIO_Init+0x144>)
 80004da:	695a      	ldr	r2, [r3, #20]
 80004dc:	2380      	movs	r3, #128	; 0x80
 80004de:	03db      	lsls	r3, r3, #15
 80004e0:	4013      	ands	r3, r2
 80004e2:	60fb      	str	r3, [r7, #12]
 80004e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();  //тактирование порта A
 80004e6:	4b3d      	ldr	r3, [pc, #244]	; (80005dc <MX_GPIO_Init+0x144>)
 80004e8:	695a      	ldr	r2, [r3, #20]
 80004ea:	4b3c      	ldr	r3, [pc, #240]	; (80005dc <MX_GPIO_Init+0x144>)
 80004ec:	2180      	movs	r1, #128	; 0x80
 80004ee:	0289      	lsls	r1, r1, #10
 80004f0:	430a      	orrs	r2, r1
 80004f2:	615a      	str	r2, [r3, #20]
 80004f4:	4b39      	ldr	r3, [pc, #228]	; (80005dc <MX_GPIO_Init+0x144>)
 80004f6:	695a      	ldr	r2, [r3, #20]
 80004f8:	2380      	movs	r3, #128	; 0x80
 80004fa:	029b      	lsls	r3, r3, #10
 80004fc:	4013      	ands	r3, r2
 80004fe:	60bb      	str	r3, [r7, #8]
 8000500:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();  //тактирование порта B
 8000502:	4b36      	ldr	r3, [pc, #216]	; (80005dc <MX_GPIO_Init+0x144>)
 8000504:	695a      	ldr	r2, [r3, #20]
 8000506:	4b35      	ldr	r3, [pc, #212]	; (80005dc <MX_GPIO_Init+0x144>)
 8000508:	2180      	movs	r1, #128	; 0x80
 800050a:	02c9      	lsls	r1, r1, #11
 800050c:	430a      	orrs	r2, r1
 800050e:	615a      	str	r2, [r3, #20]
 8000510:	4b32      	ldr	r3, [pc, #200]	; (80005dc <MX_GPIO_Init+0x144>)
 8000512:	695a      	ldr	r2, [r3, #20]
 8000514:	2380      	movs	r3, #128	; 0x80
 8000516:	02db      	lsls	r3, r3, #11
 8000518:	4013      	ands	r3, r2
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET); // пин выставлем в LOW
 800051e:	2390      	movs	r3, #144	; 0x90
 8000520:	05db      	lsls	r3, r3, #23
 8000522:	2200      	movs	r2, #0
 8000524:	2120      	movs	r1, #32
 8000526:	0018      	movs	r0, r3
 8000528:	f000 fdd5 	bl	80010d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, USER_PIEZO_ELEMENT_Pin|USER_LED_Pin|POWER_INDICATION_Pin, GPIO_PIN_RESET); // пины выставлем в LOW
 800052c:	492c      	ldr	r1, [pc, #176]	; (80005e0 <MX_GPIO_Init+0x148>)
 800052e:	4b2d      	ldr	r3, [pc, #180]	; (80005e4 <MX_GPIO_Init+0x14c>)
 8000530:	2200      	movs	r2, #0
 8000532:	0018      	movs	r0, r3
 8000534:	f000 fdcf 	bl	80010d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000538:	193b      	adds	r3, r7, r4
 800053a:	2280      	movs	r2, #128	; 0x80
 800053c:	0192      	lsls	r2, r2, #6
 800053e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000540:	193b      	adds	r3, r7, r4
 8000542:	4a29      	ldr	r2, [pc, #164]	; (80005e8 <MX_GPIO_Init+0x150>)
 8000544:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000546:	193b      	adds	r3, r7, r4
 8000548:	2200      	movs	r2, #0
 800054a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800054c:	193b      	adds	r3, r7, r4
 800054e:	4a27      	ldr	r2, [pc, #156]	; (80005ec <MX_GPIO_Init+0x154>)
 8000550:	0019      	movs	r1, r3
 8000552:	0010      	movs	r0, r2
 8000554:	f000 fc2a 	bl	8000dac <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_INPUT_GERKON_Pin */
  GPIO_InitStruct.Pin = USER_INPUT_GERKON_Pin;
 8000558:	193b      	adds	r3, r7, r4
 800055a:	2201      	movs	r2, #1
 800055c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800055e:	193b      	adds	r3, r7, r4
 8000560:	2200      	movs	r2, #0
 8000562:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull =  GPIO_PULLUP;   // подтянут к вверху , то есть 3.3 вольта
 8000564:	193b      	adds	r3, r7, r4
 8000566:	2201      	movs	r2, #1
 8000568:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USER_INPUT_GERKON_GPIO_Port, &GPIO_InitStruct);
 800056a:	193a      	adds	r2, r7, r4
 800056c:	2390      	movs	r3, #144	; 0x90
 800056e:	05db      	lsls	r3, r3, #23
 8000570:	0011      	movs	r1, r2
 8000572:	0018      	movs	r0, r3
 8000574:	f000 fc1a 	bl	8000dac <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000578:	193b      	adds	r3, r7, r4
 800057a:	2220      	movs	r2, #32
 800057c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800057e:	193b      	adds	r3, r7, r4
 8000580:	2201      	movs	r2, #1
 8000582:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000584:	193b      	adds	r3, r7, r4
 8000586:	2200      	movs	r2, #0
 8000588:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800058a:	193b      	adds	r3, r7, r4
 800058c:	2200      	movs	r2, #0
 800058e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000590:	193a      	adds	r2, r7, r4
 8000592:	2390      	movs	r3, #144	; 0x90
 8000594:	05db      	lsls	r3, r3, #23
 8000596:	0011      	movs	r1, r2
 8000598:	0018      	movs	r0, r3
 800059a:	f000 fc07 	bl	8000dac <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_PIEZO_ELEMENT_Pin USER_LED_Pin POWER_INDICATION_Pin */
  GPIO_InitStruct.Pin = USER_PIEZO_ELEMENT_Pin|USER_LED_Pin|POWER_INDICATION_Pin;
 800059e:	0021      	movs	r1, r4
 80005a0:	187b      	adds	r3, r7, r1
 80005a2:	4a0f      	ldr	r2, [pc, #60]	; (80005e0 <MX_GPIO_Init+0x148>)
 80005a4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a6:	187b      	adds	r3, r7, r1
 80005a8:	2201      	movs	r2, #1
 80005aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ac:	187b      	adds	r3, r7, r1
 80005ae:	2200      	movs	r2, #0
 80005b0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b2:	187b      	adds	r3, r7, r1
 80005b4:	2200      	movs	r2, #0
 80005b6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005b8:	187b      	adds	r3, r7, r1
 80005ba:	4a0a      	ldr	r2, [pc, #40]	; (80005e4 <MX_GPIO_Init+0x14c>)
 80005bc:	0019      	movs	r1, r3
 80005be:	0010      	movs	r0, r2
 80005c0:	f000 fbf4 	bl	8000dac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80005c4:	2200      	movs	r2, #0
 80005c6:	2100      	movs	r1, #0
 80005c8:	2007      	movs	r0, #7
 80005ca:	f000 fb3f 	bl	8000c4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80005ce:	2007      	movs	r0, #7
 80005d0:	f000 fb51 	bl	8000c76 <HAL_NVIC_EnableIRQ>

}
 80005d4:	46c0      	nop			; (mov r8, r8)
 80005d6:	46bd      	mov	sp, r7
 80005d8:	b00b      	add	sp, #44	; 0x2c
 80005da:	bd90      	pop	{r4, r7, pc}
 80005dc:	40021000 	.word	0x40021000
 80005e0:	00002006 	.word	0x00002006
 80005e4:	48000400 	.word	0x48000400
 80005e8:	10210000 	.word	0x10210000
 80005ec:	48000800 	.word	0x48000800

080005f0 <HAL_TIM_PeriodElapsedCallback>:
/*
 * данная функция вызывается каждый раз  при наступлении события от
 * таймеров TIM6 и TIM7, в ней производится обработка события, то есть выполняются необходимые нам действия
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
   *  для отслеживания нажатия кнопки и
   *  устранения дребезга, если кнопку
   *  нажимали менее 50 ms- то это дребезг
   *  попадаем в этом в обработчик раз в 10 ms
  */
  if(htim->Instance == TIM6) // попадаем в данный if каждые 10 ms, так настроен таймер TIM6
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a1b      	ldr	r2, [pc, #108]	; (800066c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80005fe:	4293      	cmp	r3, r2
 8000600:	d122      	bne.n	8000648 <HAL_TIM_PeriodElapsedCallback+0x58>
  {
	  InputState = HAL_GPIO_ReadPin(USER_INPUT_GERKON_GPIO_Port,USER_INPUT_GERKON_Pin);
 8000602:	2390      	movs	r3, #144	; 0x90
 8000604:	05db      	lsls	r3, r3, #23
 8000606:	2101      	movs	r1, #1
 8000608:	0018      	movs	r0, r3
 800060a:	f000 fd47 	bl	800109c <HAL_GPIO_ReadPin>
 800060e:	0003      	movs	r3, r0
 8000610:	001a      	movs	r2, r3
 8000612:	4b17      	ldr	r3, [pc, #92]	; (8000670 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000614:	701a      	strb	r2, [r3, #0]

	   if(InputState==GPIO_PIN_RESET)
 8000616:	4b16      	ldr	r3, [pc, #88]	; (8000670 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d106      	bne.n	800062c <HAL_TIM_PeriodElapsedCallback+0x3c>
	     {
		     CounterBounce++; //  счетчик отрезков времени. считаем кол-во  отрезков времени по 10 ms
 800061e:	4b15      	ldr	r3, [pc, #84]	; (8000674 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	3301      	adds	r3, #1
 8000624:	b2da      	uxtb	r2, r3
 8000626:	4b13      	ldr	r3, [pc, #76]	; (8000674 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000628:	701a      	strb	r2, [r3, #0]
 800062a:	e005      	b.n	8000638 <HAL_TIM_PeriodElapsedCallback+0x48>
	     }

	     else
	     {
		     CounterBounce = 0;  // любой дребезг - сброс счетчика отрезков времени.
 800062c:	4b11      	ldr	r3, [pc, #68]	; (8000674 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800062e:	2200      	movs	r2, #0
 8000630:	701a      	strb	r2, [r3, #0]
		     EnableFlag = 0;
 8000632:	4b11      	ldr	r3, [pc, #68]	; (8000678 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000634:	2200      	movs	r2, #0
 8000636:	701a      	strb	r2, [r3, #0]
	     }


	  if(CounterBounce > 5) // >=50 ms
 8000638:	4b0e      	ldr	r3, [pc, #56]	; (8000674 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	2b05      	cmp	r3, #5
 800063e:	d911      	bls.n	8000664 <HAL_TIM_PeriodElapsedCallback+0x74>
	     {
	       EnableFlag = 1;   // выставляем флаг для включения тревоги
 8000640:	4b0d      	ldr	r3, [pc, #52]	; (8000678 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000642:	2201      	movs	r2, #1
 8000644:	701a      	strb	r2, [r3, #0]
	      {
		   disableAlarm();
	      }
   }

}
 8000646:	e00d      	b.n	8000664 <HAL_TIM_PeriodElapsedCallback+0x74>
  else if(htim->Instance == TIM7) // попадаем сюда каждые 500 ms,  так настроен таймер TIM7
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a0b      	ldr	r2, [pc, #44]	; (800067c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d108      	bne.n	8000664 <HAL_TIM_PeriodElapsedCallback+0x74>
	    if(EnableFlag)     // если флага в 1
 8000652:	4b09      	ldr	r3, [pc, #36]	; (8000678 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d002      	beq.n	8000660 <HAL_TIM_PeriodElapsedCallback+0x70>
		   enableAlarm(); //
 800065a:	f000 f811 	bl	8000680 <enableAlarm>
}
 800065e:	e001      	b.n	8000664 <HAL_TIM_PeriodElapsedCallback+0x74>
		   disableAlarm();
 8000660:	f000 f820 	bl	80006a4 <disableAlarm>
}
 8000664:	46c0      	nop			; (mov r8, r8)
 8000666:	46bd      	mov	sp, r7
 8000668:	b002      	add	sp, #8
 800066a:	bd80      	pop	{r7, pc}
 800066c:	40001000 	.word	0x40001000
 8000670:	20000000 	.word	0x20000000
 8000674:	2000004d 	.word	0x2000004d
 8000678:	2000004c 	.word	0x2000004c
 800067c:	40001400 	.word	0x40001400

08000680 <enableAlarm>:


void enableAlarm(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0

   HAL_GPIO_TogglePin(GPIOB,USER_PIEZO_ELEMENT_Pin); // звук
 8000684:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <enableAlarm+0x20>)
 8000686:	2102      	movs	r1, #2
 8000688:	0018      	movs	r0, r3
 800068a:	f000 fd41 	bl	8001110 <HAL_GPIO_TogglePin>

   HAL_GPIO_TogglePin(GPIOB,USER_LED_Pin);           // свет
 800068e:	4b04      	ldr	r3, [pc, #16]	; (80006a0 <enableAlarm+0x20>)
 8000690:	2104      	movs	r1, #4
 8000692:	0018      	movs	r0, r3
 8000694:	f000 fd3c 	bl	8001110 <HAL_GPIO_TogglePin>
}
 8000698:	46c0      	nop			; (mov r8, r8)
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	46c0      	nop			; (mov r8, r8)
 80006a0:	48000400 	.word	0x48000400

080006a4 <disableAlarm>:

void disableAlarm(void )
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,USER_PIEZO_ELEMENT_Pin ,GPIO_PIN_RESET );
 80006a8:	4b07      	ldr	r3, [pc, #28]	; (80006c8 <disableAlarm+0x24>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	2102      	movs	r1, #2
 80006ae:	0018      	movs	r0, r3
 80006b0:	f000 fd11 	bl	80010d6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB,USER_LED_Pin ,GPIO_PIN_RESET);
 80006b4:	4b04      	ldr	r3, [pc, #16]	; (80006c8 <disableAlarm+0x24>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	2104      	movs	r1, #4
 80006ba:	0018      	movs	r0, r3
 80006bc:	f000 fd0b 	bl	80010d6 <HAL_GPIO_WritePin>
}
 80006c0:	46c0      	nop			; (mov r8, r8)
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	46c0      	nop			; (mov r8, r8)
 80006c8:	48000400 	.word	0x48000400

080006cc <sendAlarm>:

void sendAlarm(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
    HAL_UART_Transmit(&huart2,(uint8_t *)string_alarm, (uint16_t)strlen(string_alarm),200);
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <sendAlarm+0x20>)
 80006d2:	0018      	movs	r0, r3
 80006d4:	f7ff fd18 	bl	8000108 <strlen>
 80006d8:	0003      	movs	r3, r0
 80006da:	b29a      	uxth	r2, r3
 80006dc:	4903      	ldr	r1, [pc, #12]	; (80006ec <sendAlarm+0x20>)
 80006de:	4804      	ldr	r0, [pc, #16]	; (80006f0 <sendAlarm+0x24>)
 80006e0:	23c8      	movs	r3, #200	; 0xc8
 80006e2:	f003 f8eb 	bl	80038bc <HAL_UART_Transmit>
}
 80006e6:	46c0      	nop			; (mov r8, r8)
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	20000004 	.word	0x20000004
 80006f0:	20000098 	.word	0x20000098

080006f4 <sendOk>:


void sendOk(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
	 HAL_UART_Transmit(&huart2,(uint8_t *)string_ok, (uint16_t)strlen(string_ok),200);
 80006f8:	4b06      	ldr	r3, [pc, #24]	; (8000714 <sendOk+0x20>)
 80006fa:	0018      	movs	r0, r3
 80006fc:	f7ff fd04 	bl	8000108 <strlen>
 8000700:	0003      	movs	r3, r0
 8000702:	b29a      	uxth	r2, r3
 8000704:	4903      	ldr	r1, [pc, #12]	; (8000714 <sendOk+0x20>)
 8000706:	4804      	ldr	r0, [pc, #16]	; (8000718 <sendOk+0x24>)
 8000708:	23c8      	movs	r3, #200	; 0xc8
 800070a:	f003 f8d7 	bl	80038bc <HAL_UART_Transmit>
}
 800070e:	46c0      	nop			; (mov r8, r8)
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	2000001c 	.word	0x2000001c
 8000718:	20000098 	.word	0x20000098

0800071c <setGreenColor>:

void setGreenColor(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2,(uint8_t *)"\033[31m\0", (uint16_t)strlen("\033[31m\0"),200);
 8000720:	4904      	ldr	r1, [pc, #16]	; (8000734 <setGreenColor+0x18>)
 8000722:	4805      	ldr	r0, [pc, #20]	; (8000738 <setGreenColor+0x1c>)
 8000724:	23c8      	movs	r3, #200	; 0xc8
 8000726:	2205      	movs	r2, #5
 8000728:	f003 f8c8 	bl	80038bc <HAL_UART_Transmit>
}
 800072c:	46c0      	nop			; (mov r8, r8)
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	080078e4 	.word	0x080078e4
 8000738:	20000098 	.word	0x20000098

0800073c <setBlueColor>:

void setBlueColor(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
	  HAL_UART_Transmit(&huart2,(uint8_t *)"\033[34m\0", (uint16_t)strlen("\033[34m\0"),200);
 8000740:	4904      	ldr	r1, [pc, #16]	; (8000754 <setBlueColor+0x18>)
 8000742:	4805      	ldr	r0, [pc, #20]	; (8000758 <setBlueColor+0x1c>)
 8000744:	23c8      	movs	r3, #200	; 0xc8
 8000746:	2205      	movs	r2, #5
 8000748:	f003 f8b8 	bl	80038bc <HAL_UART_Transmit>
}
 800074c:	46c0      	nop			; (mov r8, r8)
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	46c0      	nop			; (mov r8, r8)
 8000754:	080078ec 	.word	0x080078ec
 8000758:	20000098 	.word	0x20000098

0800075c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000760:	46c0      	nop			; (mov r8, r8)
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
	...

08000768 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <HAL_MspInit+0x44>)
 8000770:	699a      	ldr	r2, [r3, #24]
 8000772:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <HAL_MspInit+0x44>)
 8000774:	2101      	movs	r1, #1
 8000776:	430a      	orrs	r2, r1
 8000778:	619a      	str	r2, [r3, #24]
 800077a:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <HAL_MspInit+0x44>)
 800077c:	699b      	ldr	r3, [r3, #24]
 800077e:	2201      	movs	r2, #1
 8000780:	4013      	ands	r3, r2
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000786:	4b09      	ldr	r3, [pc, #36]	; (80007ac <HAL_MspInit+0x44>)
 8000788:	69da      	ldr	r2, [r3, #28]
 800078a:	4b08      	ldr	r3, [pc, #32]	; (80007ac <HAL_MspInit+0x44>)
 800078c:	2180      	movs	r1, #128	; 0x80
 800078e:	0549      	lsls	r1, r1, #21
 8000790:	430a      	orrs	r2, r1
 8000792:	61da      	str	r2, [r3, #28]
 8000794:	4b05      	ldr	r3, [pc, #20]	; (80007ac <HAL_MspInit+0x44>)
 8000796:	69da      	ldr	r2, [r3, #28]
 8000798:	2380      	movs	r3, #128	; 0x80
 800079a:	055b      	lsls	r3, r3, #21
 800079c:	4013      	ands	r3, r2
 800079e:	603b      	str	r3, [r7, #0]
 80007a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007a2:	46c0      	nop			; (mov r8, r8)
 80007a4:	46bd      	mov	sp, r7
 80007a6:	b002      	add	sp, #8
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	46c0      	nop			; (mov r8, r8)
 80007ac:	40021000 	.word	0x40021000

080007b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a1a      	ldr	r2, [pc, #104]	; (8000828 <HAL_TIM_Base_MspInit+0x78>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d114      	bne.n	80007ec <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80007c2:	4b1a      	ldr	r3, [pc, #104]	; (800082c <HAL_TIM_Base_MspInit+0x7c>)
 80007c4:	69da      	ldr	r2, [r3, #28]
 80007c6:	4b19      	ldr	r3, [pc, #100]	; (800082c <HAL_TIM_Base_MspInit+0x7c>)
 80007c8:	2110      	movs	r1, #16
 80007ca:	430a      	orrs	r2, r1
 80007cc:	61da      	str	r2, [r3, #28]
 80007ce:	4b17      	ldr	r3, [pc, #92]	; (800082c <HAL_TIM_Base_MspInit+0x7c>)
 80007d0:	69db      	ldr	r3, [r3, #28]
 80007d2:	2210      	movs	r2, #16
 80007d4:	4013      	ands	r3, r2
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80007da:	2200      	movs	r2, #0
 80007dc:	2100      	movs	r1, #0
 80007de:	2011      	movs	r0, #17
 80007e0:	f000 fa34 	bl	8000c4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80007e4:	2011      	movs	r0, #17
 80007e6:	f000 fa46 	bl	8000c76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80007ea:	e018      	b.n	800081e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM7)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a0f      	ldr	r2, [pc, #60]	; (8000830 <HAL_TIM_Base_MspInit+0x80>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d113      	bne.n	800081e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80007f6:	4b0d      	ldr	r3, [pc, #52]	; (800082c <HAL_TIM_Base_MspInit+0x7c>)
 80007f8:	69da      	ldr	r2, [r3, #28]
 80007fa:	4b0c      	ldr	r3, [pc, #48]	; (800082c <HAL_TIM_Base_MspInit+0x7c>)
 80007fc:	2120      	movs	r1, #32
 80007fe:	430a      	orrs	r2, r1
 8000800:	61da      	str	r2, [r3, #28]
 8000802:	4b0a      	ldr	r3, [pc, #40]	; (800082c <HAL_TIM_Base_MspInit+0x7c>)
 8000804:	69db      	ldr	r3, [r3, #28]
 8000806:	2220      	movs	r2, #32
 8000808:	4013      	ands	r3, r2
 800080a:	60bb      	str	r3, [r7, #8]
 800080c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800080e:	2200      	movs	r2, #0
 8000810:	2100      	movs	r1, #0
 8000812:	2012      	movs	r0, #18
 8000814:	f000 fa1a 	bl	8000c4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000818:	2012      	movs	r0, #18
 800081a:	f000 fa2c 	bl	8000c76 <HAL_NVIC_EnableIRQ>
}
 800081e:	46c0      	nop			; (mov r8, r8)
 8000820:	46bd      	mov	sp, r7
 8000822:	b004      	add	sp, #16
 8000824:	bd80      	pop	{r7, pc}
 8000826:	46c0      	nop			; (mov r8, r8)
 8000828:	40001000 	.word	0x40001000
 800082c:	40021000 	.word	0x40021000
 8000830:	40001400 	.word	0x40001400

08000834 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000834:	b590      	push	{r4, r7, lr}
 8000836:	b08b      	sub	sp, #44	; 0x2c
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083c:	2414      	movs	r4, #20
 800083e:	193b      	adds	r3, r7, r4
 8000840:	0018      	movs	r0, r3
 8000842:	2314      	movs	r3, #20
 8000844:	001a      	movs	r2, r3
 8000846:	2100      	movs	r1, #0
 8000848:	f007 f838 	bl	80078bc <memset>
  if(huart->Instance==USART2)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a20      	ldr	r2, [pc, #128]	; (80008d4 <HAL_UART_MspInit+0xa0>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d13a      	bne.n	80008cc <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000856:	4b20      	ldr	r3, [pc, #128]	; (80008d8 <HAL_UART_MspInit+0xa4>)
 8000858:	69da      	ldr	r2, [r3, #28]
 800085a:	4b1f      	ldr	r3, [pc, #124]	; (80008d8 <HAL_UART_MspInit+0xa4>)
 800085c:	2180      	movs	r1, #128	; 0x80
 800085e:	0289      	lsls	r1, r1, #10
 8000860:	430a      	orrs	r2, r1
 8000862:	61da      	str	r2, [r3, #28]
 8000864:	4b1c      	ldr	r3, [pc, #112]	; (80008d8 <HAL_UART_MspInit+0xa4>)
 8000866:	69da      	ldr	r2, [r3, #28]
 8000868:	2380      	movs	r3, #128	; 0x80
 800086a:	029b      	lsls	r3, r3, #10
 800086c:	4013      	ands	r3, r2
 800086e:	613b      	str	r3, [r7, #16]
 8000870:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000872:	4b19      	ldr	r3, [pc, #100]	; (80008d8 <HAL_UART_MspInit+0xa4>)
 8000874:	695a      	ldr	r2, [r3, #20]
 8000876:	4b18      	ldr	r3, [pc, #96]	; (80008d8 <HAL_UART_MspInit+0xa4>)
 8000878:	2180      	movs	r1, #128	; 0x80
 800087a:	0289      	lsls	r1, r1, #10
 800087c:	430a      	orrs	r2, r1
 800087e:	615a      	str	r2, [r3, #20]
 8000880:	4b15      	ldr	r3, [pc, #84]	; (80008d8 <HAL_UART_MspInit+0xa4>)
 8000882:	695a      	ldr	r2, [r3, #20]
 8000884:	2380      	movs	r3, #128	; 0x80
 8000886:	029b      	lsls	r3, r3, #10
 8000888:	4013      	ands	r3, r2
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800088e:	0021      	movs	r1, r4
 8000890:	187b      	adds	r3, r7, r1
 8000892:	220c      	movs	r2, #12
 8000894:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000896:	187b      	adds	r3, r7, r1
 8000898:	2202      	movs	r2, #2
 800089a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	187b      	adds	r3, r7, r1
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a2:	187b      	adds	r3, r7, r1
 80008a4:	2200      	movs	r2, #0
 80008a6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80008a8:	187b      	adds	r3, r7, r1
 80008aa:	2201      	movs	r2, #1
 80008ac:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ae:	187a      	adds	r2, r7, r1
 80008b0:	2390      	movs	r3, #144	; 0x90
 80008b2:	05db      	lsls	r3, r3, #23
 80008b4:	0011      	movs	r1, r2
 80008b6:	0018      	movs	r0, r3
 80008b8:	f000 fa78 	bl	8000dac <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80008bc:	2200      	movs	r2, #0
 80008be:	2100      	movs	r1, #0
 80008c0:	201c      	movs	r0, #28
 80008c2:	f000 f9c3 	bl	8000c4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008c6:	201c      	movs	r0, #28
 80008c8:	f000 f9d5 	bl	8000c76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008cc:	46c0      	nop			; (mov r8, r8)
 80008ce:	46bd      	mov	sp, r7
 80008d0:	b00b      	add	sp, #44	; 0x2c
 80008d2:	bd90      	pop	{r4, r7, pc}
 80008d4:	40004400 	.word	0x40004400
 80008d8:	40021000 	.word	0x40021000

080008dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80008e0:	46c0      	nop			; (mov r8, r8)
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008e6:	b580      	push	{r7, lr}
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ea:	e7fe      	b.n	80008ea <HardFault_Handler+0x4>

080008ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008f0:	46c0      	nop			; (mov r8, r8)
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}

080008f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008f6:	b580      	push	{r7, lr}
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008fa:	46c0      	nop			; (mov r8, r8)
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000904:	f000 f8b6 	bl	8000a74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000908:	46c0      	nop			; (mov r8, r8)
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800090e:	b580      	push	{r7, lr}
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000912:	2380      	movs	r3, #128	; 0x80
 8000914:	019b      	lsls	r3, r3, #6
 8000916:	0018      	movs	r0, r3
 8000918:	f000 fc16 	bl	8001148 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800091c:	46c0      	nop			; (mov r8, r8)
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
	...

08000924 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000928:	4b03      	ldr	r3, [pc, #12]	; (8000938 <TIM6_DAC_IRQHandler+0x14>)
 800092a:	0018      	movs	r0, r3
 800092c:	f002 fd4e 	bl	80033cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000930:	46c0      	nop			; (mov r8, r8)
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	46c0      	nop			; (mov r8, r8)
 8000938:	20000050 	.word	0x20000050

0800093c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000940:	4b03      	ldr	r3, [pc, #12]	; (8000950 <TIM7_IRQHandler+0x14>)
 8000942:	0018      	movs	r0, r3
 8000944:	f002 fd42 	bl	80033cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000948:	46c0      	nop			; (mov r8, r8)
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	46c0      	nop			; (mov r8, r8)
 8000950:	2000011c 	.word	0x2000011c

08000954 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000958:	4b03      	ldr	r3, [pc, #12]	; (8000968 <USART2_IRQHandler+0x14>)
 800095a:	0018      	movs	r0, r3
 800095c:	f003 f858 	bl	8003a10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000960:	46c0      	nop			; (mov r8, r8)
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	46c0      	nop			; (mov r8, r8)
 8000968:	20000098 	.word	0x20000098

0800096c <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000970:	4b03      	ldr	r3, [pc, #12]	; (8000980 <USB_IRQHandler+0x14>)
 8000972:	0018      	movs	r0, r3
 8000974:	f000 fc0e 	bl	8001194 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000978:	46c0      	nop			; (mov r8, r8)
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	46c0      	nop			; (mov r8, r8)
 8000980:	20000168 	.word	0x20000168

08000984 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000988:	46c0      	nop			; (mov r8, r8)
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
	...

08000990 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000990:	480d      	ldr	r0, [pc, #52]	; (80009c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000992:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000994:	480d      	ldr	r0, [pc, #52]	; (80009cc <LoopForever+0x6>)
  ldr r1, =_edata
 8000996:	490e      	ldr	r1, [pc, #56]	; (80009d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000998:	4a0e      	ldr	r2, [pc, #56]	; (80009d4 <LoopForever+0xe>)
  movs r3, #0
 800099a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800099c:	e002      	b.n	80009a4 <LoopCopyDataInit>

0800099e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800099e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009a2:	3304      	adds	r3, #4

080009a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009a8:	d3f9      	bcc.n	800099e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009aa:	4a0b      	ldr	r2, [pc, #44]	; (80009d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009ac:	4c0b      	ldr	r4, [pc, #44]	; (80009dc <LoopForever+0x16>)
  movs r3, #0
 80009ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009b0:	e001      	b.n	80009b6 <LoopFillZerobss>

080009b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009b4:	3204      	adds	r2, #4

080009b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009b8:	d3fb      	bcc.n	80009b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80009ba:	f7ff ffe3 	bl	8000984 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80009be:	f006 ff59 	bl	8007874 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009c2:	f7ff fc35 	bl	8000230 <main>

080009c6 <LoopForever>:

LoopForever:
    b LoopForever
 80009c6:	e7fe      	b.n	80009c6 <LoopForever>
  ldr   r0, =_estack
 80009c8:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80009cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009d0:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 80009d4:	08007994 	.word	0x08007994
  ldr r2, =_sbss
 80009d8:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 80009dc:	2000045c 	.word	0x2000045c

080009e0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009e0:	e7fe      	b.n	80009e0 <ADC1_COMP_IRQHandler>
	...

080009e4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009e8:	4b07      	ldr	r3, [pc, #28]	; (8000a08 <HAL_Init+0x24>)
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <HAL_Init+0x24>)
 80009ee:	2110      	movs	r1, #16
 80009f0:	430a      	orrs	r2, r1
 80009f2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80009f4:	2000      	movs	r0, #0
 80009f6:	f000 f809 	bl	8000a0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009fa:	f7ff feb5 	bl	8000768 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009fe:	2300      	movs	r3, #0
}
 8000a00:	0018      	movs	r0, r3
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	46c0      	nop			; (mov r8, r8)
 8000a08:	40022000 	.word	0x40022000

08000a0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a0c:	b590      	push	{r4, r7, lr}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a14:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <HAL_InitTick+0x5c>)
 8000a16:	681c      	ldr	r4, [r3, #0]
 8000a18:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <HAL_InitTick+0x60>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	0019      	movs	r1, r3
 8000a1e:	23fa      	movs	r3, #250	; 0xfa
 8000a20:	0098      	lsls	r0, r3, #2
 8000a22:	f7ff fb79 	bl	8000118 <__udivsi3>
 8000a26:	0003      	movs	r3, r0
 8000a28:	0019      	movs	r1, r3
 8000a2a:	0020      	movs	r0, r4
 8000a2c:	f7ff fb74 	bl	8000118 <__udivsi3>
 8000a30:	0003      	movs	r3, r0
 8000a32:	0018      	movs	r0, r3
 8000a34:	f000 f92f 	bl	8000c96 <HAL_SYSTICK_Config>
 8000a38:	1e03      	subs	r3, r0, #0
 8000a3a:	d001      	beq.n	8000a40 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	e00f      	b.n	8000a60 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	2b03      	cmp	r3, #3
 8000a44:	d80b      	bhi.n	8000a5e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a46:	6879      	ldr	r1, [r7, #4]
 8000a48:	2301      	movs	r3, #1
 8000a4a:	425b      	negs	r3, r3
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	0018      	movs	r0, r3
 8000a50:	f000 f8fc 	bl	8000c4c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a54:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <HAL_InitTick+0x64>)
 8000a56:	687a      	ldr	r2, [r7, #4]
 8000a58:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	e000      	b.n	8000a60 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a5e:	2301      	movs	r3, #1
}
 8000a60:	0018      	movs	r0, r3
 8000a62:	46bd      	mov	sp, r7
 8000a64:	b003      	add	sp, #12
 8000a66:	bd90      	pop	{r4, r7, pc}
 8000a68:	20000024 	.word	0x20000024
 8000a6c:	2000002c 	.word	0x2000002c
 8000a70:	20000028 	.word	0x20000028

08000a74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a78:	4b05      	ldr	r3, [pc, #20]	; (8000a90 <HAL_IncTick+0x1c>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	001a      	movs	r2, r3
 8000a7e:	4b05      	ldr	r3, [pc, #20]	; (8000a94 <HAL_IncTick+0x20>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	18d2      	adds	r2, r2, r3
 8000a84:	4b03      	ldr	r3, [pc, #12]	; (8000a94 <HAL_IncTick+0x20>)
 8000a86:	601a      	str	r2, [r3, #0]
}
 8000a88:	46c0      	nop			; (mov r8, r8)
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	46c0      	nop			; (mov r8, r8)
 8000a90:	2000002c 	.word	0x2000002c
 8000a94:	20000164 	.word	0x20000164

08000a98 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a9c:	4b02      	ldr	r3, [pc, #8]	; (8000aa8 <HAL_GetTick+0x10>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
}
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	46c0      	nop			; (mov r8, r8)
 8000aa8:	20000164 	.word	0x20000164

08000aac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ab4:	f7ff fff0 	bl	8000a98 <HAL_GetTick>
 8000ab8:	0003      	movs	r3, r0
 8000aba:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	d005      	beq.n	8000ad2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ac6:	4b0a      	ldr	r3, [pc, #40]	; (8000af0 <HAL_Delay+0x44>)
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	001a      	movs	r2, r3
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	189b      	adds	r3, r3, r2
 8000ad0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000ad2:	46c0      	nop			; (mov r8, r8)
 8000ad4:	f7ff ffe0 	bl	8000a98 <HAL_GetTick>
 8000ad8:	0002      	movs	r2, r0
 8000ada:	68bb      	ldr	r3, [r7, #8]
 8000adc:	1ad3      	subs	r3, r2, r3
 8000ade:	68fa      	ldr	r2, [r7, #12]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	d8f7      	bhi.n	8000ad4 <HAL_Delay+0x28>
  {
  }
}
 8000ae4:	46c0      	nop			; (mov r8, r8)
 8000ae6:	46c0      	nop			; (mov r8, r8)
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	b004      	add	sp, #16
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	46c0      	nop			; (mov r8, r8)
 8000af0:	2000002c 	.word	0x2000002c

08000af4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	0002      	movs	r2, r0
 8000afc:	1dfb      	adds	r3, r7, #7
 8000afe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b00:	1dfb      	adds	r3, r7, #7
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	2b7f      	cmp	r3, #127	; 0x7f
 8000b06:	d809      	bhi.n	8000b1c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b08:	1dfb      	adds	r3, r7, #7
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	001a      	movs	r2, r3
 8000b0e:	231f      	movs	r3, #31
 8000b10:	401a      	ands	r2, r3
 8000b12:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <__NVIC_EnableIRQ+0x30>)
 8000b14:	2101      	movs	r1, #1
 8000b16:	4091      	lsls	r1, r2
 8000b18:	000a      	movs	r2, r1
 8000b1a:	601a      	str	r2, [r3, #0]
  }
}
 8000b1c:	46c0      	nop			; (mov r8, r8)
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	b002      	add	sp, #8
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	e000e100 	.word	0xe000e100

08000b28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b28:	b590      	push	{r4, r7, lr}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	0002      	movs	r2, r0
 8000b30:	6039      	str	r1, [r7, #0]
 8000b32:	1dfb      	adds	r3, r7, #7
 8000b34:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b36:	1dfb      	adds	r3, r7, #7
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	2b7f      	cmp	r3, #127	; 0x7f
 8000b3c:	d828      	bhi.n	8000b90 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b3e:	4a2f      	ldr	r2, [pc, #188]	; (8000bfc <__NVIC_SetPriority+0xd4>)
 8000b40:	1dfb      	adds	r3, r7, #7
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	b25b      	sxtb	r3, r3
 8000b46:	089b      	lsrs	r3, r3, #2
 8000b48:	33c0      	adds	r3, #192	; 0xc0
 8000b4a:	009b      	lsls	r3, r3, #2
 8000b4c:	589b      	ldr	r3, [r3, r2]
 8000b4e:	1dfa      	adds	r2, r7, #7
 8000b50:	7812      	ldrb	r2, [r2, #0]
 8000b52:	0011      	movs	r1, r2
 8000b54:	2203      	movs	r2, #3
 8000b56:	400a      	ands	r2, r1
 8000b58:	00d2      	lsls	r2, r2, #3
 8000b5a:	21ff      	movs	r1, #255	; 0xff
 8000b5c:	4091      	lsls	r1, r2
 8000b5e:	000a      	movs	r2, r1
 8000b60:	43d2      	mvns	r2, r2
 8000b62:	401a      	ands	r2, r3
 8000b64:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	019b      	lsls	r3, r3, #6
 8000b6a:	22ff      	movs	r2, #255	; 0xff
 8000b6c:	401a      	ands	r2, r3
 8000b6e:	1dfb      	adds	r3, r7, #7
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	0018      	movs	r0, r3
 8000b74:	2303      	movs	r3, #3
 8000b76:	4003      	ands	r3, r0
 8000b78:	00db      	lsls	r3, r3, #3
 8000b7a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b7c:	481f      	ldr	r0, [pc, #124]	; (8000bfc <__NVIC_SetPriority+0xd4>)
 8000b7e:	1dfb      	adds	r3, r7, #7
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	b25b      	sxtb	r3, r3
 8000b84:	089b      	lsrs	r3, r3, #2
 8000b86:	430a      	orrs	r2, r1
 8000b88:	33c0      	adds	r3, #192	; 0xc0
 8000b8a:	009b      	lsls	r3, r3, #2
 8000b8c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b8e:	e031      	b.n	8000bf4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b90:	4a1b      	ldr	r2, [pc, #108]	; (8000c00 <__NVIC_SetPriority+0xd8>)
 8000b92:	1dfb      	adds	r3, r7, #7
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	0019      	movs	r1, r3
 8000b98:	230f      	movs	r3, #15
 8000b9a:	400b      	ands	r3, r1
 8000b9c:	3b08      	subs	r3, #8
 8000b9e:	089b      	lsrs	r3, r3, #2
 8000ba0:	3306      	adds	r3, #6
 8000ba2:	009b      	lsls	r3, r3, #2
 8000ba4:	18d3      	adds	r3, r2, r3
 8000ba6:	3304      	adds	r3, #4
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	1dfa      	adds	r2, r7, #7
 8000bac:	7812      	ldrb	r2, [r2, #0]
 8000bae:	0011      	movs	r1, r2
 8000bb0:	2203      	movs	r2, #3
 8000bb2:	400a      	ands	r2, r1
 8000bb4:	00d2      	lsls	r2, r2, #3
 8000bb6:	21ff      	movs	r1, #255	; 0xff
 8000bb8:	4091      	lsls	r1, r2
 8000bba:	000a      	movs	r2, r1
 8000bbc:	43d2      	mvns	r2, r2
 8000bbe:	401a      	ands	r2, r3
 8000bc0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	019b      	lsls	r3, r3, #6
 8000bc6:	22ff      	movs	r2, #255	; 0xff
 8000bc8:	401a      	ands	r2, r3
 8000bca:	1dfb      	adds	r3, r7, #7
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	0018      	movs	r0, r3
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	4003      	ands	r3, r0
 8000bd4:	00db      	lsls	r3, r3, #3
 8000bd6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bd8:	4809      	ldr	r0, [pc, #36]	; (8000c00 <__NVIC_SetPriority+0xd8>)
 8000bda:	1dfb      	adds	r3, r7, #7
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	001c      	movs	r4, r3
 8000be0:	230f      	movs	r3, #15
 8000be2:	4023      	ands	r3, r4
 8000be4:	3b08      	subs	r3, #8
 8000be6:	089b      	lsrs	r3, r3, #2
 8000be8:	430a      	orrs	r2, r1
 8000bea:	3306      	adds	r3, #6
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	18c3      	adds	r3, r0, r3
 8000bf0:	3304      	adds	r3, #4
 8000bf2:	601a      	str	r2, [r3, #0]
}
 8000bf4:	46c0      	nop			; (mov r8, r8)
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	b003      	add	sp, #12
 8000bfa:	bd90      	pop	{r4, r7, pc}
 8000bfc:	e000e100 	.word	0xe000e100
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	1e5a      	subs	r2, r3, #1
 8000c10:	2380      	movs	r3, #128	; 0x80
 8000c12:	045b      	lsls	r3, r3, #17
 8000c14:	429a      	cmp	r2, r3
 8000c16:	d301      	bcc.n	8000c1c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c18:	2301      	movs	r3, #1
 8000c1a:	e010      	b.n	8000c3e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c1c:	4b0a      	ldr	r3, [pc, #40]	; (8000c48 <SysTick_Config+0x44>)
 8000c1e:	687a      	ldr	r2, [r7, #4]
 8000c20:	3a01      	subs	r2, #1
 8000c22:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c24:	2301      	movs	r3, #1
 8000c26:	425b      	negs	r3, r3
 8000c28:	2103      	movs	r1, #3
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f7ff ff7c 	bl	8000b28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c30:	4b05      	ldr	r3, [pc, #20]	; (8000c48 <SysTick_Config+0x44>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c36:	4b04      	ldr	r3, [pc, #16]	; (8000c48 <SysTick_Config+0x44>)
 8000c38:	2207      	movs	r2, #7
 8000c3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c3c:	2300      	movs	r3, #0
}
 8000c3e:	0018      	movs	r0, r3
 8000c40:	46bd      	mov	sp, r7
 8000c42:	b002      	add	sp, #8
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	46c0      	nop			; (mov r8, r8)
 8000c48:	e000e010 	.word	0xe000e010

08000c4c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60b9      	str	r1, [r7, #8]
 8000c54:	607a      	str	r2, [r7, #4]
 8000c56:	210f      	movs	r1, #15
 8000c58:	187b      	adds	r3, r7, r1
 8000c5a:	1c02      	adds	r2, r0, #0
 8000c5c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000c5e:	68ba      	ldr	r2, [r7, #8]
 8000c60:	187b      	adds	r3, r7, r1
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	b25b      	sxtb	r3, r3
 8000c66:	0011      	movs	r1, r2
 8000c68:	0018      	movs	r0, r3
 8000c6a:	f7ff ff5d 	bl	8000b28 <__NVIC_SetPriority>
}
 8000c6e:	46c0      	nop			; (mov r8, r8)
 8000c70:	46bd      	mov	sp, r7
 8000c72:	b004      	add	sp, #16
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c76:	b580      	push	{r7, lr}
 8000c78:	b082      	sub	sp, #8
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	0002      	movs	r2, r0
 8000c7e:	1dfb      	adds	r3, r7, #7
 8000c80:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c82:	1dfb      	adds	r3, r7, #7
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	b25b      	sxtb	r3, r3
 8000c88:	0018      	movs	r0, r3
 8000c8a:	f7ff ff33 	bl	8000af4 <__NVIC_EnableIRQ>
}
 8000c8e:	46c0      	nop			; (mov r8, r8)
 8000c90:	46bd      	mov	sp, r7
 8000c92:	b002      	add	sp, #8
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b082      	sub	sp, #8
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	f7ff ffaf 	bl	8000c04 <SysTick_Config>
 8000ca6:	0003      	movs	r3, r0
}
 8000ca8:	0018      	movs	r0, r3
 8000caa:	46bd      	mov	sp, r7
 8000cac:	b002      	add	sp, #8
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2221      	movs	r2, #33	; 0x21
 8000cbc:	5c9b      	ldrb	r3, [r3, r2]
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	2b02      	cmp	r3, #2
 8000cc2:	d008      	beq.n	8000cd6 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2204      	movs	r2, #4
 8000cc8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2220      	movs	r2, #32
 8000cce:	2100      	movs	r1, #0
 8000cd0:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e020      	b.n	8000d18 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	210e      	movs	r1, #14
 8000ce2:	438a      	bics	r2, r1
 8000ce4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	438a      	bics	r2, r1
 8000cf4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cfe:	2101      	movs	r1, #1
 8000d00:	4091      	lsls	r1, r2
 8000d02:	000a      	movs	r2, r1
 8000d04:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2221      	movs	r2, #33	; 0x21
 8000d0a:	2101      	movs	r1, #1
 8000d0c:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2220      	movs	r2, #32
 8000d12:	2100      	movs	r1, #0
 8000d14:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000d16:	2300      	movs	r3, #0
}
 8000d18:	0018      	movs	r0, r3
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	b002      	add	sp, #8
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d28:	210f      	movs	r1, #15
 8000d2a:	187b      	adds	r3, r7, r1
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2221      	movs	r2, #33	; 0x21
 8000d34:	5c9b      	ldrb	r3, [r3, r2]
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	2b02      	cmp	r3, #2
 8000d3a:	d006      	beq.n	8000d4a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2204      	movs	r2, #4
 8000d40:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000d42:	187b      	adds	r3, r7, r1
 8000d44:	2201      	movs	r2, #1
 8000d46:	701a      	strb	r2, [r3, #0]
 8000d48:	e028      	b.n	8000d9c <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	210e      	movs	r1, #14
 8000d56:	438a      	bics	r2, r1
 8000d58:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2101      	movs	r1, #1
 8000d66:	438a      	bics	r2, r1
 8000d68:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d72:	2101      	movs	r1, #1
 8000d74:	4091      	lsls	r1, r2
 8000d76:	000a      	movs	r2, r1
 8000d78:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2221      	movs	r2, #33	; 0x21
 8000d7e:	2101      	movs	r1, #1
 8000d80:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2220      	movs	r2, #32
 8000d86:	2100      	movs	r1, #0
 8000d88:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d004      	beq.n	8000d9c <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d96:	687a      	ldr	r2, [r7, #4]
 8000d98:	0010      	movs	r0, r2
 8000d9a:	4798      	blx	r3
    } 
  }
  return status;
 8000d9c:	230f      	movs	r3, #15
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	781b      	ldrb	r3, [r3, #0]
}
 8000da2:	0018      	movs	r0, r3
 8000da4:	46bd      	mov	sp, r7
 8000da6:	b004      	add	sp, #16
 8000da8:	bd80      	pop	{r7, pc}
	...

08000dac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000db6:	2300      	movs	r3, #0
 8000db8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dba:	e155      	b.n	8001068 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2101      	movs	r1, #1
 8000dc2:	697a      	ldr	r2, [r7, #20]
 8000dc4:	4091      	lsls	r1, r2
 8000dc6:	000a      	movs	r2, r1
 8000dc8:	4013      	ands	r3, r2
 8000dca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d100      	bne.n	8000dd4 <HAL_GPIO_Init+0x28>
 8000dd2:	e146      	b.n	8001062 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d00b      	beq.n	8000df4 <HAL_GPIO_Init+0x48>
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	2b02      	cmp	r3, #2
 8000de2:	d007      	beq.n	8000df4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000de8:	2b11      	cmp	r3, #17
 8000dea:	d003      	beq.n	8000df4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	2b12      	cmp	r3, #18
 8000df2:	d130      	bne.n	8000e56 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	689b      	ldr	r3, [r3, #8]
 8000df8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	2203      	movs	r2, #3
 8000e00:	409a      	lsls	r2, r3
 8000e02:	0013      	movs	r3, r2
 8000e04:	43da      	mvns	r2, r3
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	68da      	ldr	r2, [r3, #12]
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	409a      	lsls	r2, r3
 8000e16:	0013      	movs	r3, r2
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	693a      	ldr	r2, [r7, #16]
 8000e22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	409a      	lsls	r2, r3
 8000e30:	0013      	movs	r3, r2
 8000e32:	43da      	mvns	r2, r3
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	4013      	ands	r3, r2
 8000e38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	091b      	lsrs	r3, r3, #4
 8000e40:	2201      	movs	r2, #1
 8000e42:	401a      	ands	r2, r3
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	409a      	lsls	r2, r3
 8000e48:	0013      	movs	r3, r2
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	68db      	ldr	r3, [r3, #12]
 8000e5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	2203      	movs	r2, #3
 8000e62:	409a      	lsls	r2, r3
 8000e64:	0013      	movs	r3, r2
 8000e66:	43da      	mvns	r2, r3
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	689a      	ldr	r2, [r3, #8]
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	409a      	lsls	r2, r3
 8000e78:	0013      	movs	r3, r2
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	2b02      	cmp	r3, #2
 8000e8c:	d003      	beq.n	8000e96 <HAL_GPIO_Init+0xea>
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	2b12      	cmp	r3, #18
 8000e94:	d123      	bne.n	8000ede <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	08da      	lsrs	r2, r3, #3
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	3208      	adds	r2, #8
 8000e9e:	0092      	lsls	r2, r2, #2
 8000ea0:	58d3      	ldr	r3, [r2, r3]
 8000ea2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	2207      	movs	r2, #7
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	220f      	movs	r2, #15
 8000eae:	409a      	lsls	r2, r3
 8000eb0:	0013      	movs	r3, r2
 8000eb2:	43da      	mvns	r2, r3
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	691a      	ldr	r2, [r3, #16]
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	2107      	movs	r1, #7
 8000ec2:	400b      	ands	r3, r1
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	409a      	lsls	r2, r3
 8000ec8:	0013      	movs	r3, r2
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	08da      	lsrs	r2, r3, #3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3208      	adds	r2, #8
 8000ed8:	0092      	lsls	r2, r2, #2
 8000eda:	6939      	ldr	r1, [r7, #16]
 8000edc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	2203      	movs	r2, #3
 8000eea:	409a      	lsls	r2, r3
 8000eec:	0013      	movs	r3, r2
 8000eee:	43da      	mvns	r2, r3
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	2203      	movs	r2, #3
 8000efc:	401a      	ands	r2, r3
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	409a      	lsls	r2, r3
 8000f04:	0013      	movs	r3, r2
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685a      	ldr	r2, [r3, #4]
 8000f16:	2380      	movs	r3, #128	; 0x80
 8000f18:	055b      	lsls	r3, r3, #21
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	d100      	bne.n	8000f20 <HAL_GPIO_Init+0x174>
 8000f1e:	e0a0      	b.n	8001062 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f20:	4b57      	ldr	r3, [pc, #348]	; (8001080 <HAL_GPIO_Init+0x2d4>)
 8000f22:	699a      	ldr	r2, [r3, #24]
 8000f24:	4b56      	ldr	r3, [pc, #344]	; (8001080 <HAL_GPIO_Init+0x2d4>)
 8000f26:	2101      	movs	r1, #1
 8000f28:	430a      	orrs	r2, r1
 8000f2a:	619a      	str	r2, [r3, #24]
 8000f2c:	4b54      	ldr	r3, [pc, #336]	; (8001080 <HAL_GPIO_Init+0x2d4>)
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	2201      	movs	r2, #1
 8000f32:	4013      	ands	r3, r2
 8000f34:	60bb      	str	r3, [r7, #8]
 8000f36:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f38:	4a52      	ldr	r2, [pc, #328]	; (8001084 <HAL_GPIO_Init+0x2d8>)
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	089b      	lsrs	r3, r3, #2
 8000f3e:	3302      	adds	r3, #2
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	589b      	ldr	r3, [r3, r2]
 8000f44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	2203      	movs	r2, #3
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	220f      	movs	r2, #15
 8000f50:	409a      	lsls	r2, r3
 8000f52:	0013      	movs	r3, r2
 8000f54:	43da      	mvns	r2, r3
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	2390      	movs	r3, #144	; 0x90
 8000f60:	05db      	lsls	r3, r3, #23
 8000f62:	429a      	cmp	r2, r3
 8000f64:	d019      	beq.n	8000f9a <HAL_GPIO_Init+0x1ee>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a47      	ldr	r2, [pc, #284]	; (8001088 <HAL_GPIO_Init+0x2dc>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d013      	beq.n	8000f96 <HAL_GPIO_Init+0x1ea>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a46      	ldr	r2, [pc, #280]	; (800108c <HAL_GPIO_Init+0x2e0>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d00d      	beq.n	8000f92 <HAL_GPIO_Init+0x1e6>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a45      	ldr	r2, [pc, #276]	; (8001090 <HAL_GPIO_Init+0x2e4>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d007      	beq.n	8000f8e <HAL_GPIO_Init+0x1e2>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a44      	ldr	r2, [pc, #272]	; (8001094 <HAL_GPIO_Init+0x2e8>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d101      	bne.n	8000f8a <HAL_GPIO_Init+0x1de>
 8000f86:	2304      	movs	r3, #4
 8000f88:	e008      	b.n	8000f9c <HAL_GPIO_Init+0x1f0>
 8000f8a:	2305      	movs	r3, #5
 8000f8c:	e006      	b.n	8000f9c <HAL_GPIO_Init+0x1f0>
 8000f8e:	2303      	movs	r3, #3
 8000f90:	e004      	b.n	8000f9c <HAL_GPIO_Init+0x1f0>
 8000f92:	2302      	movs	r3, #2
 8000f94:	e002      	b.n	8000f9c <HAL_GPIO_Init+0x1f0>
 8000f96:	2301      	movs	r3, #1
 8000f98:	e000      	b.n	8000f9c <HAL_GPIO_Init+0x1f0>
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	697a      	ldr	r2, [r7, #20]
 8000f9e:	2103      	movs	r1, #3
 8000fa0:	400a      	ands	r2, r1
 8000fa2:	0092      	lsls	r2, r2, #2
 8000fa4:	4093      	lsls	r3, r2
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fac:	4935      	ldr	r1, [pc, #212]	; (8001084 <HAL_GPIO_Init+0x2d8>)
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	089b      	lsrs	r3, r3, #2
 8000fb2:	3302      	adds	r3, #2
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fba:	4b37      	ldr	r3, [pc, #220]	; (8001098 <HAL_GPIO_Init+0x2ec>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	43da      	mvns	r2, r3
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685a      	ldr	r2, [r3, #4]
 8000fce:	2380      	movs	r3, #128	; 0x80
 8000fd0:	025b      	lsls	r3, r3, #9
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	d003      	beq.n	8000fde <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000fde:	4b2e      	ldr	r3, [pc, #184]	; (8001098 <HAL_GPIO_Init+0x2ec>)
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000fe4:	4b2c      	ldr	r3, [pc, #176]	; (8001098 <HAL_GPIO_Init+0x2ec>)
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	43da      	mvns	r2, r3
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685a      	ldr	r2, [r3, #4]
 8000ff8:	2380      	movs	r3, #128	; 0x80
 8000ffa:	029b      	lsls	r3, r3, #10
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	d003      	beq.n	8001008 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	4313      	orrs	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001008:	4b23      	ldr	r3, [pc, #140]	; (8001098 <HAL_GPIO_Init+0x2ec>)
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800100e:	4b22      	ldr	r3, [pc, #136]	; (8001098 <HAL_GPIO_Init+0x2ec>)
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	43da      	mvns	r2, r3
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	4013      	ands	r3, r2
 800101c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685a      	ldr	r2, [r3, #4]
 8001022:	2380      	movs	r3, #128	; 0x80
 8001024:	035b      	lsls	r3, r3, #13
 8001026:	4013      	ands	r3, r2
 8001028:	d003      	beq.n	8001032 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	4313      	orrs	r3, r2
 8001030:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001032:	4b19      	ldr	r3, [pc, #100]	; (8001098 <HAL_GPIO_Init+0x2ec>)
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001038:	4b17      	ldr	r3, [pc, #92]	; (8001098 <HAL_GPIO_Init+0x2ec>)
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	43da      	mvns	r2, r3
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	4013      	ands	r3, r2
 8001046:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685a      	ldr	r2, [r3, #4]
 800104c:	2380      	movs	r3, #128	; 0x80
 800104e:	039b      	lsls	r3, r3, #14
 8001050:	4013      	ands	r3, r2
 8001052:	d003      	beq.n	800105c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	4313      	orrs	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800105c:	4b0e      	ldr	r3, [pc, #56]	; (8001098 <HAL_GPIO_Init+0x2ec>)
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	3301      	adds	r3, #1
 8001066:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	40da      	lsrs	r2, r3
 8001070:	1e13      	subs	r3, r2, #0
 8001072:	d000      	beq.n	8001076 <HAL_GPIO_Init+0x2ca>
 8001074:	e6a2      	b.n	8000dbc <HAL_GPIO_Init+0x10>
  } 
}
 8001076:	46c0      	nop			; (mov r8, r8)
 8001078:	46c0      	nop			; (mov r8, r8)
 800107a:	46bd      	mov	sp, r7
 800107c:	b006      	add	sp, #24
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40021000 	.word	0x40021000
 8001084:	40010000 	.word	0x40010000
 8001088:	48000400 	.word	0x48000400
 800108c:	48000800 	.word	0x48000800
 8001090:	48000c00 	.word	0x48000c00
 8001094:	48001000 	.word	0x48001000
 8001098:	40010400 	.word	0x40010400

0800109c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	000a      	movs	r2, r1
 80010a6:	1cbb      	adds	r3, r7, #2
 80010a8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	691b      	ldr	r3, [r3, #16]
 80010ae:	1cba      	adds	r2, r7, #2
 80010b0:	8812      	ldrh	r2, [r2, #0]
 80010b2:	4013      	ands	r3, r2
 80010b4:	d004      	beq.n	80010c0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80010b6:	230f      	movs	r3, #15
 80010b8:	18fb      	adds	r3, r7, r3
 80010ba:	2201      	movs	r2, #1
 80010bc:	701a      	strb	r2, [r3, #0]
 80010be:	e003      	b.n	80010c8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80010c0:	230f      	movs	r3, #15
 80010c2:	18fb      	adds	r3, r7, r3
 80010c4:	2200      	movs	r2, #0
 80010c6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80010c8:	230f      	movs	r3, #15
 80010ca:	18fb      	adds	r3, r7, r3
 80010cc:	781b      	ldrb	r3, [r3, #0]
  }
 80010ce:	0018      	movs	r0, r3
 80010d0:	46bd      	mov	sp, r7
 80010d2:	b004      	add	sp, #16
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b082      	sub	sp, #8
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
 80010de:	0008      	movs	r0, r1
 80010e0:	0011      	movs	r1, r2
 80010e2:	1cbb      	adds	r3, r7, #2
 80010e4:	1c02      	adds	r2, r0, #0
 80010e6:	801a      	strh	r2, [r3, #0]
 80010e8:	1c7b      	adds	r3, r7, #1
 80010ea:	1c0a      	adds	r2, r1, #0
 80010ec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010ee:	1c7b      	adds	r3, r7, #1
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d004      	beq.n	8001100 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010f6:	1cbb      	adds	r3, r7, #2
 80010f8:	881a      	ldrh	r2, [r3, #0]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010fe:	e003      	b.n	8001108 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001100:	1cbb      	adds	r3, r7, #2
 8001102:	881a      	ldrh	r2, [r3, #0]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001108:	46c0      	nop			; (mov r8, r8)
 800110a:	46bd      	mov	sp, r7
 800110c:	b002      	add	sp, #8
 800110e:	bd80      	pop	{r7, pc}

08001110 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	000a      	movs	r2, r1
 800111a:	1cbb      	adds	r3, r7, #2
 800111c:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	695b      	ldr	r3, [r3, #20]
 8001122:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001124:	1cbb      	adds	r3, r7, #2
 8001126:	881b      	ldrh	r3, [r3, #0]
 8001128:	68fa      	ldr	r2, [r7, #12]
 800112a:	4013      	ands	r3, r2
 800112c:	041a      	lsls	r2, r3, #16
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	43db      	mvns	r3, r3
 8001132:	1cb9      	adds	r1, r7, #2
 8001134:	8809      	ldrh	r1, [r1, #0]
 8001136:	400b      	ands	r3, r1
 8001138:	431a      	orrs	r2, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	619a      	str	r2, [r3, #24]
}
 800113e:	46c0      	nop			; (mov r8, r8)
 8001140:	46bd      	mov	sp, r7
 8001142:	b004      	add	sp, #16
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	0002      	movs	r2, r0
 8001150:	1dbb      	adds	r3, r7, #6
 8001152:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001154:	4b09      	ldr	r3, [pc, #36]	; (800117c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001156:	695b      	ldr	r3, [r3, #20]
 8001158:	1dba      	adds	r2, r7, #6
 800115a:	8812      	ldrh	r2, [r2, #0]
 800115c:	4013      	ands	r3, r2
 800115e:	d008      	beq.n	8001172 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001160:	4b06      	ldr	r3, [pc, #24]	; (800117c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001162:	1dba      	adds	r2, r7, #6
 8001164:	8812      	ldrh	r2, [r2, #0]
 8001166:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001168:	1dbb      	adds	r3, r7, #6
 800116a:	881b      	ldrh	r3, [r3, #0]
 800116c:	0018      	movs	r0, r3
 800116e:	f000 f807 	bl	8001180 <HAL_GPIO_EXTI_Callback>
  }
}
 8001172:	46c0      	nop			; (mov r8, r8)
 8001174:	46bd      	mov	sp, r7
 8001176:	b002      	add	sp, #8
 8001178:	bd80      	pop	{r7, pc}
 800117a:	46c0      	nop			; (mov r8, r8)
 800117c:	40010400 	.word	0x40010400

08001180 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	0002      	movs	r2, r0
 8001188:	1dbb      	adds	r3, r7, #6
 800118a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 800118c:	46c0      	nop			; (mov r8, r8)
 800118e:	46bd      	mov	sp, r7
 8001190:	b002      	add	sp, #8
 8001192:	bd80      	pop	{r7, pc}

08001194 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	0018      	movs	r0, r3
 80011a2:	f004 ff4d 	bl	8006040 <USB_ReadInterrupts>
 80011a6:	0002      	movs	r2, r0
 80011a8:	2380      	movs	r3, #128	; 0x80
 80011aa:	021b      	lsls	r3, r3, #8
 80011ac:	401a      	ands	r2, r3
 80011ae:	2380      	movs	r3, #128	; 0x80
 80011b0:	021b      	lsls	r3, r3, #8
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d103      	bne.n	80011be <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	0018      	movs	r0, r3
 80011ba:	f000 fb51 	bl	8001860 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	0018      	movs	r0, r3
 80011c4:	f004 ff3c 	bl	8006040 <USB_ReadInterrupts>
 80011c8:	0002      	movs	r2, r0
 80011ca:	2380      	movs	r3, #128	; 0x80
 80011cc:	00db      	lsls	r3, r3, #3
 80011ce:	401a      	ands	r2, r3
 80011d0:	2380      	movs	r3, #128	; 0x80
 80011d2:	00db      	lsls	r3, r3, #3
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d114      	bne.n	8001202 <HAL_PCD_IRQHandler+0x6e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2244      	movs	r2, #68	; 0x44
 80011de:	5a9b      	ldrh	r3, [r3, r2]
 80011e0:	b29a      	uxth	r2, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	49a2      	ldr	r1, [pc, #648]	; (8001470 <HAL_PCD_IRQHandler+0x2dc>)
 80011e8:	400a      	ands	r2, r1
 80011ea:	b291      	uxth	r1, r2
 80011ec:	2244      	movs	r2, #68	; 0x44
 80011ee:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	0018      	movs	r0, r3
 80011f4:	f006 f94a 	bl	800748c <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2100      	movs	r1, #0
 80011fc:	0018      	movs	r0, r3
 80011fe:	f000 f945 	bl	800148c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	0018      	movs	r0, r3
 8001208:	f004 ff1a 	bl	8006040 <USB_ReadInterrupts>
 800120c:	0002      	movs	r2, r0
 800120e:	2380      	movs	r3, #128	; 0x80
 8001210:	01db      	lsls	r3, r3, #7
 8001212:	401a      	ands	r2, r3
 8001214:	2380      	movs	r3, #128	; 0x80
 8001216:	01db      	lsls	r3, r3, #7
 8001218:	429a      	cmp	r2, r3
 800121a:	d10b      	bne.n	8001234 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2244      	movs	r2, #68	; 0x44
 8001222:	5a9b      	ldrh	r3, [r3, r2]
 8001224:	b29a      	uxth	r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4992      	ldr	r1, [pc, #584]	; (8001474 <HAL_PCD_IRQHandler+0x2e0>)
 800122c:	400a      	ands	r2, r1
 800122e:	b291      	uxth	r1, r2
 8001230:	2244      	movs	r2, #68	; 0x44
 8001232:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	0018      	movs	r0, r3
 800123a:	f004 ff01 	bl	8006040 <USB_ReadInterrupts>
 800123e:	0002      	movs	r2, r0
 8001240:	2380      	movs	r3, #128	; 0x80
 8001242:	019b      	lsls	r3, r3, #6
 8001244:	401a      	ands	r2, r3
 8001246:	2380      	movs	r3, #128	; 0x80
 8001248:	019b      	lsls	r3, r3, #6
 800124a:	429a      	cmp	r2, r3
 800124c:	d10b      	bne.n	8001266 <HAL_PCD_IRQHandler+0xd2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2244      	movs	r2, #68	; 0x44
 8001254:	5a9b      	ldrh	r3, [r3, r2]
 8001256:	b29a      	uxth	r2, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4986      	ldr	r1, [pc, #536]	; (8001478 <HAL_PCD_IRQHandler+0x2e4>)
 800125e:	400a      	ands	r2, r1
 8001260:	b291      	uxth	r1, r2
 8001262:	2244      	movs	r2, #68	; 0x44
 8001264:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	0018      	movs	r0, r3
 800126c:	f004 fee8 	bl	8006040 <USB_ReadInterrupts>
 8001270:	0002      	movs	r2, r0
 8001272:	2380      	movs	r3, #128	; 0x80
 8001274:	015b      	lsls	r3, r3, #5
 8001276:	401a      	ands	r2, r3
 8001278:	2380      	movs	r3, #128	; 0x80
 800127a:	015b      	lsls	r3, r3, #5
 800127c:	429a      	cmp	r2, r3
 800127e:	d137      	bne.n	80012f0 <HAL_PCD_IRQHandler+0x15c>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2240      	movs	r2, #64	; 0x40
 8001286:	5a9b      	ldrh	r3, [r3, r2]
 8001288:	b29a      	uxth	r2, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2104      	movs	r1, #4
 8001290:	438a      	bics	r2, r1
 8001292:	b291      	uxth	r1, r2
 8001294:	2240      	movs	r2, #64	; 0x40
 8001296:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2240      	movs	r2, #64	; 0x40
 800129e:	5a9b      	ldrh	r3, [r3, r2]
 80012a0:	b29a      	uxth	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	2108      	movs	r1, #8
 80012a8:	438a      	bics	r2, r1
 80012aa:	b291      	uxth	r1, r2
 80012ac:	2240      	movs	r2, #64	; 0x40
 80012ae:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	23b8      	movs	r3, #184	; 0xb8
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	5cd3      	ldrb	r3, [r2, r3]
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d109      	bne.n	80012d0 <HAL_PCD_IRQHandler+0x13c>
    {
      hpcd->LPM_State = LPM_L0;
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	23b8      	movs	r3, #184	; 0xb8
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	2100      	movs	r1, #0
 80012c4:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2100      	movs	r1, #0
 80012ca:	0018      	movs	r0, r3
 80012cc:	f001 f9d2 	bl	8002674 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	0018      	movs	r0, r3
 80012d4:	f006 f91a 	bl	800750c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2244      	movs	r2, #68	; 0x44
 80012de:	5a9b      	ldrh	r3, [r3, r2]
 80012e0:	b29a      	uxth	r2, r3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4965      	ldr	r1, [pc, #404]	; (800147c <HAL_PCD_IRQHandler+0x2e8>)
 80012e8:	400a      	ands	r2, r1
 80012ea:	b291      	uxth	r1, r2
 80012ec:	2244      	movs	r2, #68	; 0x44
 80012ee:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	0018      	movs	r0, r3
 80012f6:	f004 fea3 	bl	8006040 <USB_ReadInterrupts>
 80012fa:	0002      	movs	r2, r0
 80012fc:	2380      	movs	r3, #128	; 0x80
 80012fe:	011b      	lsls	r3, r3, #4
 8001300:	401a      	ands	r2, r3
 8001302:	2380      	movs	r3, #128	; 0x80
 8001304:	011b      	lsls	r3, r3, #4
 8001306:	429a      	cmp	r2, r3
 8001308:	d127      	bne.n	800135a <HAL_PCD_IRQHandler+0x1c6>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2240      	movs	r2, #64	; 0x40
 8001310:	5a9b      	ldrh	r3, [r3, r2]
 8001312:	b29a      	uxth	r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2108      	movs	r1, #8
 800131a:	430a      	orrs	r2, r1
 800131c:	b291      	uxth	r1, r2
 800131e:	2240      	movs	r2, #64	; 0x40
 8001320:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2244      	movs	r2, #68	; 0x44
 8001328:	5a9b      	ldrh	r3, [r3, r2]
 800132a:	b29a      	uxth	r2, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4953      	ldr	r1, [pc, #332]	; (8001480 <HAL_PCD_IRQHandler+0x2ec>)
 8001332:	400a      	ands	r2, r1
 8001334:	b291      	uxth	r1, r2
 8001336:	2244      	movs	r2, #68	; 0x44
 8001338:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2240      	movs	r2, #64	; 0x40
 8001340:	5a9b      	ldrh	r3, [r3, r2]
 8001342:	b29a      	uxth	r2, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2104      	movs	r1, #4
 800134a:	430a      	orrs	r2, r1
 800134c:	b291      	uxth	r1, r2
 800134e:	2240      	movs	r2, #64	; 0x40
 8001350:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	0018      	movs	r0, r3
 8001356:	f006 f8bd 	bl	80074d4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	0018      	movs	r0, r3
 8001360:	f004 fe6e 	bl	8006040 <USB_ReadInterrupts>
 8001364:	0003      	movs	r3, r0
 8001366:	2280      	movs	r2, #128	; 0x80
 8001368:	4013      	ands	r3, r2
 800136a:	2b80      	cmp	r3, #128	; 0x80
 800136c:	d145      	bne.n	80013fa <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2244      	movs	r2, #68	; 0x44
 8001374:	5a9b      	ldrh	r3, [r3, r2]
 8001376:	b29a      	uxth	r2, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2180      	movs	r1, #128	; 0x80
 800137e:	438a      	bics	r2, r1
 8001380:	b291      	uxth	r1, r2
 8001382:	2244      	movs	r2, #68	; 0x44
 8001384:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	23b8      	movs	r3, #184	; 0xb8
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	5cd3      	ldrb	r3, [r2, r3]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d12f      	bne.n	80013f2 <HAL_PCD_IRQHandler+0x25e>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	2240      	movs	r2, #64	; 0x40
 8001398:	5a9b      	ldrh	r3, [r3, r2]
 800139a:	b29a      	uxth	r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2104      	movs	r1, #4
 80013a2:	430a      	orrs	r2, r1
 80013a4:	b291      	uxth	r1, r2
 80013a6:	2240      	movs	r2, #64	; 0x40
 80013a8:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2240      	movs	r2, #64	; 0x40
 80013b0:	5a9b      	ldrh	r3, [r3, r2]
 80013b2:	b29a      	uxth	r2, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2108      	movs	r1, #8
 80013ba:	430a      	orrs	r2, r1
 80013bc:	b291      	uxth	r1, r2
 80013be:	2240      	movs	r2, #64	; 0x40
 80013c0:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	23b8      	movs	r3, #184	; 0xb8
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	2101      	movs	r1, #1
 80013ca:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2254      	movs	r2, #84	; 0x54
 80013d2:	5a9b      	ldrh	r3, [r3, r2]
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	089b      	lsrs	r3, r3, #2
 80013d8:	223c      	movs	r2, #60	; 0x3c
 80013da:	4013      	ands	r3, r2
 80013dc:	0019      	movs	r1, r3
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	23b9      	movs	r3, #185	; 0xb9
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2101      	movs	r1, #1
 80013ea:	0018      	movs	r0, r3
 80013ec:	f001 f942 	bl	8002674 <HAL_PCDEx_LPM_Callback>
 80013f0:	e003      	b.n	80013fa <HAL_PCD_IRQHandler+0x266>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	0018      	movs	r0, r3
 80013f6:	f006 f86d 	bl	80074d4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	0018      	movs	r0, r3
 8001400:	f004 fe1e 	bl	8006040 <USB_ReadInterrupts>
 8001404:	0002      	movs	r2, r0
 8001406:	2380      	movs	r3, #128	; 0x80
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	401a      	ands	r2, r3
 800140c:	2380      	movs	r3, #128	; 0x80
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	429a      	cmp	r2, r3
 8001412:	d10f      	bne.n	8001434 <HAL_PCD_IRQHandler+0x2a0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2244      	movs	r2, #68	; 0x44
 800141a:	5a9b      	ldrh	r3, [r3, r2]
 800141c:	b29a      	uxth	r2, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4918      	ldr	r1, [pc, #96]	; (8001484 <HAL_PCD_IRQHandler+0x2f0>)
 8001424:	400a      	ands	r2, r1
 8001426:	b291      	uxth	r1, r2
 8001428:	2244      	movs	r2, #68	; 0x44
 800142a:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	0018      	movs	r0, r3
 8001430:	f006 f81d 	bl	800746e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	0018      	movs	r0, r3
 800143a:	f004 fe01 	bl	8006040 <USB_ReadInterrupts>
 800143e:	0002      	movs	r2, r0
 8001440:	2380      	movs	r3, #128	; 0x80
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	401a      	ands	r2, r3
 8001446:	2380      	movs	r3, #128	; 0x80
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	429a      	cmp	r2, r3
 800144c:	d10b      	bne.n	8001466 <HAL_PCD_IRQHandler+0x2d2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2244      	movs	r2, #68	; 0x44
 8001454:	5a9b      	ldrh	r3, [r3, r2]
 8001456:	b29a      	uxth	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	490a      	ldr	r1, [pc, #40]	; (8001488 <HAL_PCD_IRQHandler+0x2f4>)
 800145e:	400a      	ands	r2, r1
 8001460:	b291      	uxth	r1, r2
 8001462:	2244      	movs	r2, #68	; 0x44
 8001464:	5299      	strh	r1, [r3, r2]
  }
}
 8001466:	46c0      	nop			; (mov r8, r8)
 8001468:	46bd      	mov	sp, r7
 800146a:	b002      	add	sp, #8
 800146c:	bd80      	pop	{r7, pc}
 800146e:	46c0      	nop			; (mov r8, r8)
 8001470:	fffffbff 	.word	0xfffffbff
 8001474:	ffffbfff 	.word	0xffffbfff
 8001478:	ffffdfff 	.word	0xffffdfff
 800147c:	ffffefff 	.word	0xffffefff
 8001480:	fffff7ff 	.word	0xfffff7ff
 8001484:	fffffdff 	.word	0xfffffdff
 8001488:	fffffeff 	.word	0xfffffeff

0800148c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	000a      	movs	r2, r1
 8001496:	1cfb      	adds	r3, r7, #3
 8001498:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	23aa      	movs	r3, #170	; 0xaa
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	5cd3      	ldrb	r3, [r2, r3]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d101      	bne.n	80014aa <HAL_PCD_SetAddress+0x1e>
 80014a6:	2302      	movs	r3, #2
 80014a8:	e017      	b.n	80014da <HAL_PCD_SetAddress+0x4e>
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	23aa      	movs	r3, #170	; 0xaa
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	2101      	movs	r1, #1
 80014b2:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	1cfa      	adds	r2, r7, #3
 80014b8:	2124      	movs	r1, #36	; 0x24
 80014ba:	7812      	ldrb	r2, [r2, #0]
 80014bc:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	1cfb      	adds	r3, r7, #3
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	0019      	movs	r1, r3
 80014c8:	0010      	movs	r0, r2
 80014ca:	f004 fda5 	bl	8006018 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	23aa      	movs	r3, #170	; 0xaa
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	2100      	movs	r1, #0
 80014d6:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80014d8:	2300      	movs	r3, #0
}
 80014da:	0018      	movs	r0, r3
 80014dc:	46bd      	mov	sp, r7
 80014de:	b002      	add	sp, #8
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80014e2:	b590      	push	{r4, r7, lr}
 80014e4:	b085      	sub	sp, #20
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
 80014ea:	000c      	movs	r4, r1
 80014ec:	0010      	movs	r0, r2
 80014ee:	0019      	movs	r1, r3
 80014f0:	1cfb      	adds	r3, r7, #3
 80014f2:	1c22      	adds	r2, r4, #0
 80014f4:	701a      	strb	r2, [r3, #0]
 80014f6:	003b      	movs	r3, r7
 80014f8:	1c02      	adds	r2, r0, #0
 80014fa:	801a      	strh	r2, [r3, #0]
 80014fc:	1cbb      	adds	r3, r7, #2
 80014fe:	1c0a      	adds	r2, r1, #0
 8001500:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001502:	230b      	movs	r3, #11
 8001504:	18fb      	adds	r3, r7, r3
 8001506:	2200      	movs	r2, #0
 8001508:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800150a:	1cfb      	adds	r3, r7, #3
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	b25b      	sxtb	r3, r3
 8001510:	2b00      	cmp	r3, #0
 8001512:	da0f      	bge.n	8001534 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001514:	1cfb      	adds	r3, r7, #3
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	2207      	movs	r2, #7
 800151a:	4013      	ands	r3, r2
 800151c:	1c5a      	adds	r2, r3, #1
 800151e:	0013      	movs	r3, r2
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	189b      	adds	r3, r3, r2
 8001524:	00db      	lsls	r3, r3, #3
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	18d3      	adds	r3, r2, r3
 800152a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	2201      	movs	r2, #1
 8001530:	705a      	strb	r2, [r3, #1]
 8001532:	e00f      	b.n	8001554 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001534:	1cfb      	adds	r3, r7, #3
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	2207      	movs	r2, #7
 800153a:	401a      	ands	r2, r3
 800153c:	0013      	movs	r3, r2
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	189b      	adds	r3, r3, r2
 8001542:	00db      	lsls	r3, r3, #3
 8001544:	3369      	adds	r3, #105	; 0x69
 8001546:	33ff      	adds	r3, #255	; 0xff
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	18d3      	adds	r3, r2, r3
 800154c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	2200      	movs	r2, #0
 8001552:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001554:	1cfb      	adds	r3, r7, #3
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2207      	movs	r2, #7
 800155a:	4013      	ands	r3, r2
 800155c:	b2da      	uxtb	r2, r3
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001562:	003b      	movs	r3, r7
 8001564:	881a      	ldrh	r2, [r3, #0]
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	1cba      	adds	r2, r7, #2
 800156e:	7812      	ldrb	r2, [r2, #0]
 8001570:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	785b      	ldrb	r3, [r3, #1]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d004      	beq.n	8001584 <HAL_PCD_EP_Open+0xa2>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	b29a      	uxth	r2, r3
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001584:	1cbb      	adds	r3, r7, #2
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	2b02      	cmp	r3, #2
 800158a:	d102      	bne.n	8001592 <HAL_PCD_EP_Open+0xb0>
  {
    ep->data_pid_start = 0U;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	2200      	movs	r2, #0
 8001590:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	23aa      	movs	r3, #170	; 0xaa
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	5cd3      	ldrb	r3, [r2, r3]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d101      	bne.n	80015a2 <HAL_PCD_EP_Open+0xc0>
 800159e:	2302      	movs	r3, #2
 80015a0:	e013      	b.n	80015ca <HAL_PCD_EP_Open+0xe8>
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	23aa      	movs	r3, #170	; 0xaa
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	2101      	movs	r1, #1
 80015aa:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	68fa      	ldr	r2, [r7, #12]
 80015b2:	0011      	movs	r1, r2
 80015b4:	0018      	movs	r0, r3
 80015b6:	f002 ffb5 	bl	8004524 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	23aa      	movs	r3, #170	; 0xaa
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	2100      	movs	r1, #0
 80015c2:	54d1      	strb	r1, [r2, r3]

  return ret;
 80015c4:	230b      	movs	r3, #11
 80015c6:	18fb      	adds	r3, r7, r3
 80015c8:	781b      	ldrb	r3, [r3, #0]
}
 80015ca:	0018      	movs	r0, r3
 80015cc:	46bd      	mov	sp, r7
 80015ce:	b005      	add	sp, #20
 80015d0:	bd90      	pop	{r4, r7, pc}

080015d2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b086      	sub	sp, #24
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	60f8      	str	r0, [r7, #12]
 80015da:	607a      	str	r2, [r7, #4]
 80015dc:	603b      	str	r3, [r7, #0]
 80015de:	200b      	movs	r0, #11
 80015e0:	183b      	adds	r3, r7, r0
 80015e2:	1c0a      	adds	r2, r1, #0
 80015e4:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80015e6:	0001      	movs	r1, r0
 80015e8:	187b      	adds	r3, r7, r1
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	2207      	movs	r2, #7
 80015ee:	401a      	ands	r2, r3
 80015f0:	0013      	movs	r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	189b      	adds	r3, r3, r2
 80015f6:	00db      	lsls	r3, r3, #3
 80015f8:	3369      	adds	r3, #105	; 0x69
 80015fa:	33ff      	adds	r3, #255	; 0xff
 80015fc:	68fa      	ldr	r2, [r7, #12]
 80015fe:	18d3      	adds	r3, r2, r3
 8001600:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	683a      	ldr	r2, [r7, #0]
 800160c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	2200      	movs	r2, #0
 8001612:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	2200      	movs	r2, #0
 8001618:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800161a:	187b      	adds	r3, r7, r1
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	2207      	movs	r2, #7
 8001620:	4013      	ands	r3, r2
 8001622:	b2da      	uxtb	r2, r3
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001628:	187b      	adds	r3, r7, r1
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2207      	movs	r2, #7
 800162e:	4013      	ands	r3, r2
 8001630:	d107      	bne.n	8001642 <HAL_PCD_EP_Receive+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	697a      	ldr	r2, [r7, #20]
 8001638:	0011      	movs	r1, r2
 800163a:	0018      	movs	r0, r3
 800163c:	f003 fac8 	bl	8004bd0 <USB_EPStartXfer>
 8001640:	e006      	b.n	8001650 <HAL_PCD_EP_Receive+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	697a      	ldr	r2, [r7, #20]
 8001648:	0011      	movs	r1, r2
 800164a:	0018      	movs	r0, r3
 800164c:	f003 fac0 	bl	8004bd0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001650:	2300      	movs	r3, #0
}
 8001652:	0018      	movs	r0, r3
 8001654:	46bd      	mov	sp, r7
 8001656:	b006      	add	sp, #24
 8001658:	bd80      	pop	{r7, pc}

0800165a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b086      	sub	sp, #24
 800165e:	af00      	add	r7, sp, #0
 8001660:	60f8      	str	r0, [r7, #12]
 8001662:	607a      	str	r2, [r7, #4]
 8001664:	603b      	str	r3, [r7, #0]
 8001666:	200b      	movs	r0, #11
 8001668:	183b      	adds	r3, r7, r0
 800166a:	1c0a      	adds	r2, r1, #0
 800166c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800166e:	183b      	adds	r3, r7, r0
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	2207      	movs	r2, #7
 8001674:	4013      	ands	r3, r2
 8001676:	1c5a      	adds	r2, r3, #1
 8001678:	0013      	movs	r3, r2
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	189b      	adds	r3, r3, r2
 800167e:	00db      	lsls	r3, r3, #3
 8001680:	68fa      	ldr	r2, [r7, #12]
 8001682:	18d3      	adds	r3, r2, r3
 8001684:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	683a      	ldr	r2, [r7, #0]
 8001690:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	2224      	movs	r2, #36	; 0x24
 8001696:	2101      	movs	r1, #1
 8001698:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	683a      	ldr	r2, [r7, #0]
 800169e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	2200      	movs	r2, #0
 80016a4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	2201      	movs	r2, #1
 80016aa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80016ac:	183b      	adds	r3, r7, r0
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	2207      	movs	r2, #7
 80016b2:	4013      	ands	r3, r2
 80016b4:	b2da      	uxtb	r2, r3
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80016ba:	183b      	adds	r3, r7, r0
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	2207      	movs	r2, #7
 80016c0:	4013      	ands	r3, r2
 80016c2:	d107      	bne.n	80016d4 <HAL_PCD_EP_Transmit+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	697a      	ldr	r2, [r7, #20]
 80016ca:	0011      	movs	r1, r2
 80016cc:	0018      	movs	r0, r3
 80016ce:	f003 fa7f 	bl	8004bd0 <USB_EPStartXfer>
 80016d2:	e006      	b.n	80016e2 <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	697a      	ldr	r2, [r7, #20]
 80016da:	0011      	movs	r1, r2
 80016dc:	0018      	movs	r0, r3
 80016de:	f003 fa77 	bl	8004bd0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80016e2:	2300      	movs	r3, #0
}
 80016e4:	0018      	movs	r0, r3
 80016e6:	46bd      	mov	sp, r7
 80016e8:	b006      	add	sp, #24
 80016ea:	bd80      	pop	{r7, pc}

080016ec <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	000a      	movs	r2, r1
 80016f6:	1cfb      	adds	r3, r7, #3
 80016f8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80016fa:	1cfb      	adds	r3, r7, #3
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	2207      	movs	r2, #7
 8001700:	401a      	ands	r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	429a      	cmp	r2, r3
 8001708:	d901      	bls.n	800170e <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e046      	b.n	800179c <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800170e:	1cfb      	adds	r3, r7, #3
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	b25b      	sxtb	r3, r3
 8001714:	2b00      	cmp	r3, #0
 8001716:	da0f      	bge.n	8001738 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001718:	1cfb      	adds	r3, r7, #3
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2207      	movs	r2, #7
 800171e:	4013      	ands	r3, r2
 8001720:	1c5a      	adds	r2, r3, #1
 8001722:	0013      	movs	r3, r2
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	189b      	adds	r3, r3, r2
 8001728:	00db      	lsls	r3, r3, #3
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	18d3      	adds	r3, r2, r3
 800172e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2201      	movs	r2, #1
 8001734:	705a      	strb	r2, [r3, #1]
 8001736:	e00d      	b.n	8001754 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001738:	1cfb      	adds	r3, r7, #3
 800173a:	781a      	ldrb	r2, [r3, #0]
 800173c:	0013      	movs	r3, r2
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	189b      	adds	r3, r3, r2
 8001742:	00db      	lsls	r3, r3, #3
 8001744:	3369      	adds	r3, #105	; 0x69
 8001746:	33ff      	adds	r3, #255	; 0xff
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	18d3      	adds	r3, r2, r3
 800174c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	2200      	movs	r2, #0
 8001752:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2201      	movs	r2, #1
 8001758:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800175a:	1cfb      	adds	r3, r7, #3
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	2207      	movs	r2, #7
 8001760:	4013      	ands	r3, r2
 8001762:	b2da      	uxtb	r2, r3
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	23aa      	movs	r3, #170	; 0xaa
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	5cd3      	ldrb	r3, [r2, r3]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d101      	bne.n	8001778 <HAL_PCD_EP_SetStall+0x8c>
 8001774:	2302      	movs	r3, #2
 8001776:	e011      	b.n	800179c <HAL_PCD_EP_SetStall+0xb0>
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	23aa      	movs	r3, #170	; 0xaa
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	2101      	movs	r1, #1
 8001780:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	68fa      	ldr	r2, [r7, #12]
 8001788:	0011      	movs	r1, r2
 800178a:	0018      	movs	r0, r3
 800178c:	f004 fb42 	bl	8005e14 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	23aa      	movs	r3, #170	; 0xaa
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	2100      	movs	r1, #0
 8001798:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800179a:	2300      	movs	r3, #0
}
 800179c:	0018      	movs	r0, r3
 800179e:	46bd      	mov	sp, r7
 80017a0:	b004      	add	sp, #16
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	000a      	movs	r2, r1
 80017ae:	1cfb      	adds	r3, r7, #3
 80017b0:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80017b2:	1cfb      	adds	r3, r7, #3
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	220f      	movs	r2, #15
 80017b8:	401a      	ands	r2, r3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	429a      	cmp	r2, r3
 80017c0:	d901      	bls.n	80017c6 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e048      	b.n	8001858 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80017c6:	1cfb      	adds	r3, r7, #3
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	b25b      	sxtb	r3, r3
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	da0f      	bge.n	80017f0 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017d0:	1cfb      	adds	r3, r7, #3
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	2207      	movs	r2, #7
 80017d6:	4013      	ands	r3, r2
 80017d8:	1c5a      	adds	r2, r3, #1
 80017da:	0013      	movs	r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	189b      	adds	r3, r3, r2
 80017e0:	00db      	lsls	r3, r3, #3
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	18d3      	adds	r3, r2, r3
 80017e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	2201      	movs	r2, #1
 80017ec:	705a      	strb	r2, [r3, #1]
 80017ee:	e00f      	b.n	8001810 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017f0:	1cfb      	adds	r3, r7, #3
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	2207      	movs	r2, #7
 80017f6:	401a      	ands	r2, r3
 80017f8:	0013      	movs	r3, r2
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	189b      	adds	r3, r3, r2
 80017fe:	00db      	lsls	r3, r3, #3
 8001800:	3369      	adds	r3, #105	; 0x69
 8001802:	33ff      	adds	r3, #255	; 0xff
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	18d3      	adds	r3, r2, r3
 8001808:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	2200      	movs	r2, #0
 800180e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2200      	movs	r2, #0
 8001814:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001816:	1cfb      	adds	r3, r7, #3
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	2207      	movs	r2, #7
 800181c:	4013      	ands	r3, r2
 800181e:	b2da      	uxtb	r2, r3
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	23aa      	movs	r3, #170	; 0xaa
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	5cd3      	ldrb	r3, [r2, r3]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d101      	bne.n	8001834 <HAL_PCD_EP_ClrStall+0x90>
 8001830:	2302      	movs	r3, #2
 8001832:	e011      	b.n	8001858 <HAL_PCD_EP_ClrStall+0xb4>
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	23aa      	movs	r3, #170	; 0xaa
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	2101      	movs	r1, #1
 800183c:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	68fa      	ldr	r2, [r7, #12]
 8001844:	0011      	movs	r1, r2
 8001846:	0018      	movs	r0, r3
 8001848:	f004 fb34 	bl	8005eb4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	23aa      	movs	r3, #170	; 0xaa
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	2100      	movs	r1, #0
 8001854:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001856:	2300      	movs	r3, #0
}
 8001858:	0018      	movs	r0, r3
 800185a:	46bd      	mov	sp, r7
 800185c:	b004      	add	sp, #16
 800185e:	bd80      	pop	{r7, pc}

08001860 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001860:	b5b0      	push	{r4, r5, r7, lr}
 8001862:	b08e      	sub	sp, #56	; 0x38
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001868:	e31c      	b.n	8001ea4 <PCD_EP_ISR_Handler+0x644>
  {
    wIstr = hpcd->Instance->ISTR;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	202e      	movs	r0, #46	; 0x2e
 8001870:	183b      	adds	r3, r7, r0
 8001872:	2144      	movs	r1, #68	; 0x44
 8001874:	5a52      	ldrh	r2, [r2, r1]
 8001876:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001878:	183b      	adds	r3, r7, r0
 800187a:	881b      	ldrh	r3, [r3, #0]
 800187c:	b2da      	uxtb	r2, r3
 800187e:	242d      	movs	r4, #45	; 0x2d
 8001880:	193b      	adds	r3, r7, r4
 8001882:	210f      	movs	r1, #15
 8001884:	400a      	ands	r2, r1
 8001886:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8001888:	193b      	adds	r3, r7, r4
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d000      	beq.n	8001892 <PCD_EP_ISR_Handler+0x32>
 8001890:	e15d      	b.n	8001b4e <PCD_EP_ISR_Handler+0x2ee>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001892:	183b      	adds	r3, r7, r0
 8001894:	881b      	ldrh	r3, [r3, #0]
 8001896:	2210      	movs	r2, #16
 8001898:	4013      	ands	r3, r2
 800189a:	d152      	bne.n	8001942 <PCD_EP_ISR_Handler+0xe2>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	881b      	ldrh	r3, [r3, #0]
 80018a2:	b29a      	uxth	r2, r3
 80018a4:	200e      	movs	r0, #14
 80018a6:	183b      	adds	r3, r7, r0
 80018a8:	49da      	ldr	r1, [pc, #872]	; (8001c14 <PCD_EP_ISR_Handler+0x3b4>)
 80018aa:	400a      	ands	r2, r1
 80018ac:	801a      	strh	r2, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	183a      	adds	r2, r7, r0
 80018b4:	8812      	ldrh	r2, [r2, #0]
 80018b6:	49d8      	ldr	r1, [pc, #864]	; (8001c18 <PCD_EP_ISR_Handler+0x3b8>)
 80018b8:	430a      	orrs	r2, r1
 80018ba:	b292      	uxth	r2, r2
 80018bc:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	3328      	adds	r3, #40	; 0x28
 80018c2:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2250      	movs	r2, #80	; 0x50
 80018ca:	5a9b      	ldrh	r3, [r3, r2]
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	001a      	movs	r2, r3
 80018d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	00db      	lsls	r3, r3, #3
 80018d6:	18d2      	adds	r2, r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	18d3      	adds	r3, r2, r3
 80018de:	4acf      	ldr	r2, [pc, #828]	; (8001c1c <PCD_EP_ISR_Handler+0x3bc>)
 80018e0:	4694      	mov	ip, r2
 80018e2:	4463      	add	r3, ip
 80018e4:	881b      	ldrh	r3, [r3, #0]
 80018e6:	059b      	lsls	r3, r3, #22
 80018e8:	0d9a      	lsrs	r2, r3, #22
 80018ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ec:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80018ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f0:	695a      	ldr	r2, [r3, #20]
 80018f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f4:	69db      	ldr	r3, [r3, #28]
 80018f6:	18d2      	adds	r2, r2, r3
 80018f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fa:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2100      	movs	r1, #0
 8001900:	0018      	movs	r0, r3
 8001902:	f005 fd96 	bl	8007432 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2224      	movs	r2, #36	; 0x24
 800190a:	5c9b      	ldrb	r3, [r3, r2]
 800190c:	b2db      	uxtb	r3, r3
 800190e:	2b00      	cmp	r3, #0
 8001910:	d100      	bne.n	8001914 <PCD_EP_ISR_Handler+0xb4>
 8001912:	e2c7      	b.n	8001ea4 <PCD_EP_ISR_Handler+0x644>
 8001914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d000      	beq.n	800191e <PCD_EP_ISR_Handler+0xbe>
 800191c:	e2c2      	b.n	8001ea4 <PCD_EP_ISR_Handler+0x644>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2224      	movs	r2, #36	; 0x24
 8001922:	5c9b      	ldrb	r3, [r3, r2]
 8001924:	b2db      	uxtb	r3, r3
 8001926:	2280      	movs	r2, #128	; 0x80
 8001928:	4252      	negs	r2, r2
 800192a:	4313      	orrs	r3, r2
 800192c:	b2da      	uxtb	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	b291      	uxth	r1, r2
 8001934:	224c      	movs	r2, #76	; 0x4c
 8001936:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2224      	movs	r2, #36	; 0x24
 800193c:	2100      	movs	r1, #0
 800193e:	5499      	strb	r1, [r3, r2]
 8001940:	e2b0      	b.n	8001ea4 <PCD_EP_ISR_Handler+0x644>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	3369      	adds	r3, #105	; 0x69
 8001946:	33ff      	adds	r3, #255	; 0xff
 8001948:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	212a      	movs	r1, #42	; 0x2a
 8001950:	187b      	adds	r3, r7, r1
 8001952:	8812      	ldrh	r2, [r2, #0]
 8001954:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001956:	187b      	adds	r3, r7, r1
 8001958:	881a      	ldrh	r2, [r3, #0]
 800195a:	2380      	movs	r3, #128	; 0x80
 800195c:	011b      	lsls	r3, r3, #4
 800195e:	4013      	ands	r3, r2
 8001960:	d037      	beq.n	80019d2 <PCD_EP_ISR_Handler+0x172>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2250      	movs	r2, #80	; 0x50
 8001968:	5a9b      	ldrh	r3, [r3, r2]
 800196a:	b29b      	uxth	r3, r3
 800196c:	001a      	movs	r2, r3
 800196e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	00db      	lsls	r3, r3, #3
 8001974:	18d2      	adds	r2, r2, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	18d3      	adds	r3, r2, r3
 800197c:	4aa8      	ldr	r2, [pc, #672]	; (8001c20 <PCD_EP_ISR_Handler+0x3c0>)
 800197e:	4694      	mov	ip, r2
 8001980:	4463      	add	r3, ip
 8001982:	881b      	ldrh	r3, [r3, #0]
 8001984:	059b      	lsls	r3, r3, #22
 8001986:	0d9a      	lsrs	r2, r3, #22
 8001988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6818      	ldr	r0, [r3, #0]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	22ac      	movs	r2, #172	; 0xac
 8001994:	0092      	lsls	r2, r2, #2
 8001996:	1899      	adds	r1, r3, r2
 8001998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800199c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	f004 fb9f 	bl	80060e4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	881b      	ldrh	r3, [r3, #0]
 80019ac:	b29a      	uxth	r2, r3
 80019ae:	2010      	movs	r0, #16
 80019b0:	183b      	adds	r3, r7, r0
 80019b2:	499c      	ldr	r1, [pc, #624]	; (8001c24 <PCD_EP_ISR_Handler+0x3c4>)
 80019b4:	400a      	ands	r2, r1
 80019b6:	801a      	strh	r2, [r3, #0]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	183a      	adds	r2, r7, r0
 80019be:	8812      	ldrh	r2, [r2, #0]
 80019c0:	2180      	movs	r1, #128	; 0x80
 80019c2:	430a      	orrs	r2, r1
 80019c4:	b292      	uxth	r2, r2
 80019c6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	0018      	movs	r0, r3
 80019cc:	f005 fcfb 	bl	80073c6 <HAL_PCD_SetupStageCallback>
 80019d0:	e268      	b.n	8001ea4 <PCD_EP_ISR_Handler+0x644>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80019d2:	232a      	movs	r3, #42	; 0x2a
 80019d4:	18fb      	adds	r3, r7, r3
 80019d6:	2200      	movs	r2, #0
 80019d8:	5e9b      	ldrsh	r3, [r3, r2]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	db00      	blt.n	80019e0 <PCD_EP_ISR_Handler+0x180>
 80019de:	e261      	b.n	8001ea4 <PCD_EP_ISR_Handler+0x644>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	881b      	ldrh	r3, [r3, #0]
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	201c      	movs	r0, #28
 80019ea:	183b      	adds	r3, r7, r0
 80019ec:	498d      	ldr	r1, [pc, #564]	; (8001c24 <PCD_EP_ISR_Handler+0x3c4>)
 80019ee:	400a      	ands	r2, r1
 80019f0:	801a      	strh	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	183a      	adds	r2, r7, r0
 80019f8:	8812      	ldrh	r2, [r2, #0]
 80019fa:	2180      	movs	r1, #128	; 0x80
 80019fc:	430a      	orrs	r2, r1
 80019fe:	b292      	uxth	r2, r2
 8001a00:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2250      	movs	r2, #80	; 0x50
 8001a08:	5a9b      	ldrh	r3, [r3, r2]
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	001a      	movs	r2, r3
 8001a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	00db      	lsls	r3, r3, #3
 8001a14:	18d2      	adds	r2, r2, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	18d3      	adds	r3, r2, r3
 8001a1c:	4a80      	ldr	r2, [pc, #512]	; (8001c20 <PCD_EP_ISR_Handler+0x3c0>)
 8001a1e:	4694      	mov	ip, r2
 8001a20:	4463      	add	r3, ip
 8001a22:	881b      	ldrh	r3, [r3, #0]
 8001a24:	059b      	lsls	r3, r3, #22
 8001a26:	0d9a      	lsrs	r2, r3, #22
 8001a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2e:	69db      	ldr	r3, [r3, #28]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d01a      	beq.n	8001a6a <PCD_EP_ISR_Handler+0x20a>
 8001a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a36:	695b      	ldr	r3, [r3, #20]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d016      	beq.n	8001a6a <PCD_EP_ISR_Handler+0x20a>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6818      	ldr	r0, [r3, #0]
 8001a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a42:	6959      	ldr	r1, [r3, #20]
 8001a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a46:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	f004 fb49 	bl	80060e4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a54:	695a      	ldr	r2, [r3, #20]
 8001a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a58:	69db      	ldr	r3, [r3, #28]
 8001a5a:	18d2      	adds	r2, r2, r3
 8001a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2100      	movs	r1, #0
 8001a64:	0018      	movs	r0, r3
 8001a66:	f005 fcc3 	bl	80073f0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	61bb      	str	r3, [r7, #24]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2250      	movs	r2, #80	; 0x50
 8001a76:	5a9b      	ldrh	r3, [r3, r2]
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	001a      	movs	r2, r3
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	189b      	adds	r3, r3, r2
 8001a80:	61bb      	str	r3, [r7, #24]
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	4a66      	ldr	r2, [pc, #408]	; (8001c20 <PCD_EP_ISR_Handler+0x3c0>)
 8001a86:	4694      	mov	ip, r2
 8001a88:	4463      	add	r3, ip
 8001a8a:	617b      	str	r3, [r7, #20]
 8001a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8e:	691b      	ldr	r3, [r3, #16]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d110      	bne.n	8001ab6 <PCD_EP_ISR_Handler+0x256>
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	881b      	ldrh	r3, [r3, #0]
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	4a63      	ldr	r2, [pc, #396]	; (8001c28 <PCD_EP_ISR_Handler+0x3c8>)
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	b29a      	uxth	r2, r3
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	801a      	strh	r2, [r3, #0]
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	881b      	ldrh	r3, [r3, #0]
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	4a5b      	ldr	r2, [pc, #364]	; (8001c18 <PCD_EP_ISR_Handler+0x3b8>)
 8001aac:	4313      	orrs	r3, r2
 8001aae:	b29a      	uxth	r2, r3
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	801a      	strh	r2, [r3, #0]
 8001ab4:	e02b      	b.n	8001b0e <PCD_EP_ISR_Handler+0x2ae>
 8001ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab8:	691b      	ldr	r3, [r3, #16]
 8001aba:	2b3e      	cmp	r3, #62	; 0x3e
 8001abc:	d812      	bhi.n	8001ae4 <PCD_EP_ISR_Handler+0x284>
 8001abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	085b      	lsrs	r3, r3, #1
 8001ac4:	633b      	str	r3, [r7, #48]	; 0x30
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	2201      	movs	r2, #1
 8001acc:	4013      	ands	r3, r2
 8001ace:	d002      	beq.n	8001ad6 <PCD_EP_ISR_Handler+0x276>
 8001ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	633b      	str	r3, [r7, #48]	; 0x30
 8001ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	029b      	lsls	r3, r3, #10
 8001adc:	b29a      	uxth	r2, r3
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	801a      	strh	r2, [r3, #0]
 8001ae2:	e014      	b.n	8001b0e <PCD_EP_ISR_Handler+0x2ae>
 8001ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae6:	691b      	ldr	r3, [r3, #16]
 8001ae8:	095b      	lsrs	r3, r3, #5
 8001aea:	633b      	str	r3, [r7, #48]	; 0x30
 8001aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aee:	691b      	ldr	r3, [r3, #16]
 8001af0:	221f      	movs	r2, #31
 8001af2:	4013      	ands	r3, r2
 8001af4:	d102      	bne.n	8001afc <PCD_EP_ISR_Handler+0x29c>
 8001af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001af8:	3b01      	subs	r3, #1
 8001afa:	633b      	str	r3, [r7, #48]	; 0x30
 8001afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	029b      	lsls	r3, r3, #10
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	4a44      	ldr	r2, [pc, #272]	; (8001c18 <PCD_EP_ISR_Handler+0x3b8>)
 8001b06:	4313      	orrs	r3, r2
 8001b08:	b29a      	uxth	r2, r3
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	881b      	ldrh	r3, [r3, #0]
 8001b14:	b29a      	uxth	r2, r3
 8001b16:	2012      	movs	r0, #18
 8001b18:	183b      	adds	r3, r7, r0
 8001b1a:	4944      	ldr	r1, [pc, #272]	; (8001c2c <PCD_EP_ISR_Handler+0x3cc>)
 8001b1c:	400a      	ands	r2, r1
 8001b1e:	801a      	strh	r2, [r3, #0]
 8001b20:	183b      	adds	r3, r7, r0
 8001b22:	183a      	adds	r2, r7, r0
 8001b24:	8812      	ldrh	r2, [r2, #0]
 8001b26:	2180      	movs	r1, #128	; 0x80
 8001b28:	0149      	lsls	r1, r1, #5
 8001b2a:	404a      	eors	r2, r1
 8001b2c:	801a      	strh	r2, [r3, #0]
 8001b2e:	183b      	adds	r3, r7, r0
 8001b30:	183a      	adds	r2, r7, r0
 8001b32:	8812      	ldrh	r2, [r2, #0]
 8001b34:	2180      	movs	r1, #128	; 0x80
 8001b36:	0189      	lsls	r1, r1, #6
 8001b38:	404a      	eors	r2, r1
 8001b3a:	801a      	strh	r2, [r3, #0]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	183a      	adds	r2, r7, r0
 8001b42:	8812      	ldrh	r2, [r2, #0]
 8001b44:	493a      	ldr	r1, [pc, #232]	; (8001c30 <PCD_EP_ISR_Handler+0x3d0>)
 8001b46:	430a      	orrs	r2, r1
 8001b48:	b292      	uxth	r2, r2
 8001b4a:	801a      	strh	r2, [r3, #0]
 8001b4c:	e1aa      	b.n	8001ea4 <PCD_EP_ISR_Handler+0x644>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	001a      	movs	r2, r3
 8001b54:	202d      	movs	r0, #45	; 0x2d
 8001b56:	183b      	adds	r3, r7, r0
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	18d2      	adds	r2, r2, r3
 8001b5e:	212a      	movs	r1, #42	; 0x2a
 8001b60:	187b      	adds	r3, r7, r1
 8001b62:	8812      	ldrh	r2, [r2, #0]
 8001b64:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001b66:	187b      	adds	r3, r7, r1
 8001b68:	2200      	movs	r2, #0
 8001b6a:	5e9b      	ldrsh	r3, [r3, r2]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	db00      	blt.n	8001b72 <PCD_EP_ISR_Handler+0x312>
 8001b70:	e10b      	b.n	8001d8a <PCD_EP_ISR_Handler+0x52a>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	001a      	movs	r2, r3
 8001b78:	183b      	adds	r3, r7, r0
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	18d3      	adds	r3, r2, r3
 8001b80:	881b      	ldrh	r3, [r3, #0]
 8001b82:	b29a      	uxth	r2, r3
 8001b84:	2428      	movs	r4, #40	; 0x28
 8001b86:	193b      	adds	r3, r7, r4
 8001b88:	4926      	ldr	r1, [pc, #152]	; (8001c24 <PCD_EP_ISR_Handler+0x3c4>)
 8001b8a:	400a      	ands	r2, r1
 8001b8c:	801a      	strh	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	001a      	movs	r2, r3
 8001b94:	183b      	adds	r3, r7, r0
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	18d3      	adds	r3, r2, r3
 8001b9c:	193a      	adds	r2, r7, r4
 8001b9e:	8812      	ldrh	r2, [r2, #0]
 8001ba0:	2180      	movs	r1, #128	; 0x80
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	b292      	uxth	r2, r2
 8001ba6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001ba8:	183b      	adds	r3, r7, r0
 8001baa:	781a      	ldrb	r2, [r3, #0]
 8001bac:	0013      	movs	r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	189b      	adds	r3, r3, r2
 8001bb2:	00db      	lsls	r3, r3, #3
 8001bb4:	3369      	adds	r3, #105	; 0x69
 8001bb6:	33ff      	adds	r3, #255	; 0xff
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	18d3      	adds	r3, r2, r3
 8001bbc:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc0:	7b1b      	ldrb	r3, [r3, #12]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d136      	bne.n	8001c34 <PCD_EP_ISR_Handler+0x3d4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2250      	movs	r2, #80	; 0x50
 8001bcc:	5a9b      	ldrh	r3, [r3, r2]
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	001a      	movs	r2, r3
 8001bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	00db      	lsls	r3, r3, #3
 8001bd8:	18d2      	adds	r2, r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	18d3      	adds	r3, r2, r3
 8001be0:	4a0f      	ldr	r2, [pc, #60]	; (8001c20 <PCD_EP_ISR_Handler+0x3c0>)
 8001be2:	4694      	mov	ip, r2
 8001be4:	4463      	add	r3, ip
 8001be6:	881a      	ldrh	r2, [r3, #0]
 8001be8:	2436      	movs	r4, #54	; 0x36
 8001bea:	193b      	adds	r3, r7, r4
 8001bec:	0592      	lsls	r2, r2, #22
 8001bee:	0d92      	lsrs	r2, r2, #22
 8001bf0:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8001bf2:	193b      	adds	r3, r7, r4
 8001bf4:	881b      	ldrh	r3, [r3, #0]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d100      	bne.n	8001bfc <PCD_EP_ISR_Handler+0x39c>
 8001bfa:	e09e      	b.n	8001d3a <PCD_EP_ISR_Handler+0x4da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6818      	ldr	r0, [r3, #0]
 8001c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c02:	6959      	ldr	r1, [r3, #20]
 8001c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c06:	88da      	ldrh	r2, [r3, #6]
 8001c08:	193b      	adds	r3, r7, r4
 8001c0a:	881b      	ldrh	r3, [r3, #0]
 8001c0c:	f004 fa6a 	bl	80060e4 <USB_ReadPMA>
 8001c10:	e093      	b.n	8001d3a <PCD_EP_ISR_Handler+0x4da>
 8001c12:	46c0      	nop			; (mov r8, r8)
 8001c14:	ffff8f0f 	.word	0xffff8f0f
 8001c18:	ffff8000 	.word	0xffff8000
 8001c1c:	00000402 	.word	0x00000402
 8001c20:	00000406 	.word	0x00000406
 8001c24:	00000f8f 	.word	0x00000f8f
 8001c28:	ffff83ff 	.word	0xffff83ff
 8001c2c:	ffffbf8f 	.word	0xffffbf8f
 8001c30:	ffff8080 	.word	0xffff8080
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c36:	78db      	ldrb	r3, [r3, #3]
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d10c      	bne.n	8001c56 <PCD_EP_ISR_Handler+0x3f6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001c3c:	2336      	movs	r3, #54	; 0x36
 8001c3e:	18fc      	adds	r4, r7, r3
 8001c40:	232a      	movs	r3, #42	; 0x2a
 8001c42:	18fb      	adds	r3, r7, r3
 8001c44:	881a      	ldrh	r2, [r3, #0]
 8001c46:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	0018      	movs	r0, r3
 8001c4c:	f000 f944 	bl	8001ed8 <HAL_PCD_EP_DB_Receive>
 8001c50:	0003      	movs	r3, r0
 8001c52:	8023      	strh	r3, [r4, #0]
 8001c54:	e071      	b.n	8001d3a <PCD_EP_ISR_Handler+0x4da>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	001a      	movs	r2, r3
 8001c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	18d3      	adds	r3, r2, r3
 8001c64:	881b      	ldrh	r3, [r3, #0]
 8001c66:	b29a      	uxth	r2, r3
 8001c68:	2022      	movs	r0, #34	; 0x22
 8001c6a:	183b      	adds	r3, r7, r0
 8001c6c:	4994      	ldr	r1, [pc, #592]	; (8001ec0 <PCD_EP_ISR_Handler+0x660>)
 8001c6e:	400a      	ands	r2, r1
 8001c70:	801a      	strh	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	001a      	movs	r2, r3
 8001c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	18d3      	adds	r3, r2, r3
 8001c80:	183a      	adds	r2, r7, r0
 8001c82:	8812      	ldrh	r2, [r2, #0]
 8001c84:	498f      	ldr	r1, [pc, #572]	; (8001ec4 <PCD_EP_ISR_Handler+0x664>)
 8001c86:	430a      	orrs	r2, r1
 8001c88:	b292      	uxth	r2, r2
 8001c8a:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	001a      	movs	r2, r3
 8001c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	18d3      	adds	r3, r2, r3
 8001c9a:	881b      	ldrh	r3, [r3, #0]
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	001a      	movs	r2, r3
 8001ca0:	2380      	movs	r3, #128	; 0x80
 8001ca2:	01db      	lsls	r3, r3, #7
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	d024      	beq.n	8001cf2 <PCD_EP_ISR_Handler+0x492>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2250      	movs	r2, #80	; 0x50
 8001cae:	5a9b      	ldrh	r3, [r3, r2]
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	001a      	movs	r2, r3
 8001cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	00db      	lsls	r3, r3, #3
 8001cba:	18d2      	adds	r2, r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	18d3      	adds	r3, r2, r3
 8001cc2:	4a81      	ldr	r2, [pc, #516]	; (8001ec8 <PCD_EP_ISR_Handler+0x668>)
 8001cc4:	4694      	mov	ip, r2
 8001cc6:	4463      	add	r3, ip
 8001cc8:	881a      	ldrh	r2, [r3, #0]
 8001cca:	2436      	movs	r4, #54	; 0x36
 8001ccc:	193b      	adds	r3, r7, r4
 8001cce:	0592      	lsls	r2, r2, #22
 8001cd0:	0d92      	lsrs	r2, r2, #22
 8001cd2:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8001cd4:	193b      	adds	r3, r7, r4
 8001cd6:	881b      	ldrh	r3, [r3, #0]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d02e      	beq.n	8001d3a <PCD_EP_ISR_Handler+0x4da>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6818      	ldr	r0, [r3, #0]
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce2:	6959      	ldr	r1, [r3, #20]
 8001ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce6:	891a      	ldrh	r2, [r3, #8]
 8001ce8:	193b      	adds	r3, r7, r4
 8001cea:	881b      	ldrh	r3, [r3, #0]
 8001cec:	f004 f9fa 	bl	80060e4 <USB_ReadPMA>
 8001cf0:	e023      	b.n	8001d3a <PCD_EP_ISR_Handler+0x4da>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2250      	movs	r2, #80	; 0x50
 8001cf8:	5a9b      	ldrh	r3, [r3, r2]
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	001a      	movs	r2, r3
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	00db      	lsls	r3, r3, #3
 8001d04:	18d2      	adds	r2, r2, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	18d3      	adds	r3, r2, r3
 8001d0c:	4a6f      	ldr	r2, [pc, #444]	; (8001ecc <PCD_EP_ISR_Handler+0x66c>)
 8001d0e:	4694      	mov	ip, r2
 8001d10:	4463      	add	r3, ip
 8001d12:	881a      	ldrh	r2, [r3, #0]
 8001d14:	2436      	movs	r4, #54	; 0x36
 8001d16:	193b      	adds	r3, r7, r4
 8001d18:	0592      	lsls	r2, r2, #22
 8001d1a:	0d92      	lsrs	r2, r2, #22
 8001d1c:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8001d1e:	193b      	adds	r3, r7, r4
 8001d20:	881b      	ldrh	r3, [r3, #0]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d009      	beq.n	8001d3a <PCD_EP_ISR_Handler+0x4da>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6818      	ldr	r0, [r3, #0]
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2c:	6959      	ldr	r1, [r3, #20]
 8001d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d30:	895a      	ldrh	r2, [r3, #10]
 8001d32:	193b      	adds	r3, r7, r4
 8001d34:	881b      	ldrh	r3, [r3, #0]
 8001d36:	f004 f9d5 	bl	80060e4 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3c:	69da      	ldr	r2, [r3, #28]
 8001d3e:	2136      	movs	r1, #54	; 0x36
 8001d40:	187b      	adds	r3, r7, r1
 8001d42:	881b      	ldrh	r3, [r3, #0]
 8001d44:	18d2      	adds	r2, r2, r3
 8001d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d48:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4c:	695a      	ldr	r2, [r3, #20]
 8001d4e:	187b      	adds	r3, r7, r1
 8001d50:	881b      	ldrh	r3, [r3, #0]
 8001d52:	18d2      	adds	r2, r2, r3
 8001d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d56:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5a:	699b      	ldr	r3, [r3, #24]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d005      	beq.n	8001d6c <PCD_EP_ISR_Handler+0x50c>
 8001d60:	187b      	adds	r3, r7, r1
 8001d62:	881a      	ldrh	r2, [r3, #0]
 8001d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d66:	691b      	ldr	r3, [r3, #16]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d207      	bcs.n	8001d7c <PCD_EP_ISR_Handler+0x51c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6e:	781a      	ldrb	r2, [r3, #0]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	0011      	movs	r1, r2
 8001d74:	0018      	movs	r0, r3
 8001d76:	f005 fb3b 	bl	80073f0 <HAL_PCD_DataOutStageCallback>
 8001d7a:	e006      	b.n	8001d8a <PCD_EP_ISR_Handler+0x52a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d82:	0011      	movs	r1, r2
 8001d84:	0018      	movs	r0, r3
 8001d86:	f002 ff23 	bl	8004bd0 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001d8a:	242a      	movs	r4, #42	; 0x2a
 8001d8c:	193b      	adds	r3, r7, r4
 8001d8e:	881b      	ldrh	r3, [r3, #0]
 8001d90:	2280      	movs	r2, #128	; 0x80
 8001d92:	4013      	ands	r3, r2
 8001d94:	d100      	bne.n	8001d98 <PCD_EP_ISR_Handler+0x538>
 8001d96:	e085      	b.n	8001ea4 <PCD_EP_ISR_Handler+0x644>
      {
        ep = &hpcd->IN_ep[epindex];
 8001d98:	202d      	movs	r0, #45	; 0x2d
 8001d9a:	183b      	adds	r3, r7, r0
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	1c5a      	adds	r2, r3, #1
 8001da0:	0013      	movs	r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	189b      	adds	r3, r3, r2
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	18d3      	adds	r3, r2, r3
 8001dac:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	001a      	movs	r2, r3
 8001db4:	183b      	adds	r3, r7, r0
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	18d3      	adds	r3, r2, r3
 8001dbc:	881b      	ldrh	r3, [r3, #0]
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	2520      	movs	r5, #32
 8001dc2:	197b      	adds	r3, r7, r5
 8001dc4:	4942      	ldr	r1, [pc, #264]	; (8001ed0 <PCD_EP_ISR_Handler+0x670>)
 8001dc6:	400a      	ands	r2, r1
 8001dc8:	801a      	strh	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	001a      	movs	r2, r3
 8001dd0:	183b      	adds	r3, r7, r0
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	18d3      	adds	r3, r2, r3
 8001dd8:	197a      	adds	r2, r7, r5
 8001dda:	8812      	ldrh	r2, [r2, #0]
 8001ddc:	493d      	ldr	r1, [pc, #244]	; (8001ed4 <PCD_EP_ISR_Handler+0x674>)
 8001dde:	430a      	orrs	r2, r1
 8001de0:	b292      	uxth	r2, r2
 8001de2:	801a      	strh	r2, [r3, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8001de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de6:	78db      	ldrb	r3, [r3, #3]
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d109      	bne.n	8001e00 <PCD_EP_ISR_Handler+0x5a0>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dee:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d14f      	bne.n	8001e94 <PCD_EP_ISR_Handler+0x634>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001df4:	193b      	adds	r3, r7, r4
 8001df6:	881a      	ldrh	r2, [r3, #0]
 8001df8:	2380      	movs	r3, #128	; 0x80
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	d149      	bne.n	8001e94 <PCD_EP_ISR_Handler+0x634>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2250      	movs	r2, #80	; 0x50
 8001e06:	5a9b      	ldrh	r3, [r3, r2]
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	001a      	movs	r2, r3
 8001e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	00db      	lsls	r3, r3, #3
 8001e12:	18d2      	adds	r2, r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	18d3      	adds	r3, r2, r3
 8001e1a:	4a2b      	ldr	r2, [pc, #172]	; (8001ec8 <PCD_EP_ISR_Handler+0x668>)
 8001e1c:	4694      	mov	ip, r2
 8001e1e:	4463      	add	r3, ip
 8001e20:	881a      	ldrh	r2, [r3, #0]
 8001e22:	211e      	movs	r1, #30
 8001e24:	187b      	adds	r3, r7, r1
 8001e26:	0592      	lsls	r2, r2, #22
 8001e28:	0d92      	lsrs	r2, r2, #22
 8001e2a:	801a      	strh	r2, [r3, #0]

          if (ep->xfer_len > TxByteNbre)
 8001e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2e:	699a      	ldr	r2, [r3, #24]
 8001e30:	187b      	adds	r3, r7, r1
 8001e32:	881b      	ldrh	r3, [r3, #0]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d907      	bls.n	8001e48 <PCD_EP_ISR_Handler+0x5e8>
          {
            ep->xfer_len -= TxByteNbre;
 8001e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3a:	699a      	ldr	r2, [r3, #24]
 8001e3c:	187b      	adds	r3, r7, r1
 8001e3e:	881b      	ldrh	r3, [r3, #0]
 8001e40:	1ad2      	subs	r2, r2, r3
 8001e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e44:	619a      	str	r2, [r3, #24]
 8001e46:	e002      	b.n	8001e4e <PCD_EP_ISR_Handler+0x5ee>
          }
          else
          {
            ep->xfer_len = 0U;
 8001e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e50:	699b      	ldr	r3, [r3, #24]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d107      	bne.n	8001e66 <PCD_EP_ISR_Handler+0x606>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e58:	781a      	ldrb	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	0011      	movs	r1, r2
 8001e5e:	0018      	movs	r0, r3
 8001e60:	f005 fae7 	bl	8007432 <HAL_PCD_DataInStageCallback>
 8001e64:	e01e      	b.n	8001ea4 <PCD_EP_ISR_Handler+0x644>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8001e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e68:	695a      	ldr	r2, [r3, #20]
 8001e6a:	211e      	movs	r1, #30
 8001e6c:	187b      	adds	r3, r7, r1
 8001e6e:	881b      	ldrh	r3, [r3, #0]
 8001e70:	18d2      	adds	r2, r2, r3
 8001e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e74:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8001e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e78:	69da      	ldr	r2, [r3, #28]
 8001e7a:	187b      	adds	r3, r7, r1
 8001e7c:	881b      	ldrh	r3, [r3, #0]
 8001e7e:	18d2      	adds	r2, r2, r3
 8001e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e82:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e8a:	0011      	movs	r1, r2
 8001e8c:	0018      	movs	r0, r3
 8001e8e:	f002 fe9f 	bl	8004bd0 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8001e92:	e007      	b.n	8001ea4 <PCD_EP_ISR_Handler+0x644>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001e94:	232a      	movs	r3, #42	; 0x2a
 8001e96:	18fb      	adds	r3, r7, r3
 8001e98:	881a      	ldrh	r2, [r3, #0]
 8001e9a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	0018      	movs	r0, r3
 8001ea0:	f000 f936 	bl	8002110 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2244      	movs	r2, #68	; 0x44
 8001eaa:	5a9b      	ldrh	r3, [r3, r2]
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	b21b      	sxth	r3, r3
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	da00      	bge.n	8001eb6 <PCD_EP_ISR_Handler+0x656>
 8001eb4:	e4d9      	b.n	800186a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	0018      	movs	r0, r3
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	b00e      	add	sp, #56	; 0x38
 8001ebe:	bdb0      	pop	{r4, r5, r7, pc}
 8001ec0:	ffff8f8f 	.word	0xffff8f8f
 8001ec4:	ffff80c0 	.word	0xffff80c0
 8001ec8:	00000402 	.word	0x00000402
 8001ecc:	00000406 	.word	0x00000406
 8001ed0:	ffff8f0f 	.word	0xffff8f0f
 8001ed4:	ffff8000 	.word	0xffff8000

08001ed8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001ed8:	b590      	push	{r4, r7, lr}
 8001eda:	b089      	sub	sp, #36	; 0x24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	60b9      	str	r1, [r7, #8]
 8001ee2:	1dbb      	adds	r3, r7, #6
 8001ee4:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001ee6:	1dbb      	adds	r3, r7, #6
 8001ee8:	881a      	ldrh	r2, [r3, #0]
 8001eea:	2380      	movs	r3, #128	; 0x80
 8001eec:	01db      	lsls	r3, r3, #7
 8001eee:	4013      	ands	r3, r2
 8001ef0:	d100      	bne.n	8001ef4 <HAL_PCD_EP_DB_Receive+0x1c>
 8001ef2:	e07d      	b.n	8001ff0 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2250      	movs	r2, #80	; 0x50
 8001efa:	5a9b      	ldrh	r3, [r3, r2]
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	001a      	movs	r2, r3
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	00db      	lsls	r3, r3, #3
 8001f06:	18d2      	adds	r2, r2, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	18d3      	adds	r3, r2, r3
 8001f0e:	4a7a      	ldr	r2, [pc, #488]	; (80020f8 <HAL_PCD_EP_DB_Receive+0x220>)
 8001f10:	4694      	mov	ip, r2
 8001f12:	4463      	add	r3, ip
 8001f14:	881a      	ldrh	r2, [r3, #0]
 8001f16:	211a      	movs	r1, #26
 8001f18:	187b      	adds	r3, r7, r1
 8001f1a:	0592      	lsls	r2, r2, #22
 8001f1c:	0d92      	lsrs	r2, r2, #22
 8001f1e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	699a      	ldr	r2, [r3, #24]
 8001f24:	187b      	adds	r3, r7, r1
 8001f26:	881b      	ldrh	r3, [r3, #0]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d307      	bcc.n	8001f3c <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	699a      	ldr	r2, [r3, #24]
 8001f30:	187b      	adds	r3, r7, r1
 8001f32:	881b      	ldrh	r3, [r3, #0]
 8001f34:	1ad2      	subs	r2, r2, r3
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	619a      	str	r2, [r3, #24]
 8001f3a:	e002      	b.n	8001f42 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	699b      	ldr	r3, [r3, #24]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d121      	bne.n	8001f8e <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	001a      	movs	r2, r3
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	18d3      	adds	r3, r2, r3
 8001f58:	881b      	ldrh	r3, [r3, #0]
 8001f5a:	b29a      	uxth	r2, r3
 8001f5c:	2018      	movs	r0, #24
 8001f5e:	183b      	adds	r3, r7, r0
 8001f60:	4966      	ldr	r1, [pc, #408]	; (80020fc <HAL_PCD_EP_DB_Receive+0x224>)
 8001f62:	400a      	ands	r2, r1
 8001f64:	801a      	strh	r2, [r3, #0]
 8001f66:	183b      	adds	r3, r7, r0
 8001f68:	183a      	adds	r2, r7, r0
 8001f6a:	8812      	ldrh	r2, [r2, #0]
 8001f6c:	2180      	movs	r1, #128	; 0x80
 8001f6e:	0189      	lsls	r1, r1, #6
 8001f70:	404a      	eors	r2, r1
 8001f72:	801a      	strh	r2, [r3, #0]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	001a      	movs	r2, r3
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	18d3      	adds	r3, r2, r3
 8001f82:	183a      	adds	r2, r7, r0
 8001f84:	8812      	ldrh	r2, [r2, #0]
 8001f86:	495e      	ldr	r1, [pc, #376]	; (8002100 <HAL_PCD_EP_DB_Receive+0x228>)
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	b292      	uxth	r2, r2
 8001f8c:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001f8e:	1dbb      	adds	r3, r7, #6
 8001f90:	881b      	ldrh	r3, [r3, #0]
 8001f92:	2240      	movs	r2, #64	; 0x40
 8001f94:	4013      	ands	r3, r2
 8001f96:	d01a      	beq.n	8001fce <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	001a      	movs	r2, r3
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	18d3      	adds	r3, r2, r3
 8001fa6:	881b      	ldrh	r3, [r3, #0]
 8001fa8:	b29a      	uxth	r2, r3
 8001faa:	2016      	movs	r0, #22
 8001fac:	183b      	adds	r3, r7, r0
 8001fae:	4955      	ldr	r1, [pc, #340]	; (8002104 <HAL_PCD_EP_DB_Receive+0x22c>)
 8001fb0:	400a      	ands	r2, r1
 8001fb2:	801a      	strh	r2, [r3, #0]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	001a      	movs	r2, r3
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	18d3      	adds	r3, r2, r3
 8001fc2:	183a      	adds	r2, r7, r0
 8001fc4:	8812      	ldrh	r2, [r2, #0]
 8001fc6:	4950      	ldr	r1, [pc, #320]	; (8002108 <HAL_PCD_EP_DB_Receive+0x230>)
 8001fc8:	430a      	orrs	r2, r1
 8001fca:	b292      	uxth	r2, r2
 8001fcc:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8001fce:	241a      	movs	r4, #26
 8001fd0:	193b      	adds	r3, r7, r4
 8001fd2:	881b      	ldrh	r3, [r3, #0]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d100      	bne.n	8001fda <HAL_PCD_EP_DB_Receive+0x102>
 8001fd8:	e086      	b.n	80020e8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	6818      	ldr	r0, [r3, #0]
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	6959      	ldr	r1, [r3, #20]
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	891a      	ldrh	r2, [r3, #8]
 8001fe6:	193b      	adds	r3, r7, r4
 8001fe8:	881b      	ldrh	r3, [r3, #0]
 8001fea:	f004 f87b 	bl	80060e4 <USB_ReadPMA>
 8001fee:	e07b      	b.n	80020e8 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2250      	movs	r2, #80	; 0x50
 8001ff6:	5a9b      	ldrh	r3, [r3, r2]
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	001a      	movs	r2, r3
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	00db      	lsls	r3, r3, #3
 8002002:	18d2      	adds	r2, r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	18d3      	adds	r3, r2, r3
 800200a:	4a40      	ldr	r2, [pc, #256]	; (800210c <HAL_PCD_EP_DB_Receive+0x234>)
 800200c:	4694      	mov	ip, r2
 800200e:	4463      	add	r3, ip
 8002010:	881a      	ldrh	r2, [r3, #0]
 8002012:	211a      	movs	r1, #26
 8002014:	187b      	adds	r3, r7, r1
 8002016:	0592      	lsls	r2, r2, #22
 8002018:	0d92      	lsrs	r2, r2, #22
 800201a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	699a      	ldr	r2, [r3, #24]
 8002020:	187b      	adds	r3, r7, r1
 8002022:	881b      	ldrh	r3, [r3, #0]
 8002024:	429a      	cmp	r2, r3
 8002026:	d307      	bcc.n	8002038 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	699a      	ldr	r2, [r3, #24]
 800202c:	187b      	adds	r3, r7, r1
 800202e:	881b      	ldrh	r3, [r3, #0]
 8002030:	1ad2      	subs	r2, r2, r3
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	619a      	str	r2, [r3, #24]
 8002036:	e002      	b.n	800203e <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	2200      	movs	r2, #0
 800203c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	699b      	ldr	r3, [r3, #24]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d121      	bne.n	800208a <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	001a      	movs	r2, r3
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	18d3      	adds	r3, r2, r3
 8002054:	881b      	ldrh	r3, [r3, #0]
 8002056:	b29a      	uxth	r2, r3
 8002058:	201e      	movs	r0, #30
 800205a:	183b      	adds	r3, r7, r0
 800205c:	4927      	ldr	r1, [pc, #156]	; (80020fc <HAL_PCD_EP_DB_Receive+0x224>)
 800205e:	400a      	ands	r2, r1
 8002060:	801a      	strh	r2, [r3, #0]
 8002062:	183b      	adds	r3, r7, r0
 8002064:	183a      	adds	r2, r7, r0
 8002066:	8812      	ldrh	r2, [r2, #0]
 8002068:	2180      	movs	r1, #128	; 0x80
 800206a:	0189      	lsls	r1, r1, #6
 800206c:	404a      	eors	r2, r1
 800206e:	801a      	strh	r2, [r3, #0]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	001a      	movs	r2, r3
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	18d3      	adds	r3, r2, r3
 800207e:	183a      	adds	r2, r7, r0
 8002080:	8812      	ldrh	r2, [r2, #0]
 8002082:	491f      	ldr	r1, [pc, #124]	; (8002100 <HAL_PCD_EP_DB_Receive+0x228>)
 8002084:	430a      	orrs	r2, r1
 8002086:	b292      	uxth	r2, r2
 8002088:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800208a:	1dbb      	adds	r3, r7, #6
 800208c:	881b      	ldrh	r3, [r3, #0]
 800208e:	2240      	movs	r2, #64	; 0x40
 8002090:	4013      	ands	r3, r2
 8002092:	d11a      	bne.n	80020ca <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	001a      	movs	r2, r3
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	18d3      	adds	r3, r2, r3
 80020a2:	881b      	ldrh	r3, [r3, #0]
 80020a4:	b29a      	uxth	r2, r3
 80020a6:	201c      	movs	r0, #28
 80020a8:	183b      	adds	r3, r7, r0
 80020aa:	4916      	ldr	r1, [pc, #88]	; (8002104 <HAL_PCD_EP_DB_Receive+0x22c>)
 80020ac:	400a      	ands	r2, r1
 80020ae:	801a      	strh	r2, [r3, #0]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	001a      	movs	r2, r3
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	18d3      	adds	r3, r2, r3
 80020be:	183a      	adds	r2, r7, r0
 80020c0:	8812      	ldrh	r2, [r2, #0]
 80020c2:	4911      	ldr	r1, [pc, #68]	; (8002108 <HAL_PCD_EP_DB_Receive+0x230>)
 80020c4:	430a      	orrs	r2, r1
 80020c6:	b292      	uxth	r2, r2
 80020c8:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 80020ca:	241a      	movs	r4, #26
 80020cc:	193b      	adds	r3, r7, r4
 80020ce:	881b      	ldrh	r3, [r3, #0]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d009      	beq.n	80020e8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6818      	ldr	r0, [r3, #0]
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	6959      	ldr	r1, [r3, #20]
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	895a      	ldrh	r2, [r3, #10]
 80020e0:	193b      	adds	r3, r7, r4
 80020e2:	881b      	ldrh	r3, [r3, #0]
 80020e4:	f003 fffe 	bl	80060e4 <USB_ReadPMA>
    }
  }

  return count;
 80020e8:	231a      	movs	r3, #26
 80020ea:	18fb      	adds	r3, r7, r3
 80020ec:	881b      	ldrh	r3, [r3, #0]
}
 80020ee:	0018      	movs	r0, r3
 80020f0:	46bd      	mov	sp, r7
 80020f2:	b009      	add	sp, #36	; 0x24
 80020f4:	bd90      	pop	{r4, r7, pc}
 80020f6:	46c0      	nop			; (mov r8, r8)
 80020f8:	00000402 	.word	0x00000402
 80020fc:	ffffbf8f 	.word	0xffffbf8f
 8002100:	ffff8080 	.word	0xffff8080
 8002104:	ffff8f8f 	.word	0xffff8f8f
 8002108:	ffff80c0 	.word	0xffff80c0
 800210c:	00000406 	.word	0x00000406

08002110 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b094      	sub	sp, #80	; 0x50
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	1dbb      	adds	r3, r7, #6
 800211c:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800211e:	1dbb      	adds	r3, r7, #6
 8002120:	881b      	ldrh	r3, [r3, #0]
 8002122:	2240      	movs	r2, #64	; 0x40
 8002124:	4013      	ands	r3, r2
 8002126:	d100      	bne.n	800212a <HAL_PCD_EP_DB_Transmit+0x1a>
 8002128:	e12e      	b.n	8002388 <HAL_PCD_EP_DB_Transmit+0x278>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2250      	movs	r2, #80	; 0x50
 8002130:	5a9b      	ldrh	r3, [r3, r2]
 8002132:	b29b      	uxth	r3, r3
 8002134:	001a      	movs	r2, r3
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	00db      	lsls	r3, r3, #3
 800213c:	18d2      	adds	r2, r2, r3
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	18d3      	adds	r3, r2, r3
 8002144:	4abb      	ldr	r2, [pc, #748]	; (8002434 <HAL_PCD_EP_DB_Transmit+0x324>)
 8002146:	4694      	mov	ip, r2
 8002148:	4463      	add	r3, ip
 800214a:	881a      	ldrh	r2, [r3, #0]
 800214c:	2148      	movs	r1, #72	; 0x48
 800214e:	187b      	adds	r3, r7, r1
 8002150:	0592      	lsls	r2, r2, #22
 8002152:	0d92      	lsrs	r2, r2, #22
 8002154:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxByteNbre)
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	699a      	ldr	r2, [r3, #24]
 800215a:	187b      	adds	r3, r7, r1
 800215c:	881b      	ldrh	r3, [r3, #0]
 800215e:	429a      	cmp	r2, r3
 8002160:	d907      	bls.n	8002172 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	699a      	ldr	r2, [r3, #24]
 8002166:	187b      	adds	r3, r7, r1
 8002168:	881b      	ldrh	r3, [r3, #0]
 800216a:	1ad2      	subs	r2, r2, r3
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	619a      	str	r2, [r3, #24]
 8002170:	e002      	b.n	8002178 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	2200      	movs	r2, #0
 8002176:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d129      	bne.n	80021d4 <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	781a      	ldrb	r2, [r3, #0]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	0011      	movs	r1, r2
 8002188:	0018      	movs	r0, r3
 800218a:	f005 f952 	bl	8007432 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800218e:	1dbb      	adds	r3, r7, #6
 8002190:	881a      	ldrh	r2, [r3, #0]
 8002192:	2380      	movs	r3, #128	; 0x80
 8002194:	01db      	lsls	r3, r3, #7
 8002196:	4013      	ands	r3, r2
 8002198:	d100      	bne.n	800219c <HAL_PCD_EP_DB_Transmit+0x8c>
 800219a:	e230      	b.n	80025fe <HAL_PCD_EP_DB_Transmit+0x4ee>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	001a      	movs	r2, r3
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	18d3      	adds	r3, r2, r3
 80021aa:	881b      	ldrh	r3, [r3, #0]
 80021ac:	b29a      	uxth	r2, r3
 80021ae:	2016      	movs	r0, #22
 80021b0:	183b      	adds	r3, r7, r0
 80021b2:	49a1      	ldr	r1, [pc, #644]	; (8002438 <HAL_PCD_EP_DB_Transmit+0x328>)
 80021b4:	400a      	ands	r2, r1
 80021b6:	801a      	strh	r2, [r3, #0]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	001a      	movs	r2, r3
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	18d3      	adds	r3, r2, r3
 80021c6:	183a      	adds	r2, r7, r0
 80021c8:	8812      	ldrh	r2, [r2, #0]
 80021ca:	499c      	ldr	r1, [pc, #624]	; (800243c <HAL_PCD_EP_DB_Transmit+0x32c>)
 80021cc:	430a      	orrs	r2, r1
 80021ce:	b292      	uxth	r2, r2
 80021d0:	801a      	strh	r2, [r3, #0]
 80021d2:	e214      	b.n	80025fe <HAL_PCD_EP_DB_Transmit+0x4ee>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80021d4:	1dbb      	adds	r3, r7, #6
 80021d6:	881a      	ldrh	r2, [r3, #0]
 80021d8:	2380      	movs	r3, #128	; 0x80
 80021da:	01db      	lsls	r3, r3, #7
 80021dc:	4013      	ands	r3, r2
 80021de:	d01a      	beq.n	8002216 <HAL_PCD_EP_DB_Transmit+0x106>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	001a      	movs	r2, r3
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	18d3      	adds	r3, r2, r3
 80021ee:	881b      	ldrh	r3, [r3, #0]
 80021f0:	b29a      	uxth	r2, r3
 80021f2:	202a      	movs	r0, #42	; 0x2a
 80021f4:	183b      	adds	r3, r7, r0
 80021f6:	4990      	ldr	r1, [pc, #576]	; (8002438 <HAL_PCD_EP_DB_Transmit+0x328>)
 80021f8:	400a      	ands	r2, r1
 80021fa:	801a      	strh	r2, [r3, #0]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	001a      	movs	r2, r3
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	18d3      	adds	r3, r2, r3
 800220a:	183a      	adds	r2, r7, r0
 800220c:	8812      	ldrh	r2, [r2, #0]
 800220e:	498b      	ldr	r1, [pc, #556]	; (800243c <HAL_PCD_EP_DB_Transmit+0x32c>)
 8002210:	430a      	orrs	r2, r1
 8002212:	b292      	uxth	r2, r2
 8002214:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	2224      	movs	r2, #36	; 0x24
 800221a:	5c9b      	ldrb	r3, [r3, r2]
 800221c:	2b01      	cmp	r3, #1
 800221e:	d000      	beq.n	8002222 <HAL_PCD_EP_DB_Transmit+0x112>
 8002220:	e1ed      	b.n	80025fe <HAL_PCD_EP_DB_Transmit+0x4ee>
      {
        ep->xfer_buff += TxByteNbre;
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	695a      	ldr	r2, [r3, #20]
 8002226:	2148      	movs	r1, #72	; 0x48
 8002228:	187b      	adds	r3, r7, r1
 800222a:	881b      	ldrh	r3, [r3, #0]
 800222c:	18d2      	adds	r2, r2, r3
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	69da      	ldr	r2, [r3, #28]
 8002236:	187b      	adds	r3, r7, r1
 8002238:	881b      	ldrh	r3, [r3, #0]
 800223a:	18d2      	adds	r2, r2, r3
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	6a1a      	ldr	r2, [r3, #32]
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	691b      	ldr	r3, [r3, #16]
 8002248:	429a      	cmp	r2, r3
 800224a:	d309      	bcc.n	8002260 <HAL_PCD_EP_DB_Transmit+0x150>
        {
          len = ep->maxpacket;
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	691b      	ldr	r3, [r3, #16]
 8002250:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	6a1a      	ldr	r2, [r3, #32]
 8002256:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002258:	1ad2      	subs	r2, r2, r3
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	621a      	str	r2, [r3, #32]
 800225e:	e016      	b.n	800228e <HAL_PCD_EP_DB_Transmit+0x17e>
        }
        else if (ep->xfer_len_db == 0U)
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	6a1b      	ldr	r3, [r3, #32]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d108      	bne.n	800227a <HAL_PCD_EP_DB_Transmit+0x16a>
        {
          len = TxByteNbre;
 8002268:	2348      	movs	r3, #72	; 0x48
 800226a:	18fb      	adds	r3, r7, r3
 800226c:	881b      	ldrh	r3, [r3, #0]
 800226e:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	2224      	movs	r2, #36	; 0x24
 8002274:	2100      	movs	r1, #0
 8002276:	5499      	strb	r1, [r3, r2]
 8002278:	e009      	b.n	800228e <HAL_PCD_EP_DB_Transmit+0x17e>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	2224      	movs	r2, #36	; 0x24
 800227e:	2100      	movs	r1, #0
 8002280:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	6a1b      	ldr	r3, [r3, #32]
 8002286:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	2200      	movs	r2, #0
 800228c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	785b      	ldrb	r3, [r3, #1]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d150      	bne.n	8002338 <HAL_PCD_EP_DB_Transmit+0x228>
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	61fb      	str	r3, [r7, #28]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2250      	movs	r2, #80	; 0x50
 80022a2:	5a9b      	ldrh	r3, [r3, r2]
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	001a      	movs	r2, r3
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	189b      	adds	r3, r3, r2
 80022ac:	61fb      	str	r3, [r7, #28]
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	00da      	lsls	r2, r3, #3
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	18d3      	adds	r3, r2, r3
 80022b8:	4a5e      	ldr	r2, [pc, #376]	; (8002434 <HAL_PCD_EP_DB_Transmit+0x324>)
 80022ba:	4694      	mov	ip, r2
 80022bc:	4463      	add	r3, ip
 80022be:	61bb      	str	r3, [r7, #24]
 80022c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d110      	bne.n	80022e8 <HAL_PCD_EP_DB_Transmit+0x1d8>
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	881b      	ldrh	r3, [r3, #0]
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	4a5c      	ldr	r2, [pc, #368]	; (8002440 <HAL_PCD_EP_DB_Transmit+0x330>)
 80022ce:	4013      	ands	r3, r2
 80022d0:	b29a      	uxth	r2, r3
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	801a      	strh	r2, [r3, #0]
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	881b      	ldrh	r3, [r3, #0]
 80022da:	b29b      	uxth	r3, r3
 80022dc:	4a59      	ldr	r2, [pc, #356]	; (8002444 <HAL_PCD_EP_DB_Transmit+0x334>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	b29a      	uxth	r2, r3
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	801a      	strh	r2, [r3, #0]
 80022e6:	e044      	b.n	8002372 <HAL_PCD_EP_DB_Transmit+0x262>
 80022e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022ea:	2b3e      	cmp	r3, #62	; 0x3e
 80022ec:	d810      	bhi.n	8002310 <HAL_PCD_EP_DB_Transmit+0x200>
 80022ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022f0:	085b      	lsrs	r3, r3, #1
 80022f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022f6:	2201      	movs	r2, #1
 80022f8:	4013      	ands	r3, r2
 80022fa:	d002      	beq.n	8002302 <HAL_PCD_EP_DB_Transmit+0x1f2>
 80022fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022fe:	3301      	adds	r3, #1
 8002300:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002304:	b29b      	uxth	r3, r3
 8002306:	029b      	lsls	r3, r3, #10
 8002308:	b29a      	uxth	r2, r3
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	801a      	strh	r2, [r3, #0]
 800230e:	e030      	b.n	8002372 <HAL_PCD_EP_DB_Transmit+0x262>
 8002310:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002312:	095b      	lsrs	r3, r3, #5
 8002314:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002316:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002318:	221f      	movs	r2, #31
 800231a:	4013      	ands	r3, r2
 800231c:	d102      	bne.n	8002324 <HAL_PCD_EP_DB_Transmit+0x214>
 800231e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002320:	3b01      	subs	r3, #1
 8002322:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002326:	b29b      	uxth	r3, r3
 8002328:	029b      	lsls	r3, r3, #10
 800232a:	b29b      	uxth	r3, r3
 800232c:	4a45      	ldr	r2, [pc, #276]	; (8002444 <HAL_PCD_EP_DB_Transmit+0x334>)
 800232e:	4313      	orrs	r3, r2
 8002330:	b29a      	uxth	r2, r3
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	801a      	strh	r2, [r3, #0]
 8002336:	e01c      	b.n	8002372 <HAL_PCD_EP_DB_Transmit+0x262>
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	785b      	ldrb	r3, [r3, #1]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d118      	bne.n	8002372 <HAL_PCD_EP_DB_Transmit+0x262>
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	627b      	str	r3, [r7, #36]	; 0x24
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2250      	movs	r2, #80	; 0x50
 800234c:	5a9b      	ldrh	r3, [r3, r2]
 800234e:	b29b      	uxth	r3, r3
 8002350:	001a      	movs	r2, r3
 8002352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002354:	189b      	adds	r3, r3, r2
 8002356:	627b      	str	r3, [r7, #36]	; 0x24
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	00da      	lsls	r2, r3, #3
 800235e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002360:	18d3      	adds	r3, r2, r3
 8002362:	4a34      	ldr	r2, [pc, #208]	; (8002434 <HAL_PCD_EP_DB_Transmit+0x324>)
 8002364:	4694      	mov	ip, r2
 8002366:	4463      	add	r3, ip
 8002368:	623b      	str	r3, [r7, #32]
 800236a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800236c:	b29a      	uxth	r2, r3
 800236e:	6a3b      	ldr	r3, [r7, #32]
 8002370:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6818      	ldr	r0, [r3, #0]
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	6959      	ldr	r1, [r3, #20]
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	891a      	ldrh	r2, [r3, #8]
 800237e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002380:	b29b      	uxth	r3, r3
 8002382:	f003 fe6b 	bl	800605c <USB_WritePMA>
 8002386:	e13a      	b.n	80025fe <HAL_PCD_EP_DB_Transmit+0x4ee>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2250      	movs	r2, #80	; 0x50
 800238e:	5a9b      	ldrh	r3, [r3, r2]
 8002390:	b29b      	uxth	r3, r3
 8002392:	001a      	movs	r2, r3
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	00db      	lsls	r3, r3, #3
 800239a:	18d2      	adds	r2, r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	18d3      	adds	r3, r2, r3
 80023a2:	4a29      	ldr	r2, [pc, #164]	; (8002448 <HAL_PCD_EP_DB_Transmit+0x338>)
 80023a4:	4694      	mov	ip, r2
 80023a6:	4463      	add	r3, ip
 80023a8:	881a      	ldrh	r2, [r3, #0]
 80023aa:	2148      	movs	r1, #72	; 0x48
 80023ac:	187b      	adds	r3, r7, r1
 80023ae:	0592      	lsls	r2, r2, #22
 80023b0:	0d92      	lsrs	r2, r2, #22
 80023b2:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxByteNbre)
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	699a      	ldr	r2, [r3, #24]
 80023b8:	187b      	adds	r3, r7, r1
 80023ba:	881b      	ldrh	r3, [r3, #0]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d307      	bcc.n	80023d0 <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	699a      	ldr	r2, [r3, #24]
 80023c4:	187b      	adds	r3, r7, r1
 80023c6:	881b      	ldrh	r3, [r3, #0]
 80023c8:	1ad2      	subs	r2, r2, r3
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	619a      	str	r2, [r3, #24]
 80023ce:	e002      	b.n	80023d6 <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	2200      	movs	r2, #0
 80023d4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d136      	bne.n	800244c <HAL_PCD_EP_DB_Transmit+0x33c>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	781a      	ldrb	r2, [r3, #0]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	0011      	movs	r1, r2
 80023e6:	0018      	movs	r0, r3
 80023e8:	f005 f823 	bl	8007432 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80023ec:	1dbb      	adds	r3, r7, #6
 80023ee:	881a      	ldrh	r2, [r3, #0]
 80023f0:	2380      	movs	r3, #128	; 0x80
 80023f2:	01db      	lsls	r3, r3, #7
 80023f4:	4013      	ands	r3, r2
 80023f6:	d000      	beq.n	80023fa <HAL_PCD_EP_DB_Transmit+0x2ea>
 80023f8:	e101      	b.n	80025fe <HAL_PCD_EP_DB_Transmit+0x4ee>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	001a      	movs	r2, r3
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	18d3      	adds	r3, r2, r3
 8002408:	881b      	ldrh	r3, [r3, #0]
 800240a:	b29a      	uxth	r2, r3
 800240c:	204a      	movs	r0, #74	; 0x4a
 800240e:	183b      	adds	r3, r7, r0
 8002410:	4909      	ldr	r1, [pc, #36]	; (8002438 <HAL_PCD_EP_DB_Transmit+0x328>)
 8002412:	400a      	ands	r2, r1
 8002414:	801a      	strh	r2, [r3, #0]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	001a      	movs	r2, r3
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	18d3      	adds	r3, r2, r3
 8002424:	183a      	adds	r2, r7, r0
 8002426:	8812      	ldrh	r2, [r2, #0]
 8002428:	4904      	ldr	r1, [pc, #16]	; (800243c <HAL_PCD_EP_DB_Transmit+0x32c>)
 800242a:	430a      	orrs	r2, r1
 800242c:	b292      	uxth	r2, r2
 800242e:	801a      	strh	r2, [r3, #0]
 8002430:	e0e5      	b.n	80025fe <HAL_PCD_EP_DB_Transmit+0x4ee>
 8002432:	46c0      	nop			; (mov r8, r8)
 8002434:	00000402 	.word	0x00000402
 8002438:	ffff8f8f 	.word	0xffff8f8f
 800243c:	ffffc080 	.word	0xffffc080
 8002440:	ffff83ff 	.word	0xffff83ff
 8002444:	ffff8000 	.word	0xffff8000
 8002448:	00000406 	.word	0x00000406
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800244c:	1dbb      	adds	r3, r7, #6
 800244e:	881a      	ldrh	r2, [r3, #0]
 8002450:	2380      	movs	r3, #128	; 0x80
 8002452:	01db      	lsls	r3, r3, #7
 8002454:	4013      	ands	r3, r2
 8002456:	d11a      	bne.n	800248e <HAL_PCD_EP_DB_Transmit+0x37e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	001a      	movs	r2, r3
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	18d3      	adds	r3, r2, r3
 8002466:	881b      	ldrh	r3, [r3, #0]
 8002468:	b29a      	uxth	r2, r3
 800246a:	2032      	movs	r0, #50	; 0x32
 800246c:	183b      	adds	r3, r7, r0
 800246e:	497a      	ldr	r1, [pc, #488]	; (8002658 <HAL_PCD_EP_DB_Transmit+0x548>)
 8002470:	400a      	ands	r2, r1
 8002472:	801a      	strh	r2, [r3, #0]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	001a      	movs	r2, r3
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	18d3      	adds	r3, r2, r3
 8002482:	183a      	adds	r2, r7, r0
 8002484:	8812      	ldrh	r2, [r2, #0]
 8002486:	4975      	ldr	r1, [pc, #468]	; (800265c <HAL_PCD_EP_DB_Transmit+0x54c>)
 8002488:	430a      	orrs	r2, r1
 800248a:	b292      	uxth	r2, r2
 800248c:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	2224      	movs	r2, #36	; 0x24
 8002492:	5c9b      	ldrb	r3, [r3, r2]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d000      	beq.n	800249a <HAL_PCD_EP_DB_Transmit+0x38a>
 8002498:	e0b1      	b.n	80025fe <HAL_PCD_EP_DB_Transmit+0x4ee>
      {
        ep->xfer_buff += TxByteNbre;
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	695a      	ldr	r2, [r3, #20]
 800249e:	2148      	movs	r1, #72	; 0x48
 80024a0:	187b      	adds	r3, r7, r1
 80024a2:	881b      	ldrh	r3, [r3, #0]
 80024a4:	18d2      	adds	r2, r2, r3
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	69da      	ldr	r2, [r3, #28]
 80024ae:	187b      	adds	r3, r7, r1
 80024b0:	881b      	ldrh	r3, [r3, #0]
 80024b2:	18d2      	adds	r2, r2, r3
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	6a1a      	ldr	r2, [r3, #32]
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	691b      	ldr	r3, [r3, #16]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d309      	bcc.n	80024d8 <HAL_PCD_EP_DB_Transmit+0x3c8>
        {
          len = ep->maxpacket;
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	6a1a      	ldr	r2, [r3, #32]
 80024ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024d0:	1ad2      	subs	r2, r2, r3
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	621a      	str	r2, [r3, #32]
 80024d6:	e016      	b.n	8002506 <HAL_PCD_EP_DB_Transmit+0x3f6>
        }
        else if (ep->xfer_len_db == 0U)
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d108      	bne.n	80024f2 <HAL_PCD_EP_DB_Transmit+0x3e2>
        {
          len = TxByteNbre;
 80024e0:	2348      	movs	r3, #72	; 0x48
 80024e2:	18fb      	adds	r3, r7, r3
 80024e4:	881b      	ldrh	r3, [r3, #0]
 80024e6:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	2224      	movs	r2, #36	; 0x24
 80024ec:	2100      	movs	r1, #0
 80024ee:	5499      	strb	r1, [r3, r2]
 80024f0:	e009      	b.n	8002506 <HAL_PCD_EP_DB_Transmit+0x3f6>
        }
        else
        {
          len = ep->xfer_len_db;
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	6a1b      	ldr	r3, [r3, #32]
 80024f6:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	2200      	movs	r2, #0
 80024fc:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	2224      	movs	r2, #36	; 0x24
 8002502:	2100      	movs	r1, #0
 8002504:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	643b      	str	r3, [r7, #64]	; 0x40
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	785b      	ldrb	r3, [r3, #1]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d150      	bne.n	80025b6 <HAL_PCD_EP_DB_Transmit+0x4a6>
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	63bb      	str	r3, [r7, #56]	; 0x38
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2250      	movs	r2, #80	; 0x50
 8002520:	5a9b      	ldrh	r3, [r3, r2]
 8002522:	b29b      	uxth	r3, r3
 8002524:	001a      	movs	r2, r3
 8002526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002528:	189b      	adds	r3, r3, r2
 800252a:	63bb      	str	r3, [r7, #56]	; 0x38
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	00da      	lsls	r2, r3, #3
 8002532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002534:	18d3      	adds	r3, r2, r3
 8002536:	4a4a      	ldr	r2, [pc, #296]	; (8002660 <HAL_PCD_EP_DB_Transmit+0x550>)
 8002538:	4694      	mov	ip, r2
 800253a:	4463      	add	r3, ip
 800253c:	637b      	str	r3, [r7, #52]	; 0x34
 800253e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002540:	2b00      	cmp	r3, #0
 8002542:	d110      	bne.n	8002566 <HAL_PCD_EP_DB_Transmit+0x456>
 8002544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002546:	881b      	ldrh	r3, [r3, #0]
 8002548:	b29b      	uxth	r3, r3
 800254a:	4a46      	ldr	r2, [pc, #280]	; (8002664 <HAL_PCD_EP_DB_Transmit+0x554>)
 800254c:	4013      	ands	r3, r2
 800254e:	b29a      	uxth	r2, r3
 8002550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002552:	801a      	strh	r2, [r3, #0]
 8002554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002556:	881b      	ldrh	r3, [r3, #0]
 8002558:	b29b      	uxth	r3, r3
 800255a:	4a43      	ldr	r2, [pc, #268]	; (8002668 <HAL_PCD_EP_DB_Transmit+0x558>)
 800255c:	4313      	orrs	r3, r2
 800255e:	b29a      	uxth	r2, r3
 8002560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002562:	801a      	strh	r2, [r3, #0]
 8002564:	e041      	b.n	80025ea <HAL_PCD_EP_DB_Transmit+0x4da>
 8002566:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002568:	2b3e      	cmp	r3, #62	; 0x3e
 800256a:	d810      	bhi.n	800258e <HAL_PCD_EP_DB_Transmit+0x47e>
 800256c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800256e:	085b      	lsrs	r3, r3, #1
 8002570:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002572:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002574:	2201      	movs	r2, #1
 8002576:	4013      	ands	r3, r2
 8002578:	d002      	beq.n	8002580 <HAL_PCD_EP_DB_Transmit+0x470>
 800257a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800257c:	3301      	adds	r3, #1
 800257e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002580:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002582:	b29b      	uxth	r3, r3
 8002584:	029b      	lsls	r3, r3, #10
 8002586:	b29a      	uxth	r2, r3
 8002588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800258a:	801a      	strh	r2, [r3, #0]
 800258c:	e02d      	b.n	80025ea <HAL_PCD_EP_DB_Transmit+0x4da>
 800258e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002590:	095b      	lsrs	r3, r3, #5
 8002592:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002594:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002596:	221f      	movs	r2, #31
 8002598:	4013      	ands	r3, r2
 800259a:	d102      	bne.n	80025a2 <HAL_PCD_EP_DB_Transmit+0x492>
 800259c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800259e:	3b01      	subs	r3, #1
 80025a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	029b      	lsls	r3, r3, #10
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	4a2f      	ldr	r2, [pc, #188]	; (8002668 <HAL_PCD_EP_DB_Transmit+0x558>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	b29a      	uxth	r2, r3
 80025b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025b2:	801a      	strh	r2, [r3, #0]
 80025b4:	e019      	b.n	80025ea <HAL_PCD_EP_DB_Transmit+0x4da>
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	785b      	ldrb	r3, [r3, #1]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d115      	bne.n	80025ea <HAL_PCD_EP_DB_Transmit+0x4da>
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2250      	movs	r2, #80	; 0x50
 80025c4:	5a9b      	ldrh	r3, [r3, r2]
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	001a      	movs	r2, r3
 80025ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025cc:	189b      	adds	r3, r3, r2
 80025ce:	643b      	str	r3, [r7, #64]	; 0x40
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	00da      	lsls	r2, r3, #3
 80025d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025d8:	18d3      	adds	r3, r2, r3
 80025da:	4a21      	ldr	r2, [pc, #132]	; (8002660 <HAL_PCD_EP_DB_Transmit+0x550>)
 80025dc:	4694      	mov	ip, r2
 80025de:	4463      	add	r3, ip
 80025e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025e4:	b29a      	uxth	r2, r3
 80025e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025e8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6818      	ldr	r0, [r3, #0]
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	6959      	ldr	r1, [r3, #20]
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	895a      	ldrh	r2, [r3, #10]
 80025f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	f003 fd2f 	bl	800605c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	001a      	movs	r2, r3
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	18d3      	adds	r3, r2, r3
 800260c:	881b      	ldrh	r3, [r3, #0]
 800260e:	b29a      	uxth	r2, r3
 8002610:	2014      	movs	r0, #20
 8002612:	183b      	adds	r3, r7, r0
 8002614:	4915      	ldr	r1, [pc, #84]	; (800266c <HAL_PCD_EP_DB_Transmit+0x55c>)
 8002616:	400a      	ands	r2, r1
 8002618:	801a      	strh	r2, [r3, #0]
 800261a:	183b      	adds	r3, r7, r0
 800261c:	183a      	adds	r2, r7, r0
 800261e:	8812      	ldrh	r2, [r2, #0]
 8002620:	2110      	movs	r1, #16
 8002622:	404a      	eors	r2, r1
 8002624:	801a      	strh	r2, [r3, #0]
 8002626:	183b      	adds	r3, r7, r0
 8002628:	183a      	adds	r2, r7, r0
 800262a:	8812      	ldrh	r2, [r2, #0]
 800262c:	2120      	movs	r1, #32
 800262e:	404a      	eors	r2, r1
 8002630:	801a      	strh	r2, [r3, #0]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	001a      	movs	r2, r3
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	18d3      	adds	r3, r2, r3
 8002640:	183a      	adds	r2, r7, r0
 8002642:	8812      	ldrh	r2, [r2, #0]
 8002644:	490a      	ldr	r1, [pc, #40]	; (8002670 <HAL_PCD_EP_DB_Transmit+0x560>)
 8002646:	430a      	orrs	r2, r1
 8002648:	b292      	uxth	r2, r2
 800264a:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 800264c:	2300      	movs	r3, #0
}
 800264e:	0018      	movs	r0, r3
 8002650:	46bd      	mov	sp, r7
 8002652:	b014      	add	sp, #80	; 0x50
 8002654:	bd80      	pop	{r7, pc}
 8002656:	46c0      	nop			; (mov r8, r8)
 8002658:	ffff8f8f 	.word	0xffff8f8f
 800265c:	ffffc080 	.word	0xffffc080
 8002660:	00000406 	.word	0x00000406
 8002664:	ffff83ff 	.word	0xffff83ff
 8002668:	ffff8000 	.word	0xffff8000
 800266c:	ffff8fbf 	.word	0xffff8fbf
 8002670:	ffff8080 	.word	0xffff8080

08002674 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	000a      	movs	r2, r1
 800267e:	1cfb      	adds	r3, r7, #3
 8002680:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002682:	46c0      	nop			; (mov r8, r8)
 8002684:	46bd      	mov	sp, r7
 8002686:	b002      	add	sp, #8
 8002688:	bd80      	pop	{r7, pc}
	...

0800268c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b088      	sub	sp, #32
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d102      	bne.n	80026a0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	f000 fb76 	bl	8002d8c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2201      	movs	r2, #1
 80026a6:	4013      	ands	r3, r2
 80026a8:	d100      	bne.n	80026ac <HAL_RCC_OscConfig+0x20>
 80026aa:	e08e      	b.n	80027ca <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80026ac:	4bc5      	ldr	r3, [pc, #788]	; (80029c4 <HAL_RCC_OscConfig+0x338>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	220c      	movs	r2, #12
 80026b2:	4013      	ands	r3, r2
 80026b4:	2b04      	cmp	r3, #4
 80026b6:	d00e      	beq.n	80026d6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80026b8:	4bc2      	ldr	r3, [pc, #776]	; (80029c4 <HAL_RCC_OscConfig+0x338>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	220c      	movs	r2, #12
 80026be:	4013      	ands	r3, r2
 80026c0:	2b08      	cmp	r3, #8
 80026c2:	d117      	bne.n	80026f4 <HAL_RCC_OscConfig+0x68>
 80026c4:	4bbf      	ldr	r3, [pc, #764]	; (80029c4 <HAL_RCC_OscConfig+0x338>)
 80026c6:	685a      	ldr	r2, [r3, #4]
 80026c8:	23c0      	movs	r3, #192	; 0xc0
 80026ca:	025b      	lsls	r3, r3, #9
 80026cc:	401a      	ands	r2, r3
 80026ce:	2380      	movs	r3, #128	; 0x80
 80026d0:	025b      	lsls	r3, r3, #9
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d10e      	bne.n	80026f4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026d6:	4bbb      	ldr	r3, [pc, #748]	; (80029c4 <HAL_RCC_OscConfig+0x338>)
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	2380      	movs	r3, #128	; 0x80
 80026dc:	029b      	lsls	r3, r3, #10
 80026de:	4013      	ands	r3, r2
 80026e0:	d100      	bne.n	80026e4 <HAL_RCC_OscConfig+0x58>
 80026e2:	e071      	b.n	80027c8 <HAL_RCC_OscConfig+0x13c>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d000      	beq.n	80026ee <HAL_RCC_OscConfig+0x62>
 80026ec:	e06c      	b.n	80027c8 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	f000 fb4c 	bl	8002d8c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d107      	bne.n	800270c <HAL_RCC_OscConfig+0x80>
 80026fc:	4bb1      	ldr	r3, [pc, #708]	; (80029c4 <HAL_RCC_OscConfig+0x338>)
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	4bb0      	ldr	r3, [pc, #704]	; (80029c4 <HAL_RCC_OscConfig+0x338>)
 8002702:	2180      	movs	r1, #128	; 0x80
 8002704:	0249      	lsls	r1, r1, #9
 8002706:	430a      	orrs	r2, r1
 8002708:	601a      	str	r2, [r3, #0]
 800270a:	e02f      	b.n	800276c <HAL_RCC_OscConfig+0xe0>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d10c      	bne.n	800272e <HAL_RCC_OscConfig+0xa2>
 8002714:	4bab      	ldr	r3, [pc, #684]	; (80029c4 <HAL_RCC_OscConfig+0x338>)
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	4baa      	ldr	r3, [pc, #680]	; (80029c4 <HAL_RCC_OscConfig+0x338>)
 800271a:	49ab      	ldr	r1, [pc, #684]	; (80029c8 <HAL_RCC_OscConfig+0x33c>)
 800271c:	400a      	ands	r2, r1
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	4ba8      	ldr	r3, [pc, #672]	; (80029c4 <HAL_RCC_OscConfig+0x338>)
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	4ba7      	ldr	r3, [pc, #668]	; (80029c4 <HAL_RCC_OscConfig+0x338>)
 8002726:	49a9      	ldr	r1, [pc, #676]	; (80029cc <HAL_RCC_OscConfig+0x340>)
 8002728:	400a      	ands	r2, r1
 800272a:	601a      	str	r2, [r3, #0]
 800272c:	e01e      	b.n	800276c <HAL_RCC_OscConfig+0xe0>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	2b05      	cmp	r3, #5
 8002734:	d10e      	bne.n	8002754 <HAL_RCC_OscConfig+0xc8>
 8002736:	4ba3      	ldr	r3, [pc, #652]	; (80029c4 <HAL_RCC_OscConfig+0x338>)
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	4ba2      	ldr	r3, [pc, #648]	; (80029c4 <HAL_RCC_OscConfig+0x338>)
 800273c:	2180      	movs	r1, #128	; 0x80
 800273e:	02c9      	lsls	r1, r1, #11
 8002740:	430a      	orrs	r2, r1
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	4b9f      	ldr	r3, [pc, #636]	; (80029c4 <HAL_RCC_OscConfig+0x338>)
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	4b9e      	ldr	r3, [pc, #632]	; (80029c4 <HAL_RCC_OscConfig+0x338>)
 800274a:	2180      	movs	r1, #128	; 0x80
 800274c:	0249      	lsls	r1, r1, #9
 800274e:	430a      	orrs	r2, r1
 8002750:	601a      	str	r2, [r3, #0]
 8002752:	e00b      	b.n	800276c <HAL_RCC_OscConfig+0xe0>
 8002754:	4b9b      	ldr	r3, [pc, #620]	; (80029c4 <HAL_RCC_OscConfig+0x338>)
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	4b9a      	ldr	r3, [pc, #616]	; (80029c4 <HAL_RCC_OscConfig+0x338>)
 800275a:	499b      	ldr	r1, [pc, #620]	; (80029c8 <HAL_RCC_OscConfig+0x33c>)
 800275c:	400a      	ands	r2, r1
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	4b98      	ldr	r3, [pc, #608]	; (80029c4 <HAL_RCC_OscConfig+0x338>)
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	4b97      	ldr	r3, [pc, #604]	; (80029c4 <HAL_RCC_OscConfig+0x338>)
 8002766:	4999      	ldr	r1, [pc, #612]	; (80029cc <HAL_RCC_OscConfig+0x340>)
 8002768:	400a      	ands	r2, r1
 800276a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d014      	beq.n	800279e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002774:	f7fe f990 	bl	8000a98 <HAL_GetTick>
 8002778:	0003      	movs	r3, r0
 800277a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800277c:	e008      	b.n	8002790 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800277e:	f7fe f98b 	bl	8000a98 <HAL_GetTick>
 8002782:	0002      	movs	r2, r0
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b64      	cmp	r3, #100	; 0x64
 800278a:	d901      	bls.n	8002790 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e2fd      	b.n	8002d8c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002790:	4b8c      	ldr	r3, [pc, #560]	; (80029c4 <HAL_RCC_OscConfig+0x338>)
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	2380      	movs	r3, #128	; 0x80
 8002796:	029b      	lsls	r3, r3, #10
 8002798:	4013      	ands	r3, r2
 800279a:	d0f0      	beq.n	800277e <HAL_RCC_OscConfig+0xf2>
 800279c:	e015      	b.n	80027ca <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800279e:	f7fe f97b 	bl	8000a98 <HAL_GetTick>
 80027a2:	0003      	movs	r3, r0
 80027a4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027a6:	e008      	b.n	80027ba <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027a8:	f7fe f976 	bl	8000a98 <HAL_GetTick>
 80027ac:	0002      	movs	r2, r0
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b64      	cmp	r3, #100	; 0x64
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e2e8      	b.n	8002d8c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ba:	4b82      	ldr	r3, [pc, #520]	; (80029c4 <HAL_RCC_OscConfig+0x338>)
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	2380      	movs	r3, #128	; 0x80
 80027c0:	029b      	lsls	r3, r3, #10
 80027c2:	4013      	ands	r3, r2
 80027c4:	d1f0      	bne.n	80027a8 <HAL_RCC_OscConfig+0x11c>
 80027c6:	e000      	b.n	80027ca <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027c8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2202      	movs	r2, #2
 80027d0:	4013      	ands	r3, r2
 80027d2:	d100      	bne.n	80027d6 <HAL_RCC_OscConfig+0x14a>
 80027d4:	e06c      	b.n	80028b0 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80027d6:	4b7b      	ldr	r3, [pc, #492]	; (80029c4 <HAL_RCC_OscConfig+0x338>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	220c      	movs	r2, #12
 80027dc:	4013      	ands	r3, r2
 80027de:	d00e      	beq.n	80027fe <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80027e0:	4b78      	ldr	r3, [pc, #480]	; (80029c4 <HAL_RCC_OscConfig+0x338>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	220c      	movs	r2, #12
 80027e6:	4013      	ands	r3, r2
 80027e8:	2b08      	cmp	r3, #8
 80027ea:	d11f      	bne.n	800282c <HAL_RCC_OscConfig+0x1a0>
 80027ec:	4b75      	ldr	r3, [pc, #468]	; (80029c4 <HAL_RCC_OscConfig+0x338>)
 80027ee:	685a      	ldr	r2, [r3, #4]
 80027f0:	23c0      	movs	r3, #192	; 0xc0
 80027f2:	025b      	lsls	r3, r3, #9
 80027f4:	401a      	ands	r2, r3
 80027f6:	2380      	movs	r3, #128	; 0x80
 80027f8:	021b      	lsls	r3, r3, #8
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d116      	bne.n	800282c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027fe:	4b71      	ldr	r3, [pc, #452]	; (80029c4 <HAL_RCC_OscConfig+0x338>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2202      	movs	r2, #2
 8002804:	4013      	ands	r3, r2
 8002806:	d005      	beq.n	8002814 <HAL_RCC_OscConfig+0x188>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	2b01      	cmp	r3, #1
 800280e:	d001      	beq.n	8002814 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e2bb      	b.n	8002d8c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002814:	4b6b      	ldr	r3, [pc, #428]	; (80029c4 <HAL_RCC_OscConfig+0x338>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	22f8      	movs	r2, #248	; 0xf8
 800281a:	4393      	bics	r3, r2
 800281c:	0019      	movs	r1, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	00da      	lsls	r2, r3, #3
 8002824:	4b67      	ldr	r3, [pc, #412]	; (80029c4 <HAL_RCC_OscConfig+0x338>)
 8002826:	430a      	orrs	r2, r1
 8002828:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800282a:	e041      	b.n	80028b0 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d024      	beq.n	800287e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002834:	4b63      	ldr	r3, [pc, #396]	; (80029c4 <HAL_RCC_OscConfig+0x338>)
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	4b62      	ldr	r3, [pc, #392]	; (80029c4 <HAL_RCC_OscConfig+0x338>)
 800283a:	2101      	movs	r1, #1
 800283c:	430a      	orrs	r2, r1
 800283e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002840:	f7fe f92a 	bl	8000a98 <HAL_GetTick>
 8002844:	0003      	movs	r3, r0
 8002846:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002848:	e008      	b.n	800285c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800284a:	f7fe f925 	bl	8000a98 <HAL_GetTick>
 800284e:	0002      	movs	r2, r0
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	2b02      	cmp	r3, #2
 8002856:	d901      	bls.n	800285c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e297      	b.n	8002d8c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800285c:	4b59      	ldr	r3, [pc, #356]	; (80029c4 <HAL_RCC_OscConfig+0x338>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2202      	movs	r2, #2
 8002862:	4013      	ands	r3, r2
 8002864:	d0f1      	beq.n	800284a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002866:	4b57      	ldr	r3, [pc, #348]	; (80029c4 <HAL_RCC_OscConfig+0x338>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	22f8      	movs	r2, #248	; 0xf8
 800286c:	4393      	bics	r3, r2
 800286e:	0019      	movs	r1, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	691b      	ldr	r3, [r3, #16]
 8002874:	00da      	lsls	r2, r3, #3
 8002876:	4b53      	ldr	r3, [pc, #332]	; (80029c4 <HAL_RCC_OscConfig+0x338>)
 8002878:	430a      	orrs	r2, r1
 800287a:	601a      	str	r2, [r3, #0]
 800287c:	e018      	b.n	80028b0 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800287e:	4b51      	ldr	r3, [pc, #324]	; (80029c4 <HAL_RCC_OscConfig+0x338>)
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	4b50      	ldr	r3, [pc, #320]	; (80029c4 <HAL_RCC_OscConfig+0x338>)
 8002884:	2101      	movs	r1, #1
 8002886:	438a      	bics	r2, r1
 8002888:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800288a:	f7fe f905 	bl	8000a98 <HAL_GetTick>
 800288e:	0003      	movs	r3, r0
 8002890:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002892:	e008      	b.n	80028a6 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002894:	f7fe f900 	bl	8000a98 <HAL_GetTick>
 8002898:	0002      	movs	r2, r0
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e272      	b.n	8002d8c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028a6:	4b47      	ldr	r3, [pc, #284]	; (80029c4 <HAL_RCC_OscConfig+0x338>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2202      	movs	r2, #2
 80028ac:	4013      	ands	r3, r2
 80028ae:	d1f1      	bne.n	8002894 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2208      	movs	r2, #8
 80028b6:	4013      	ands	r3, r2
 80028b8:	d036      	beq.n	8002928 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	69db      	ldr	r3, [r3, #28]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d019      	beq.n	80028f6 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028c2:	4b40      	ldr	r3, [pc, #256]	; (80029c4 <HAL_RCC_OscConfig+0x338>)
 80028c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028c6:	4b3f      	ldr	r3, [pc, #252]	; (80029c4 <HAL_RCC_OscConfig+0x338>)
 80028c8:	2101      	movs	r1, #1
 80028ca:	430a      	orrs	r2, r1
 80028cc:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ce:	f7fe f8e3 	bl	8000a98 <HAL_GetTick>
 80028d2:	0003      	movs	r3, r0
 80028d4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028d6:	e008      	b.n	80028ea <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028d8:	f7fe f8de 	bl	8000a98 <HAL_GetTick>
 80028dc:	0002      	movs	r2, r0
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e250      	b.n	8002d8c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ea:	4b36      	ldr	r3, [pc, #216]	; (80029c4 <HAL_RCC_OscConfig+0x338>)
 80028ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ee:	2202      	movs	r2, #2
 80028f0:	4013      	ands	r3, r2
 80028f2:	d0f1      	beq.n	80028d8 <HAL_RCC_OscConfig+0x24c>
 80028f4:	e018      	b.n	8002928 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028f6:	4b33      	ldr	r3, [pc, #204]	; (80029c4 <HAL_RCC_OscConfig+0x338>)
 80028f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028fa:	4b32      	ldr	r3, [pc, #200]	; (80029c4 <HAL_RCC_OscConfig+0x338>)
 80028fc:	2101      	movs	r1, #1
 80028fe:	438a      	bics	r2, r1
 8002900:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002902:	f7fe f8c9 	bl	8000a98 <HAL_GetTick>
 8002906:	0003      	movs	r3, r0
 8002908:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800290a:	e008      	b.n	800291e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800290c:	f7fe f8c4 	bl	8000a98 <HAL_GetTick>
 8002910:	0002      	movs	r2, r0
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b02      	cmp	r3, #2
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e236      	b.n	8002d8c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800291e:	4b29      	ldr	r3, [pc, #164]	; (80029c4 <HAL_RCC_OscConfig+0x338>)
 8002920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002922:	2202      	movs	r2, #2
 8002924:	4013      	ands	r3, r2
 8002926:	d1f1      	bne.n	800290c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2204      	movs	r2, #4
 800292e:	4013      	ands	r3, r2
 8002930:	d100      	bne.n	8002934 <HAL_RCC_OscConfig+0x2a8>
 8002932:	e0b5      	b.n	8002aa0 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002934:	201f      	movs	r0, #31
 8002936:	183b      	adds	r3, r7, r0
 8002938:	2200      	movs	r2, #0
 800293a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800293c:	4b21      	ldr	r3, [pc, #132]	; (80029c4 <HAL_RCC_OscConfig+0x338>)
 800293e:	69da      	ldr	r2, [r3, #28]
 8002940:	2380      	movs	r3, #128	; 0x80
 8002942:	055b      	lsls	r3, r3, #21
 8002944:	4013      	ands	r3, r2
 8002946:	d110      	bne.n	800296a <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002948:	4b1e      	ldr	r3, [pc, #120]	; (80029c4 <HAL_RCC_OscConfig+0x338>)
 800294a:	69da      	ldr	r2, [r3, #28]
 800294c:	4b1d      	ldr	r3, [pc, #116]	; (80029c4 <HAL_RCC_OscConfig+0x338>)
 800294e:	2180      	movs	r1, #128	; 0x80
 8002950:	0549      	lsls	r1, r1, #21
 8002952:	430a      	orrs	r2, r1
 8002954:	61da      	str	r2, [r3, #28]
 8002956:	4b1b      	ldr	r3, [pc, #108]	; (80029c4 <HAL_RCC_OscConfig+0x338>)
 8002958:	69da      	ldr	r2, [r3, #28]
 800295a:	2380      	movs	r3, #128	; 0x80
 800295c:	055b      	lsls	r3, r3, #21
 800295e:	4013      	ands	r3, r2
 8002960:	60fb      	str	r3, [r7, #12]
 8002962:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002964:	183b      	adds	r3, r7, r0
 8002966:	2201      	movs	r2, #1
 8002968:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800296a:	4b19      	ldr	r3, [pc, #100]	; (80029d0 <HAL_RCC_OscConfig+0x344>)
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	2380      	movs	r3, #128	; 0x80
 8002970:	005b      	lsls	r3, r3, #1
 8002972:	4013      	ands	r3, r2
 8002974:	d11a      	bne.n	80029ac <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002976:	4b16      	ldr	r3, [pc, #88]	; (80029d0 <HAL_RCC_OscConfig+0x344>)
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	4b15      	ldr	r3, [pc, #84]	; (80029d0 <HAL_RCC_OscConfig+0x344>)
 800297c:	2180      	movs	r1, #128	; 0x80
 800297e:	0049      	lsls	r1, r1, #1
 8002980:	430a      	orrs	r2, r1
 8002982:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002984:	f7fe f888 	bl	8000a98 <HAL_GetTick>
 8002988:	0003      	movs	r3, r0
 800298a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800298c:	e008      	b.n	80029a0 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800298e:	f7fe f883 	bl	8000a98 <HAL_GetTick>
 8002992:	0002      	movs	r2, r0
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	2b64      	cmp	r3, #100	; 0x64
 800299a:	d901      	bls.n	80029a0 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e1f5      	b.n	8002d8c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029a0:	4b0b      	ldr	r3, [pc, #44]	; (80029d0 <HAL_RCC_OscConfig+0x344>)
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	2380      	movs	r3, #128	; 0x80
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	4013      	ands	r3, r2
 80029aa:	d0f0      	beq.n	800298e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d10f      	bne.n	80029d4 <HAL_RCC_OscConfig+0x348>
 80029b4:	4b03      	ldr	r3, [pc, #12]	; (80029c4 <HAL_RCC_OscConfig+0x338>)
 80029b6:	6a1a      	ldr	r2, [r3, #32]
 80029b8:	4b02      	ldr	r3, [pc, #8]	; (80029c4 <HAL_RCC_OscConfig+0x338>)
 80029ba:	2101      	movs	r1, #1
 80029bc:	430a      	orrs	r2, r1
 80029be:	621a      	str	r2, [r3, #32]
 80029c0:	e036      	b.n	8002a30 <HAL_RCC_OscConfig+0x3a4>
 80029c2:	46c0      	nop			; (mov r8, r8)
 80029c4:	40021000 	.word	0x40021000
 80029c8:	fffeffff 	.word	0xfffeffff
 80029cc:	fffbffff 	.word	0xfffbffff
 80029d0:	40007000 	.word	0x40007000
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d10c      	bne.n	80029f6 <HAL_RCC_OscConfig+0x36a>
 80029dc:	4bca      	ldr	r3, [pc, #808]	; (8002d08 <HAL_RCC_OscConfig+0x67c>)
 80029de:	6a1a      	ldr	r2, [r3, #32]
 80029e0:	4bc9      	ldr	r3, [pc, #804]	; (8002d08 <HAL_RCC_OscConfig+0x67c>)
 80029e2:	2101      	movs	r1, #1
 80029e4:	438a      	bics	r2, r1
 80029e6:	621a      	str	r2, [r3, #32]
 80029e8:	4bc7      	ldr	r3, [pc, #796]	; (8002d08 <HAL_RCC_OscConfig+0x67c>)
 80029ea:	6a1a      	ldr	r2, [r3, #32]
 80029ec:	4bc6      	ldr	r3, [pc, #792]	; (8002d08 <HAL_RCC_OscConfig+0x67c>)
 80029ee:	2104      	movs	r1, #4
 80029f0:	438a      	bics	r2, r1
 80029f2:	621a      	str	r2, [r3, #32]
 80029f4:	e01c      	b.n	8002a30 <HAL_RCC_OscConfig+0x3a4>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	2b05      	cmp	r3, #5
 80029fc:	d10c      	bne.n	8002a18 <HAL_RCC_OscConfig+0x38c>
 80029fe:	4bc2      	ldr	r3, [pc, #776]	; (8002d08 <HAL_RCC_OscConfig+0x67c>)
 8002a00:	6a1a      	ldr	r2, [r3, #32]
 8002a02:	4bc1      	ldr	r3, [pc, #772]	; (8002d08 <HAL_RCC_OscConfig+0x67c>)
 8002a04:	2104      	movs	r1, #4
 8002a06:	430a      	orrs	r2, r1
 8002a08:	621a      	str	r2, [r3, #32]
 8002a0a:	4bbf      	ldr	r3, [pc, #764]	; (8002d08 <HAL_RCC_OscConfig+0x67c>)
 8002a0c:	6a1a      	ldr	r2, [r3, #32]
 8002a0e:	4bbe      	ldr	r3, [pc, #760]	; (8002d08 <HAL_RCC_OscConfig+0x67c>)
 8002a10:	2101      	movs	r1, #1
 8002a12:	430a      	orrs	r2, r1
 8002a14:	621a      	str	r2, [r3, #32]
 8002a16:	e00b      	b.n	8002a30 <HAL_RCC_OscConfig+0x3a4>
 8002a18:	4bbb      	ldr	r3, [pc, #748]	; (8002d08 <HAL_RCC_OscConfig+0x67c>)
 8002a1a:	6a1a      	ldr	r2, [r3, #32]
 8002a1c:	4bba      	ldr	r3, [pc, #744]	; (8002d08 <HAL_RCC_OscConfig+0x67c>)
 8002a1e:	2101      	movs	r1, #1
 8002a20:	438a      	bics	r2, r1
 8002a22:	621a      	str	r2, [r3, #32]
 8002a24:	4bb8      	ldr	r3, [pc, #736]	; (8002d08 <HAL_RCC_OscConfig+0x67c>)
 8002a26:	6a1a      	ldr	r2, [r3, #32]
 8002a28:	4bb7      	ldr	r3, [pc, #732]	; (8002d08 <HAL_RCC_OscConfig+0x67c>)
 8002a2a:	2104      	movs	r1, #4
 8002a2c:	438a      	bics	r2, r1
 8002a2e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d014      	beq.n	8002a62 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a38:	f7fe f82e 	bl	8000a98 <HAL_GetTick>
 8002a3c:	0003      	movs	r3, r0
 8002a3e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a40:	e009      	b.n	8002a56 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a42:	f7fe f829 	bl	8000a98 <HAL_GetTick>
 8002a46:	0002      	movs	r2, r0
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	4aaf      	ldr	r2, [pc, #700]	; (8002d0c <HAL_RCC_OscConfig+0x680>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e19a      	b.n	8002d8c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a56:	4bac      	ldr	r3, [pc, #688]	; (8002d08 <HAL_RCC_OscConfig+0x67c>)
 8002a58:	6a1b      	ldr	r3, [r3, #32]
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	d0f0      	beq.n	8002a42 <HAL_RCC_OscConfig+0x3b6>
 8002a60:	e013      	b.n	8002a8a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a62:	f7fe f819 	bl	8000a98 <HAL_GetTick>
 8002a66:	0003      	movs	r3, r0
 8002a68:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a6a:	e009      	b.n	8002a80 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a6c:	f7fe f814 	bl	8000a98 <HAL_GetTick>
 8002a70:	0002      	movs	r2, r0
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	4aa5      	ldr	r2, [pc, #660]	; (8002d0c <HAL_RCC_OscConfig+0x680>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e185      	b.n	8002d8c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a80:	4ba1      	ldr	r3, [pc, #644]	; (8002d08 <HAL_RCC_OscConfig+0x67c>)
 8002a82:	6a1b      	ldr	r3, [r3, #32]
 8002a84:	2202      	movs	r2, #2
 8002a86:	4013      	ands	r3, r2
 8002a88:	d1f0      	bne.n	8002a6c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a8a:	231f      	movs	r3, #31
 8002a8c:	18fb      	adds	r3, r7, r3
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d105      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a94:	4b9c      	ldr	r3, [pc, #624]	; (8002d08 <HAL_RCC_OscConfig+0x67c>)
 8002a96:	69da      	ldr	r2, [r3, #28]
 8002a98:	4b9b      	ldr	r3, [pc, #620]	; (8002d08 <HAL_RCC_OscConfig+0x67c>)
 8002a9a:	499d      	ldr	r1, [pc, #628]	; (8002d10 <HAL_RCC_OscConfig+0x684>)
 8002a9c:	400a      	ands	r2, r1
 8002a9e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2210      	movs	r2, #16
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	d063      	beq.n	8002b72 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	695b      	ldr	r3, [r3, #20]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d12a      	bne.n	8002b08 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002ab2:	4b95      	ldr	r3, [pc, #596]	; (8002d08 <HAL_RCC_OscConfig+0x67c>)
 8002ab4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ab6:	4b94      	ldr	r3, [pc, #592]	; (8002d08 <HAL_RCC_OscConfig+0x67c>)
 8002ab8:	2104      	movs	r1, #4
 8002aba:	430a      	orrs	r2, r1
 8002abc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002abe:	4b92      	ldr	r3, [pc, #584]	; (8002d08 <HAL_RCC_OscConfig+0x67c>)
 8002ac0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ac2:	4b91      	ldr	r3, [pc, #580]	; (8002d08 <HAL_RCC_OscConfig+0x67c>)
 8002ac4:	2101      	movs	r1, #1
 8002ac6:	430a      	orrs	r2, r1
 8002ac8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aca:	f7fd ffe5 	bl	8000a98 <HAL_GetTick>
 8002ace:	0003      	movs	r3, r0
 8002ad0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002ad2:	e008      	b.n	8002ae6 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002ad4:	f7fd ffe0 	bl	8000a98 <HAL_GetTick>
 8002ad8:	0002      	movs	r2, r0
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e152      	b.n	8002d8c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002ae6:	4b88      	ldr	r3, [pc, #544]	; (8002d08 <HAL_RCC_OscConfig+0x67c>)
 8002ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aea:	2202      	movs	r2, #2
 8002aec:	4013      	ands	r3, r2
 8002aee:	d0f1      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002af0:	4b85      	ldr	r3, [pc, #532]	; (8002d08 <HAL_RCC_OscConfig+0x67c>)
 8002af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002af4:	22f8      	movs	r2, #248	; 0xf8
 8002af6:	4393      	bics	r3, r2
 8002af8:	0019      	movs	r1, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	00da      	lsls	r2, r3, #3
 8002b00:	4b81      	ldr	r3, [pc, #516]	; (8002d08 <HAL_RCC_OscConfig+0x67c>)
 8002b02:	430a      	orrs	r2, r1
 8002b04:	635a      	str	r2, [r3, #52]	; 0x34
 8002b06:	e034      	b.n	8002b72 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	695b      	ldr	r3, [r3, #20]
 8002b0c:	3305      	adds	r3, #5
 8002b0e:	d111      	bne.n	8002b34 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002b10:	4b7d      	ldr	r3, [pc, #500]	; (8002d08 <HAL_RCC_OscConfig+0x67c>)
 8002b12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b14:	4b7c      	ldr	r3, [pc, #496]	; (8002d08 <HAL_RCC_OscConfig+0x67c>)
 8002b16:	2104      	movs	r1, #4
 8002b18:	438a      	bics	r2, r1
 8002b1a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002b1c:	4b7a      	ldr	r3, [pc, #488]	; (8002d08 <HAL_RCC_OscConfig+0x67c>)
 8002b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b20:	22f8      	movs	r2, #248	; 0xf8
 8002b22:	4393      	bics	r3, r2
 8002b24:	0019      	movs	r1, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	699b      	ldr	r3, [r3, #24]
 8002b2a:	00da      	lsls	r2, r3, #3
 8002b2c:	4b76      	ldr	r3, [pc, #472]	; (8002d08 <HAL_RCC_OscConfig+0x67c>)
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	635a      	str	r2, [r3, #52]	; 0x34
 8002b32:	e01e      	b.n	8002b72 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002b34:	4b74      	ldr	r3, [pc, #464]	; (8002d08 <HAL_RCC_OscConfig+0x67c>)
 8002b36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b38:	4b73      	ldr	r3, [pc, #460]	; (8002d08 <HAL_RCC_OscConfig+0x67c>)
 8002b3a:	2104      	movs	r1, #4
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002b40:	4b71      	ldr	r3, [pc, #452]	; (8002d08 <HAL_RCC_OscConfig+0x67c>)
 8002b42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b44:	4b70      	ldr	r3, [pc, #448]	; (8002d08 <HAL_RCC_OscConfig+0x67c>)
 8002b46:	2101      	movs	r1, #1
 8002b48:	438a      	bics	r2, r1
 8002b4a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b4c:	f7fd ffa4 	bl	8000a98 <HAL_GetTick>
 8002b50:	0003      	movs	r3, r0
 8002b52:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002b54:	e008      	b.n	8002b68 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002b56:	f7fd ff9f 	bl	8000a98 <HAL_GetTick>
 8002b5a:	0002      	movs	r2, r0
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d901      	bls.n	8002b68 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e111      	b.n	8002d8c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002b68:	4b67      	ldr	r3, [pc, #412]	; (8002d08 <HAL_RCC_OscConfig+0x67c>)
 8002b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b6c:	2202      	movs	r2, #2
 8002b6e:	4013      	ands	r3, r2
 8002b70:	d1f1      	bne.n	8002b56 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2220      	movs	r2, #32
 8002b78:	4013      	ands	r3, r2
 8002b7a:	d05c      	beq.n	8002c36 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002b7c:	4b62      	ldr	r3, [pc, #392]	; (8002d08 <HAL_RCC_OscConfig+0x67c>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	220c      	movs	r2, #12
 8002b82:	4013      	ands	r3, r2
 8002b84:	2b0c      	cmp	r3, #12
 8002b86:	d00e      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002b88:	4b5f      	ldr	r3, [pc, #380]	; (8002d08 <HAL_RCC_OscConfig+0x67c>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	220c      	movs	r2, #12
 8002b8e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002b90:	2b08      	cmp	r3, #8
 8002b92:	d114      	bne.n	8002bbe <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002b94:	4b5c      	ldr	r3, [pc, #368]	; (8002d08 <HAL_RCC_OscConfig+0x67c>)
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	23c0      	movs	r3, #192	; 0xc0
 8002b9a:	025b      	lsls	r3, r3, #9
 8002b9c:	401a      	ands	r2, r3
 8002b9e:	23c0      	movs	r3, #192	; 0xc0
 8002ba0:	025b      	lsls	r3, r3, #9
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d10b      	bne.n	8002bbe <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002ba6:	4b58      	ldr	r3, [pc, #352]	; (8002d08 <HAL_RCC_OscConfig+0x67c>)
 8002ba8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002baa:	2380      	movs	r3, #128	; 0x80
 8002bac:	025b      	lsls	r3, r3, #9
 8002bae:	4013      	ands	r3, r2
 8002bb0:	d040      	beq.n	8002c34 <HAL_RCC_OscConfig+0x5a8>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a1b      	ldr	r3, [r3, #32]
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d03c      	beq.n	8002c34 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e0e6      	b.n	8002d8c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a1b      	ldr	r3, [r3, #32]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d01b      	beq.n	8002bfe <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002bc6:	4b50      	ldr	r3, [pc, #320]	; (8002d08 <HAL_RCC_OscConfig+0x67c>)
 8002bc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bca:	4b4f      	ldr	r3, [pc, #316]	; (8002d08 <HAL_RCC_OscConfig+0x67c>)
 8002bcc:	2180      	movs	r1, #128	; 0x80
 8002bce:	0249      	lsls	r1, r1, #9
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd4:	f7fd ff60 	bl	8000a98 <HAL_GetTick>
 8002bd8:	0003      	movs	r3, r0
 8002bda:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002bdc:	e008      	b.n	8002bf0 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002bde:	f7fd ff5b 	bl	8000a98 <HAL_GetTick>
 8002be2:	0002      	movs	r2, r0
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d901      	bls.n	8002bf0 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e0cd      	b.n	8002d8c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002bf0:	4b45      	ldr	r3, [pc, #276]	; (8002d08 <HAL_RCC_OscConfig+0x67c>)
 8002bf2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bf4:	2380      	movs	r3, #128	; 0x80
 8002bf6:	025b      	lsls	r3, r3, #9
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	d0f0      	beq.n	8002bde <HAL_RCC_OscConfig+0x552>
 8002bfc:	e01b      	b.n	8002c36 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002bfe:	4b42      	ldr	r3, [pc, #264]	; (8002d08 <HAL_RCC_OscConfig+0x67c>)
 8002c00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c02:	4b41      	ldr	r3, [pc, #260]	; (8002d08 <HAL_RCC_OscConfig+0x67c>)
 8002c04:	4943      	ldr	r1, [pc, #268]	; (8002d14 <HAL_RCC_OscConfig+0x688>)
 8002c06:	400a      	ands	r2, r1
 8002c08:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c0a:	f7fd ff45 	bl	8000a98 <HAL_GetTick>
 8002c0e:	0003      	movs	r3, r0
 8002c10:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002c12:	e008      	b.n	8002c26 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c14:	f7fd ff40 	bl	8000a98 <HAL_GetTick>
 8002c18:	0002      	movs	r2, r0
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e0b2      	b.n	8002d8c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002c26:	4b38      	ldr	r3, [pc, #224]	; (8002d08 <HAL_RCC_OscConfig+0x67c>)
 8002c28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c2a:	2380      	movs	r3, #128	; 0x80
 8002c2c:	025b      	lsls	r3, r3, #9
 8002c2e:	4013      	ands	r3, r2
 8002c30:	d1f0      	bne.n	8002c14 <HAL_RCC_OscConfig+0x588>
 8002c32:	e000      	b.n	8002c36 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002c34:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d100      	bne.n	8002c40 <HAL_RCC_OscConfig+0x5b4>
 8002c3e:	e0a4      	b.n	8002d8a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c40:	4b31      	ldr	r3, [pc, #196]	; (8002d08 <HAL_RCC_OscConfig+0x67c>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	220c      	movs	r2, #12
 8002c46:	4013      	ands	r3, r2
 8002c48:	2b08      	cmp	r3, #8
 8002c4a:	d100      	bne.n	8002c4e <HAL_RCC_OscConfig+0x5c2>
 8002c4c:	e078      	b.n	8002d40 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d14c      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c56:	4b2c      	ldr	r3, [pc, #176]	; (8002d08 <HAL_RCC_OscConfig+0x67c>)
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	4b2b      	ldr	r3, [pc, #172]	; (8002d08 <HAL_RCC_OscConfig+0x67c>)
 8002c5c:	492e      	ldr	r1, [pc, #184]	; (8002d18 <HAL_RCC_OscConfig+0x68c>)
 8002c5e:	400a      	ands	r2, r1
 8002c60:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c62:	f7fd ff19 	bl	8000a98 <HAL_GetTick>
 8002c66:	0003      	movs	r3, r0
 8002c68:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c6a:	e008      	b.n	8002c7e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c6c:	f7fd ff14 	bl	8000a98 <HAL_GetTick>
 8002c70:	0002      	movs	r2, r0
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e086      	b.n	8002d8c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c7e:	4b22      	ldr	r3, [pc, #136]	; (8002d08 <HAL_RCC_OscConfig+0x67c>)
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	2380      	movs	r3, #128	; 0x80
 8002c84:	049b      	lsls	r3, r3, #18
 8002c86:	4013      	ands	r3, r2
 8002c88:	d1f0      	bne.n	8002c6c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c8a:	4b1f      	ldr	r3, [pc, #124]	; (8002d08 <HAL_RCC_OscConfig+0x67c>)
 8002c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8e:	220f      	movs	r2, #15
 8002c90:	4393      	bics	r3, r2
 8002c92:	0019      	movs	r1, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c98:	4b1b      	ldr	r3, [pc, #108]	; (8002d08 <HAL_RCC_OscConfig+0x67c>)
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c9e:	4b1a      	ldr	r3, [pc, #104]	; (8002d08 <HAL_RCC_OscConfig+0x67c>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	4a1e      	ldr	r2, [pc, #120]	; (8002d1c <HAL_RCC_OscConfig+0x690>)
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	0019      	movs	r1, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb0:	431a      	orrs	r2, r3
 8002cb2:	4b15      	ldr	r3, [pc, #84]	; (8002d08 <HAL_RCC_OscConfig+0x67c>)
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cb8:	4b13      	ldr	r3, [pc, #76]	; (8002d08 <HAL_RCC_OscConfig+0x67c>)
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	4b12      	ldr	r3, [pc, #72]	; (8002d08 <HAL_RCC_OscConfig+0x67c>)
 8002cbe:	2180      	movs	r1, #128	; 0x80
 8002cc0:	0449      	lsls	r1, r1, #17
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc6:	f7fd fee7 	bl	8000a98 <HAL_GetTick>
 8002cca:	0003      	movs	r3, r0
 8002ccc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cce:	e008      	b.n	8002ce2 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cd0:	f7fd fee2 	bl	8000a98 <HAL_GetTick>
 8002cd4:	0002      	movs	r2, r0
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e054      	b.n	8002d8c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ce2:	4b09      	ldr	r3, [pc, #36]	; (8002d08 <HAL_RCC_OscConfig+0x67c>)
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	2380      	movs	r3, #128	; 0x80
 8002ce8:	049b      	lsls	r3, r3, #18
 8002cea:	4013      	ands	r3, r2
 8002cec:	d0f0      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x644>
 8002cee:	e04c      	b.n	8002d8a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cf0:	4b05      	ldr	r3, [pc, #20]	; (8002d08 <HAL_RCC_OscConfig+0x67c>)
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	4b04      	ldr	r3, [pc, #16]	; (8002d08 <HAL_RCC_OscConfig+0x67c>)
 8002cf6:	4908      	ldr	r1, [pc, #32]	; (8002d18 <HAL_RCC_OscConfig+0x68c>)
 8002cf8:	400a      	ands	r2, r1
 8002cfa:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cfc:	f7fd fecc 	bl	8000a98 <HAL_GetTick>
 8002d00:	0003      	movs	r3, r0
 8002d02:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d04:	e015      	b.n	8002d32 <HAL_RCC_OscConfig+0x6a6>
 8002d06:	46c0      	nop			; (mov r8, r8)
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	00001388 	.word	0x00001388
 8002d10:	efffffff 	.word	0xefffffff
 8002d14:	fffeffff 	.word	0xfffeffff
 8002d18:	feffffff 	.word	0xfeffffff
 8002d1c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d20:	f7fd feba 	bl	8000a98 <HAL_GetTick>
 8002d24:	0002      	movs	r2, r0
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e02c      	b.n	8002d8c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d32:	4b18      	ldr	r3, [pc, #96]	; (8002d94 <HAL_RCC_OscConfig+0x708>)
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	2380      	movs	r3, #128	; 0x80
 8002d38:	049b      	lsls	r3, r3, #18
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	d1f0      	bne.n	8002d20 <HAL_RCC_OscConfig+0x694>
 8002d3e:	e024      	b.n	8002d8a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d101      	bne.n	8002d4c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e01f      	b.n	8002d8c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002d4c:	4b11      	ldr	r3, [pc, #68]	; (8002d94 <HAL_RCC_OscConfig+0x708>)
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002d52:	4b10      	ldr	r3, [pc, #64]	; (8002d94 <HAL_RCC_OscConfig+0x708>)
 8002d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d56:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d58:	697a      	ldr	r2, [r7, #20]
 8002d5a:	23c0      	movs	r3, #192	; 0xc0
 8002d5c:	025b      	lsls	r3, r3, #9
 8002d5e:	401a      	ands	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d10e      	bne.n	8002d86 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	220f      	movs	r2, #15
 8002d6c:	401a      	ands	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d107      	bne.n	8002d86 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002d76:	697a      	ldr	r2, [r7, #20]
 8002d78:	23f0      	movs	r3, #240	; 0xf0
 8002d7a:	039b      	lsls	r3, r3, #14
 8002d7c:	401a      	ands	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d001      	beq.n	8002d8a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e000      	b.n	8002d8c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	0018      	movs	r0, r3
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	b008      	add	sp, #32
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	40021000 	.word	0x40021000

08002d98 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d101      	bne.n	8002dac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e0bf      	b.n	8002f2c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002dac:	4b61      	ldr	r3, [pc, #388]	; (8002f34 <HAL_RCC_ClockConfig+0x19c>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2201      	movs	r2, #1
 8002db2:	4013      	ands	r3, r2
 8002db4:	683a      	ldr	r2, [r7, #0]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d911      	bls.n	8002dde <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dba:	4b5e      	ldr	r3, [pc, #376]	; (8002f34 <HAL_RCC_ClockConfig+0x19c>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	4393      	bics	r3, r2
 8002dc2:	0019      	movs	r1, r3
 8002dc4:	4b5b      	ldr	r3, [pc, #364]	; (8002f34 <HAL_RCC_ClockConfig+0x19c>)
 8002dc6:	683a      	ldr	r2, [r7, #0]
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dcc:	4b59      	ldr	r3, [pc, #356]	; (8002f34 <HAL_RCC_ClockConfig+0x19c>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	683a      	ldr	r2, [r7, #0]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d001      	beq.n	8002dde <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e0a6      	b.n	8002f2c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	2202      	movs	r2, #2
 8002de4:	4013      	ands	r3, r2
 8002de6:	d015      	beq.n	8002e14 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2204      	movs	r2, #4
 8002dee:	4013      	ands	r3, r2
 8002df0:	d006      	beq.n	8002e00 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002df2:	4b51      	ldr	r3, [pc, #324]	; (8002f38 <HAL_RCC_ClockConfig+0x1a0>)
 8002df4:	685a      	ldr	r2, [r3, #4]
 8002df6:	4b50      	ldr	r3, [pc, #320]	; (8002f38 <HAL_RCC_ClockConfig+0x1a0>)
 8002df8:	21e0      	movs	r1, #224	; 0xe0
 8002dfa:	00c9      	lsls	r1, r1, #3
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e00:	4b4d      	ldr	r3, [pc, #308]	; (8002f38 <HAL_RCC_ClockConfig+0x1a0>)
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	22f0      	movs	r2, #240	; 0xf0
 8002e06:	4393      	bics	r3, r2
 8002e08:	0019      	movs	r1, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	689a      	ldr	r2, [r3, #8]
 8002e0e:	4b4a      	ldr	r3, [pc, #296]	; (8002f38 <HAL_RCC_ClockConfig+0x1a0>)
 8002e10:	430a      	orrs	r2, r1
 8002e12:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	d04c      	beq.n	8002eb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d107      	bne.n	8002e36 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e26:	4b44      	ldr	r3, [pc, #272]	; (8002f38 <HAL_RCC_ClockConfig+0x1a0>)
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	2380      	movs	r3, #128	; 0x80
 8002e2c:	029b      	lsls	r3, r3, #10
 8002e2e:	4013      	ands	r3, r2
 8002e30:	d120      	bne.n	8002e74 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e07a      	b.n	8002f2c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d107      	bne.n	8002e4e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e3e:	4b3e      	ldr	r3, [pc, #248]	; (8002f38 <HAL_RCC_ClockConfig+0x1a0>)
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	2380      	movs	r3, #128	; 0x80
 8002e44:	049b      	lsls	r3, r3, #18
 8002e46:	4013      	ands	r3, r2
 8002e48:	d114      	bne.n	8002e74 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e06e      	b.n	8002f2c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	2b03      	cmp	r3, #3
 8002e54:	d107      	bne.n	8002e66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002e56:	4b38      	ldr	r3, [pc, #224]	; (8002f38 <HAL_RCC_ClockConfig+0x1a0>)
 8002e58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e5a:	2380      	movs	r3, #128	; 0x80
 8002e5c:	025b      	lsls	r3, r3, #9
 8002e5e:	4013      	ands	r3, r2
 8002e60:	d108      	bne.n	8002e74 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e062      	b.n	8002f2c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e66:	4b34      	ldr	r3, [pc, #208]	; (8002f38 <HAL_RCC_ClockConfig+0x1a0>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2202      	movs	r2, #2
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	d101      	bne.n	8002e74 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e05b      	b.n	8002f2c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e74:	4b30      	ldr	r3, [pc, #192]	; (8002f38 <HAL_RCC_ClockConfig+0x1a0>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	2203      	movs	r2, #3
 8002e7a:	4393      	bics	r3, r2
 8002e7c:	0019      	movs	r1, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685a      	ldr	r2, [r3, #4]
 8002e82:	4b2d      	ldr	r3, [pc, #180]	; (8002f38 <HAL_RCC_ClockConfig+0x1a0>)
 8002e84:	430a      	orrs	r2, r1
 8002e86:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e88:	f7fd fe06 	bl	8000a98 <HAL_GetTick>
 8002e8c:	0003      	movs	r3, r0
 8002e8e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e90:	e009      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e92:	f7fd fe01 	bl	8000a98 <HAL_GetTick>
 8002e96:	0002      	movs	r2, r0
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	4a27      	ldr	r2, [pc, #156]	; (8002f3c <HAL_RCC_ClockConfig+0x1a4>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e042      	b.n	8002f2c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ea6:	4b24      	ldr	r3, [pc, #144]	; (8002f38 <HAL_RCC_ClockConfig+0x1a0>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	220c      	movs	r2, #12
 8002eac:	401a      	ands	r2, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d1ec      	bne.n	8002e92 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002eb8:	4b1e      	ldr	r3, [pc, #120]	; (8002f34 <HAL_RCC_ClockConfig+0x19c>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	683a      	ldr	r2, [r7, #0]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d211      	bcs.n	8002eea <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ec6:	4b1b      	ldr	r3, [pc, #108]	; (8002f34 <HAL_RCC_ClockConfig+0x19c>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	4393      	bics	r3, r2
 8002ece:	0019      	movs	r1, r3
 8002ed0:	4b18      	ldr	r3, [pc, #96]	; (8002f34 <HAL_RCC_ClockConfig+0x19c>)
 8002ed2:	683a      	ldr	r2, [r7, #0]
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ed8:	4b16      	ldr	r3, [pc, #88]	; (8002f34 <HAL_RCC_ClockConfig+0x19c>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2201      	movs	r2, #1
 8002ede:	4013      	ands	r3, r2
 8002ee0:	683a      	ldr	r2, [r7, #0]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d001      	beq.n	8002eea <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e020      	b.n	8002f2c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2204      	movs	r2, #4
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	d009      	beq.n	8002f08 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002ef4:	4b10      	ldr	r3, [pc, #64]	; (8002f38 <HAL_RCC_ClockConfig+0x1a0>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	4a11      	ldr	r2, [pc, #68]	; (8002f40 <HAL_RCC_ClockConfig+0x1a8>)
 8002efa:	4013      	ands	r3, r2
 8002efc:	0019      	movs	r1, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	68da      	ldr	r2, [r3, #12]
 8002f02:	4b0d      	ldr	r3, [pc, #52]	; (8002f38 <HAL_RCC_ClockConfig+0x1a0>)
 8002f04:	430a      	orrs	r2, r1
 8002f06:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002f08:	f000 f820 	bl	8002f4c <HAL_RCC_GetSysClockFreq>
 8002f0c:	0001      	movs	r1, r0
 8002f0e:	4b0a      	ldr	r3, [pc, #40]	; (8002f38 <HAL_RCC_ClockConfig+0x1a0>)
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	091b      	lsrs	r3, r3, #4
 8002f14:	220f      	movs	r2, #15
 8002f16:	4013      	ands	r3, r2
 8002f18:	4a0a      	ldr	r2, [pc, #40]	; (8002f44 <HAL_RCC_ClockConfig+0x1ac>)
 8002f1a:	5cd3      	ldrb	r3, [r2, r3]
 8002f1c:	000a      	movs	r2, r1
 8002f1e:	40da      	lsrs	r2, r3
 8002f20:	4b09      	ldr	r3, [pc, #36]	; (8002f48 <HAL_RCC_ClockConfig+0x1b0>)
 8002f22:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002f24:	2000      	movs	r0, #0
 8002f26:	f7fd fd71 	bl	8000a0c <HAL_InitTick>
  
  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	0018      	movs	r0, r3
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	b004      	add	sp, #16
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	40022000 	.word	0x40022000
 8002f38:	40021000 	.word	0x40021000
 8002f3c:	00001388 	.word	0x00001388
 8002f40:	fffff8ff 	.word	0xfffff8ff
 8002f44:	08007914 	.word	0x08007914
 8002f48:	20000024 	.word	0x20000024

08002f4c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f4c:	b590      	push	{r4, r7, lr}
 8002f4e:	b08f      	sub	sp, #60	; 0x3c
 8002f50:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002f52:	2314      	movs	r3, #20
 8002f54:	18fb      	adds	r3, r7, r3
 8002f56:	4a38      	ldr	r2, [pc, #224]	; (8003038 <HAL_RCC_GetSysClockFreq+0xec>)
 8002f58:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002f5a:	c313      	stmia	r3!, {r0, r1, r4}
 8002f5c:	6812      	ldr	r2, [r2, #0]
 8002f5e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002f60:	1d3b      	adds	r3, r7, #4
 8002f62:	4a36      	ldr	r2, [pc, #216]	; (800303c <HAL_RCC_GetSysClockFreq+0xf0>)
 8002f64:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002f66:	c313      	stmia	r3!, {r0, r1, r4}
 8002f68:	6812      	ldr	r2, [r2, #0]
 8002f6a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f70:	2300      	movs	r3, #0
 8002f72:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f74:	2300      	movs	r3, #0
 8002f76:	637b      	str	r3, [r7, #52]	; 0x34
 8002f78:	2300      	movs	r3, #0
 8002f7a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002f80:	4b2f      	ldr	r3, [pc, #188]	; (8003040 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f88:	220c      	movs	r2, #12
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	2b0c      	cmp	r3, #12
 8002f8e:	d047      	beq.n	8003020 <HAL_RCC_GetSysClockFreq+0xd4>
 8002f90:	d849      	bhi.n	8003026 <HAL_RCC_GetSysClockFreq+0xda>
 8002f92:	2b04      	cmp	r3, #4
 8002f94:	d002      	beq.n	8002f9c <HAL_RCC_GetSysClockFreq+0x50>
 8002f96:	2b08      	cmp	r3, #8
 8002f98:	d003      	beq.n	8002fa2 <HAL_RCC_GetSysClockFreq+0x56>
 8002f9a:	e044      	b.n	8003026 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f9c:	4b29      	ldr	r3, [pc, #164]	; (8003044 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f9e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002fa0:	e044      	b.n	800302c <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fa4:	0c9b      	lsrs	r3, r3, #18
 8002fa6:	220f      	movs	r2, #15
 8002fa8:	4013      	ands	r3, r2
 8002faa:	2214      	movs	r2, #20
 8002fac:	18ba      	adds	r2, r7, r2
 8002fae:	5cd3      	ldrb	r3, [r2, r3]
 8002fb0:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002fb2:	4b23      	ldr	r3, [pc, #140]	; (8003040 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb6:	220f      	movs	r2, #15
 8002fb8:	4013      	ands	r3, r2
 8002fba:	1d3a      	adds	r2, r7, #4
 8002fbc:	5cd3      	ldrb	r3, [r2, r3]
 8002fbe:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002fc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fc2:	23c0      	movs	r3, #192	; 0xc0
 8002fc4:	025b      	lsls	r3, r3, #9
 8002fc6:	401a      	ands	r2, r3
 8002fc8:	2380      	movs	r3, #128	; 0x80
 8002fca:	025b      	lsls	r3, r3, #9
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d109      	bne.n	8002fe4 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002fd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fd2:	481c      	ldr	r0, [pc, #112]	; (8003044 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fd4:	f7fd f8a0 	bl	8000118 <__udivsi3>
 8002fd8:	0003      	movs	r3, r0
 8002fda:	001a      	movs	r2, r3
 8002fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fde:	4353      	muls	r3, r2
 8002fe0:	637b      	str	r3, [r7, #52]	; 0x34
 8002fe2:	e01a      	b.n	800301a <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002fe4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fe6:	23c0      	movs	r3, #192	; 0xc0
 8002fe8:	025b      	lsls	r3, r3, #9
 8002fea:	401a      	ands	r2, r3
 8002fec:	23c0      	movs	r3, #192	; 0xc0
 8002fee:	025b      	lsls	r3, r3, #9
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d109      	bne.n	8003008 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002ff4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ff6:	4814      	ldr	r0, [pc, #80]	; (8003048 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002ff8:	f7fd f88e 	bl	8000118 <__udivsi3>
 8002ffc:	0003      	movs	r3, r0
 8002ffe:	001a      	movs	r2, r3
 8003000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003002:	4353      	muls	r3, r2
 8003004:	637b      	str	r3, [r7, #52]	; 0x34
 8003006:	e008      	b.n	800301a <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003008:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800300a:	480e      	ldr	r0, [pc, #56]	; (8003044 <HAL_RCC_GetSysClockFreq+0xf8>)
 800300c:	f7fd f884 	bl	8000118 <__udivsi3>
 8003010:	0003      	movs	r3, r0
 8003012:	001a      	movs	r2, r3
 8003014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003016:	4353      	muls	r3, r2
 8003018:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800301a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800301c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800301e:	e005      	b.n	800302c <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8003020:	4b09      	ldr	r3, [pc, #36]	; (8003048 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003022:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003024:	e002      	b.n	800302c <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003026:	4b07      	ldr	r3, [pc, #28]	; (8003044 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003028:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800302a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800302c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800302e:	0018      	movs	r0, r3
 8003030:	46bd      	mov	sp, r7
 8003032:	b00f      	add	sp, #60	; 0x3c
 8003034:	bd90      	pop	{r4, r7, pc}
 8003036:	46c0      	nop			; (mov r8, r8)
 8003038:	080078f4 	.word	0x080078f4
 800303c:	08007904 	.word	0x08007904
 8003040:	40021000 	.word	0x40021000
 8003044:	007a1200 	.word	0x007a1200
 8003048:	02dc6c00 	.word	0x02dc6c00

0800304c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003050:	4b02      	ldr	r3, [pc, #8]	; (800305c <HAL_RCC_GetHCLKFreq+0x10>)
 8003052:	681b      	ldr	r3, [r3, #0]
}
 8003054:	0018      	movs	r0, r3
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	46c0      	nop			; (mov r8, r8)
 800305c:	20000024 	.word	0x20000024

08003060 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003064:	f7ff fff2 	bl	800304c <HAL_RCC_GetHCLKFreq>
 8003068:	0001      	movs	r1, r0
 800306a:	4b06      	ldr	r3, [pc, #24]	; (8003084 <HAL_RCC_GetPCLK1Freq+0x24>)
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	0a1b      	lsrs	r3, r3, #8
 8003070:	2207      	movs	r2, #7
 8003072:	4013      	ands	r3, r2
 8003074:	4a04      	ldr	r2, [pc, #16]	; (8003088 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003076:	5cd3      	ldrb	r3, [r2, r3]
 8003078:	40d9      	lsrs	r1, r3
 800307a:	000b      	movs	r3, r1
}    
 800307c:	0018      	movs	r0, r3
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	46c0      	nop			; (mov r8, r8)
 8003084:	40021000 	.word	0x40021000
 8003088:	08007924 	.word	0x08007924

0800308c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b086      	sub	sp, #24
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003094:	2300      	movs	r3, #0
 8003096:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003098:	2300      	movs	r3, #0
 800309a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	2380      	movs	r3, #128	; 0x80
 80030a2:	025b      	lsls	r3, r3, #9
 80030a4:	4013      	ands	r3, r2
 80030a6:	d100      	bne.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80030a8:	e08e      	b.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80030aa:	2017      	movs	r0, #23
 80030ac:	183b      	adds	r3, r7, r0
 80030ae:	2200      	movs	r2, #0
 80030b0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030b2:	4b6e      	ldr	r3, [pc, #440]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80030b4:	69da      	ldr	r2, [r3, #28]
 80030b6:	2380      	movs	r3, #128	; 0x80
 80030b8:	055b      	lsls	r3, r3, #21
 80030ba:	4013      	ands	r3, r2
 80030bc:	d110      	bne.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80030be:	4b6b      	ldr	r3, [pc, #428]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80030c0:	69da      	ldr	r2, [r3, #28]
 80030c2:	4b6a      	ldr	r3, [pc, #424]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80030c4:	2180      	movs	r1, #128	; 0x80
 80030c6:	0549      	lsls	r1, r1, #21
 80030c8:	430a      	orrs	r2, r1
 80030ca:	61da      	str	r2, [r3, #28]
 80030cc:	4b67      	ldr	r3, [pc, #412]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80030ce:	69da      	ldr	r2, [r3, #28]
 80030d0:	2380      	movs	r3, #128	; 0x80
 80030d2:	055b      	lsls	r3, r3, #21
 80030d4:	4013      	ands	r3, r2
 80030d6:	60bb      	str	r3, [r7, #8]
 80030d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030da:	183b      	adds	r3, r7, r0
 80030dc:	2201      	movs	r2, #1
 80030de:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e0:	4b63      	ldr	r3, [pc, #396]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	2380      	movs	r3, #128	; 0x80
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	4013      	ands	r3, r2
 80030ea:	d11a      	bne.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030ec:	4b60      	ldr	r3, [pc, #384]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	4b5f      	ldr	r3, [pc, #380]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80030f2:	2180      	movs	r1, #128	; 0x80
 80030f4:	0049      	lsls	r1, r1, #1
 80030f6:	430a      	orrs	r2, r1
 80030f8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030fa:	f7fd fccd 	bl	8000a98 <HAL_GetTick>
 80030fe:	0003      	movs	r3, r0
 8003100:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003102:	e008      	b.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003104:	f7fd fcc8 	bl	8000a98 <HAL_GetTick>
 8003108:	0002      	movs	r2, r0
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b64      	cmp	r3, #100	; 0x64
 8003110:	d901      	bls.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e0a6      	b.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003116:	4b56      	ldr	r3, [pc, #344]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	2380      	movs	r3, #128	; 0x80
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	4013      	ands	r3, r2
 8003120:	d0f0      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003122:	4b52      	ldr	r3, [pc, #328]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003124:	6a1a      	ldr	r2, [r3, #32]
 8003126:	23c0      	movs	r3, #192	; 0xc0
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	4013      	ands	r3, r2
 800312c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d034      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685a      	ldr	r2, [r3, #4]
 8003138:	23c0      	movs	r3, #192	; 0xc0
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	4013      	ands	r3, r2
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	429a      	cmp	r2, r3
 8003142:	d02c      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003144:	4b49      	ldr	r3, [pc, #292]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003146:	6a1b      	ldr	r3, [r3, #32]
 8003148:	4a4a      	ldr	r2, [pc, #296]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800314a:	4013      	ands	r3, r2
 800314c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800314e:	4b47      	ldr	r3, [pc, #284]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003150:	6a1a      	ldr	r2, [r3, #32]
 8003152:	4b46      	ldr	r3, [pc, #280]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003154:	2180      	movs	r1, #128	; 0x80
 8003156:	0249      	lsls	r1, r1, #9
 8003158:	430a      	orrs	r2, r1
 800315a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800315c:	4b43      	ldr	r3, [pc, #268]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800315e:	6a1a      	ldr	r2, [r3, #32]
 8003160:	4b42      	ldr	r3, [pc, #264]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003162:	4945      	ldr	r1, [pc, #276]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8003164:	400a      	ands	r2, r1
 8003166:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003168:	4b40      	ldr	r3, [pc, #256]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2201      	movs	r2, #1
 8003172:	4013      	ands	r3, r2
 8003174:	d013      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003176:	f7fd fc8f 	bl	8000a98 <HAL_GetTick>
 800317a:	0003      	movs	r3, r0
 800317c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800317e:	e009      	b.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003180:	f7fd fc8a 	bl	8000a98 <HAL_GetTick>
 8003184:	0002      	movs	r2, r0
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	4a3c      	ldr	r2, [pc, #240]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d901      	bls.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e067      	b.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003194:	4b35      	ldr	r3, [pc, #212]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003196:	6a1b      	ldr	r3, [r3, #32]
 8003198:	2202      	movs	r2, #2
 800319a:	4013      	ands	r3, r2
 800319c:	d0f0      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800319e:	4b33      	ldr	r3, [pc, #204]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80031a0:	6a1b      	ldr	r3, [r3, #32]
 80031a2:	4a34      	ldr	r2, [pc, #208]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80031a4:	4013      	ands	r3, r2
 80031a6:	0019      	movs	r1, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685a      	ldr	r2, [r3, #4]
 80031ac:	4b2f      	ldr	r3, [pc, #188]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80031ae:	430a      	orrs	r2, r1
 80031b0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80031b2:	2317      	movs	r3, #23
 80031b4:	18fb      	adds	r3, r7, r3
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d105      	bne.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031bc:	4b2b      	ldr	r3, [pc, #172]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80031be:	69da      	ldr	r2, [r3, #28]
 80031c0:	4b2a      	ldr	r3, [pc, #168]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80031c2:	492f      	ldr	r1, [pc, #188]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80031c4:	400a      	ands	r2, r1
 80031c6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2201      	movs	r2, #1
 80031ce:	4013      	ands	r3, r2
 80031d0:	d009      	beq.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031d2:	4b26      	ldr	r3, [pc, #152]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80031d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d6:	2203      	movs	r2, #3
 80031d8:	4393      	bics	r3, r2
 80031da:	0019      	movs	r1, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689a      	ldr	r2, [r3, #8]
 80031e0:	4b22      	ldr	r3, [pc, #136]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80031e2:	430a      	orrs	r2, r1
 80031e4:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2202      	movs	r2, #2
 80031ec:	4013      	ands	r3, r2
 80031ee:	d009      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031f0:	4b1e      	ldr	r3, [pc, #120]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80031f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f4:	4a23      	ldr	r2, [pc, #140]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80031f6:	4013      	ands	r3, r2
 80031f8:	0019      	movs	r1, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	68da      	ldr	r2, [r3, #12]
 80031fe:	4b1b      	ldr	r3, [pc, #108]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003200:	430a      	orrs	r2, r1
 8003202:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2220      	movs	r2, #32
 800320a:	4013      	ands	r3, r2
 800320c:	d009      	beq.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800320e:	4b17      	ldr	r3, [pc, #92]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003212:	2210      	movs	r2, #16
 8003214:	4393      	bics	r3, r2
 8003216:	0019      	movs	r1, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	691a      	ldr	r2, [r3, #16]
 800321c:	4b13      	ldr	r3, [pc, #76]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800321e:	430a      	orrs	r2, r1
 8003220:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	2380      	movs	r3, #128	; 0x80
 8003228:	029b      	lsls	r3, r3, #10
 800322a:	4013      	ands	r3, r2
 800322c:	d009      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800322e:	4b0f      	ldr	r3, [pc, #60]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003232:	2280      	movs	r2, #128	; 0x80
 8003234:	4393      	bics	r3, r2
 8003236:	0019      	movs	r1, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	699a      	ldr	r2, [r3, #24]
 800323c:	4b0b      	ldr	r3, [pc, #44]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800323e:	430a      	orrs	r2, r1
 8003240:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	2380      	movs	r3, #128	; 0x80
 8003248:	00db      	lsls	r3, r3, #3
 800324a:	4013      	ands	r3, r2
 800324c:	d009      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800324e:	4b07      	ldr	r3, [pc, #28]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003252:	2240      	movs	r2, #64	; 0x40
 8003254:	4393      	bics	r3, r2
 8003256:	0019      	movs	r1, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	695a      	ldr	r2, [r3, #20]
 800325c:	4b03      	ldr	r3, [pc, #12]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800325e:	430a      	orrs	r2, r1
 8003260:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003262:	2300      	movs	r3, #0
}
 8003264:	0018      	movs	r0, r3
 8003266:	46bd      	mov	sp, r7
 8003268:	b006      	add	sp, #24
 800326a:	bd80      	pop	{r7, pc}
 800326c:	40021000 	.word	0x40021000
 8003270:	40007000 	.word	0x40007000
 8003274:	fffffcff 	.word	0xfffffcff
 8003278:	fffeffff 	.word	0xfffeffff
 800327c:	00001388 	.word	0x00001388
 8003280:	efffffff 	.word	0xefffffff
 8003284:	fffcffff 	.word	0xfffcffff

08003288 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d101      	bne.n	800329a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e042      	b.n	8003320 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	223d      	movs	r2, #61	; 0x3d
 800329e:	5c9b      	ldrb	r3, [r3, r2]
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d107      	bne.n	80032b6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	223c      	movs	r2, #60	; 0x3c
 80032aa:	2100      	movs	r1, #0
 80032ac:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	0018      	movs	r0, r3
 80032b2:	f7fd fa7d 	bl	80007b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	223d      	movs	r2, #61	; 0x3d
 80032ba:	2102      	movs	r1, #2
 80032bc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	3304      	adds	r3, #4
 80032c6:	0019      	movs	r1, r3
 80032c8:	0010      	movs	r0, r2
 80032ca:	f000 f9b5 	bl	8003638 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2246      	movs	r2, #70	; 0x46
 80032d2:	2101      	movs	r1, #1
 80032d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	223e      	movs	r2, #62	; 0x3e
 80032da:	2101      	movs	r1, #1
 80032dc:	5499      	strb	r1, [r3, r2]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	223f      	movs	r2, #63	; 0x3f
 80032e2:	2101      	movs	r1, #1
 80032e4:	5499      	strb	r1, [r3, r2]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2240      	movs	r2, #64	; 0x40
 80032ea:	2101      	movs	r1, #1
 80032ec:	5499      	strb	r1, [r3, r2]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2241      	movs	r2, #65	; 0x41
 80032f2:	2101      	movs	r1, #1
 80032f4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2242      	movs	r2, #66	; 0x42
 80032fa:	2101      	movs	r1, #1
 80032fc:	5499      	strb	r1, [r3, r2]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2243      	movs	r2, #67	; 0x43
 8003302:	2101      	movs	r1, #1
 8003304:	5499      	strb	r1, [r3, r2]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2244      	movs	r2, #68	; 0x44
 800330a:	2101      	movs	r1, #1
 800330c:	5499      	strb	r1, [r3, r2]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2245      	movs	r2, #69	; 0x45
 8003312:	2101      	movs	r1, #1
 8003314:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	223d      	movs	r2, #61	; 0x3d
 800331a:	2101      	movs	r1, #1
 800331c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800331e:	2300      	movs	r3, #0
}
 8003320:	0018      	movs	r0, r3
 8003322:	46bd      	mov	sp, r7
 8003324:	b002      	add	sp, #8
 8003326:	bd80      	pop	{r7, pc}

08003328 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	223d      	movs	r2, #61	; 0x3d
 8003334:	5c9b      	ldrb	r3, [r3, r2]
 8003336:	b2db      	uxtb	r3, r3
 8003338:	2b01      	cmp	r3, #1
 800333a:	d001      	beq.n	8003340 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e03b      	b.n	80033b8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	223d      	movs	r2, #61	; 0x3d
 8003344:	2102      	movs	r1, #2
 8003346:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	68da      	ldr	r2, [r3, #12]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2101      	movs	r1, #1
 8003354:	430a      	orrs	r2, r1
 8003356:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a18      	ldr	r2, [pc, #96]	; (80033c0 <HAL_TIM_Base_Start_IT+0x98>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d00f      	beq.n	8003382 <HAL_TIM_Base_Start_IT+0x5a>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	2380      	movs	r3, #128	; 0x80
 8003368:	05db      	lsls	r3, r3, #23
 800336a:	429a      	cmp	r2, r3
 800336c:	d009      	beq.n	8003382 <HAL_TIM_Base_Start_IT+0x5a>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a14      	ldr	r2, [pc, #80]	; (80033c4 <HAL_TIM_Base_Start_IT+0x9c>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d004      	beq.n	8003382 <HAL_TIM_Base_Start_IT+0x5a>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a12      	ldr	r2, [pc, #72]	; (80033c8 <HAL_TIM_Base_Start_IT+0xa0>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d111      	bne.n	80033a6 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	2207      	movs	r2, #7
 800338a:	4013      	ands	r3, r2
 800338c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2b06      	cmp	r3, #6
 8003392:	d010      	beq.n	80033b6 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2101      	movs	r1, #1
 80033a0:	430a      	orrs	r2, r1
 80033a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033a4:	e007      	b.n	80033b6 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2101      	movs	r1, #1
 80033b2:	430a      	orrs	r2, r1
 80033b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	0018      	movs	r0, r3
 80033ba:	46bd      	mov	sp, r7
 80033bc:	b004      	add	sp, #16
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	40012c00 	.word	0x40012c00
 80033c4:	40000400 	.word	0x40000400
 80033c8:	40014000 	.word	0x40014000

080033cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	2202      	movs	r2, #2
 80033dc:	4013      	ands	r3, r2
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d124      	bne.n	800342c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	2202      	movs	r2, #2
 80033ea:	4013      	ands	r3, r2
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d11d      	bne.n	800342c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2203      	movs	r2, #3
 80033f6:	4252      	negs	r2, r2
 80033f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2201      	movs	r2, #1
 80033fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	699b      	ldr	r3, [r3, #24]
 8003406:	2203      	movs	r2, #3
 8003408:	4013      	ands	r3, r2
 800340a:	d004      	beq.n	8003416 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	0018      	movs	r0, r3
 8003410:	f000 f8fa 	bl	8003608 <HAL_TIM_IC_CaptureCallback>
 8003414:	e007      	b.n	8003426 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	0018      	movs	r0, r3
 800341a:	f000 f8ed 	bl	80035f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	0018      	movs	r0, r3
 8003422:	f000 f8f9 	bl	8003618 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	2204      	movs	r2, #4
 8003434:	4013      	ands	r3, r2
 8003436:	2b04      	cmp	r3, #4
 8003438:	d125      	bne.n	8003486 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	2204      	movs	r2, #4
 8003442:	4013      	ands	r3, r2
 8003444:	2b04      	cmp	r3, #4
 8003446:	d11e      	bne.n	8003486 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2205      	movs	r2, #5
 800344e:	4252      	negs	r2, r2
 8003450:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2202      	movs	r2, #2
 8003456:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	699a      	ldr	r2, [r3, #24]
 800345e:	23c0      	movs	r3, #192	; 0xc0
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	4013      	ands	r3, r2
 8003464:	d004      	beq.n	8003470 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	0018      	movs	r0, r3
 800346a:	f000 f8cd 	bl	8003608 <HAL_TIM_IC_CaptureCallback>
 800346e:	e007      	b.n	8003480 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	0018      	movs	r0, r3
 8003474:	f000 f8c0 	bl	80035f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	0018      	movs	r0, r3
 800347c:	f000 f8cc 	bl	8003618 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	691b      	ldr	r3, [r3, #16]
 800348c:	2208      	movs	r2, #8
 800348e:	4013      	ands	r3, r2
 8003490:	2b08      	cmp	r3, #8
 8003492:	d124      	bne.n	80034de <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	2208      	movs	r2, #8
 800349c:	4013      	ands	r3, r2
 800349e:	2b08      	cmp	r3, #8
 80034a0:	d11d      	bne.n	80034de <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2209      	movs	r2, #9
 80034a8:	4252      	negs	r2, r2
 80034aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2204      	movs	r2, #4
 80034b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	69db      	ldr	r3, [r3, #28]
 80034b8:	2203      	movs	r2, #3
 80034ba:	4013      	ands	r3, r2
 80034bc:	d004      	beq.n	80034c8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	0018      	movs	r0, r3
 80034c2:	f000 f8a1 	bl	8003608 <HAL_TIM_IC_CaptureCallback>
 80034c6:	e007      	b.n	80034d8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	0018      	movs	r0, r3
 80034cc:	f000 f894 	bl	80035f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	0018      	movs	r0, r3
 80034d4:	f000 f8a0 	bl	8003618 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	2210      	movs	r2, #16
 80034e6:	4013      	ands	r3, r2
 80034e8:	2b10      	cmp	r3, #16
 80034ea:	d125      	bne.n	8003538 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	2210      	movs	r2, #16
 80034f4:	4013      	ands	r3, r2
 80034f6:	2b10      	cmp	r3, #16
 80034f8:	d11e      	bne.n	8003538 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2211      	movs	r2, #17
 8003500:	4252      	negs	r2, r2
 8003502:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2208      	movs	r2, #8
 8003508:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	69da      	ldr	r2, [r3, #28]
 8003510:	23c0      	movs	r3, #192	; 0xc0
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	4013      	ands	r3, r2
 8003516:	d004      	beq.n	8003522 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	0018      	movs	r0, r3
 800351c:	f000 f874 	bl	8003608 <HAL_TIM_IC_CaptureCallback>
 8003520:	e007      	b.n	8003532 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	0018      	movs	r0, r3
 8003526:	f000 f867 	bl	80035f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	0018      	movs	r0, r3
 800352e:	f000 f873 	bl	8003618 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	2201      	movs	r2, #1
 8003540:	4013      	ands	r3, r2
 8003542:	2b01      	cmp	r3, #1
 8003544:	d10f      	bne.n	8003566 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	2201      	movs	r2, #1
 800354e:	4013      	ands	r3, r2
 8003550:	2b01      	cmp	r3, #1
 8003552:	d108      	bne.n	8003566 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2202      	movs	r2, #2
 800355a:	4252      	negs	r2, r2
 800355c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	0018      	movs	r0, r3
 8003562:	f7fd f845 	bl	80005f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	2280      	movs	r2, #128	; 0x80
 800356e:	4013      	ands	r3, r2
 8003570:	2b80      	cmp	r3, #128	; 0x80
 8003572:	d10f      	bne.n	8003594 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	2280      	movs	r2, #128	; 0x80
 800357c:	4013      	ands	r3, r2
 800357e:	2b80      	cmp	r3, #128	; 0x80
 8003580:	d108      	bne.n	8003594 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2281      	movs	r2, #129	; 0x81
 8003588:	4252      	negs	r2, r2
 800358a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	0018      	movs	r0, r3
 8003590:	f000 f938 	bl	8003804 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	2240      	movs	r2, #64	; 0x40
 800359c:	4013      	ands	r3, r2
 800359e:	2b40      	cmp	r3, #64	; 0x40
 80035a0:	d10f      	bne.n	80035c2 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	2240      	movs	r2, #64	; 0x40
 80035aa:	4013      	ands	r3, r2
 80035ac:	2b40      	cmp	r3, #64	; 0x40
 80035ae:	d108      	bne.n	80035c2 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2241      	movs	r2, #65	; 0x41
 80035b6:	4252      	negs	r2, r2
 80035b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	0018      	movs	r0, r3
 80035be:	f000 f833 	bl	8003628 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	2220      	movs	r2, #32
 80035ca:	4013      	ands	r3, r2
 80035cc:	2b20      	cmp	r3, #32
 80035ce:	d10f      	bne.n	80035f0 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	2220      	movs	r2, #32
 80035d8:	4013      	ands	r3, r2
 80035da:	2b20      	cmp	r3, #32
 80035dc:	d108      	bne.n	80035f0 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2221      	movs	r2, #33	; 0x21
 80035e4:	4252      	negs	r2, r2
 80035e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	0018      	movs	r0, r3
 80035ec:	f000 f902 	bl	80037f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035f0:	46c0      	nop			; (mov r8, r8)
 80035f2:	46bd      	mov	sp, r7
 80035f4:	b002      	add	sp, #8
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003600:	46c0      	nop			; (mov r8, r8)
 8003602:	46bd      	mov	sp, r7
 8003604:	b002      	add	sp, #8
 8003606:	bd80      	pop	{r7, pc}

08003608 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003610:	46c0      	nop			; (mov r8, r8)
 8003612:	46bd      	mov	sp, r7
 8003614:	b002      	add	sp, #8
 8003616:	bd80      	pop	{r7, pc}

08003618 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003620:	46c0      	nop			; (mov r8, r8)
 8003622:	46bd      	mov	sp, r7
 8003624:	b002      	add	sp, #8
 8003626:	bd80      	pop	{r7, pc}

08003628 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003630:	46c0      	nop			; (mov r8, r8)
 8003632:	46bd      	mov	sp, r7
 8003634:	b002      	add	sp, #8
 8003636:	bd80      	pop	{r7, pc}

08003638 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a34      	ldr	r2, [pc, #208]	; (800371c <TIM_Base_SetConfig+0xe4>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d008      	beq.n	8003662 <TIM_Base_SetConfig+0x2a>
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	2380      	movs	r3, #128	; 0x80
 8003654:	05db      	lsls	r3, r3, #23
 8003656:	429a      	cmp	r2, r3
 8003658:	d003      	beq.n	8003662 <TIM_Base_SetConfig+0x2a>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a30      	ldr	r2, [pc, #192]	; (8003720 <TIM_Base_SetConfig+0xe8>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d108      	bne.n	8003674 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2270      	movs	r2, #112	; 0x70
 8003666:	4393      	bics	r3, r2
 8003668:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	4313      	orrs	r3, r2
 8003672:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4a29      	ldr	r2, [pc, #164]	; (800371c <TIM_Base_SetConfig+0xe4>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d018      	beq.n	80036ae <TIM_Base_SetConfig+0x76>
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	2380      	movs	r3, #128	; 0x80
 8003680:	05db      	lsls	r3, r3, #23
 8003682:	429a      	cmp	r2, r3
 8003684:	d013      	beq.n	80036ae <TIM_Base_SetConfig+0x76>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a25      	ldr	r2, [pc, #148]	; (8003720 <TIM_Base_SetConfig+0xe8>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d00f      	beq.n	80036ae <TIM_Base_SetConfig+0x76>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a24      	ldr	r2, [pc, #144]	; (8003724 <TIM_Base_SetConfig+0xec>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d00b      	beq.n	80036ae <TIM_Base_SetConfig+0x76>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a23      	ldr	r2, [pc, #140]	; (8003728 <TIM_Base_SetConfig+0xf0>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d007      	beq.n	80036ae <TIM_Base_SetConfig+0x76>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a22      	ldr	r2, [pc, #136]	; (800372c <TIM_Base_SetConfig+0xf4>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d003      	beq.n	80036ae <TIM_Base_SetConfig+0x76>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a21      	ldr	r2, [pc, #132]	; (8003730 <TIM_Base_SetConfig+0xf8>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d108      	bne.n	80036c0 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	4a20      	ldr	r2, [pc, #128]	; (8003734 <TIM_Base_SetConfig+0xfc>)
 80036b2:	4013      	ands	r3, r2
 80036b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	4313      	orrs	r3, r2
 80036be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2280      	movs	r2, #128	; 0x80
 80036c4:	4393      	bics	r3, r2
 80036c6:	001a      	movs	r2, r3
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	695b      	ldr	r3, [r3, #20]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	689a      	ldr	r2, [r3, #8]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a0c      	ldr	r2, [pc, #48]	; (800371c <TIM_Base_SetConfig+0xe4>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d00b      	beq.n	8003706 <TIM_Base_SetConfig+0xce>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a0d      	ldr	r2, [pc, #52]	; (8003728 <TIM_Base_SetConfig+0xf0>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d007      	beq.n	8003706 <TIM_Base_SetConfig+0xce>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a0c      	ldr	r2, [pc, #48]	; (800372c <TIM_Base_SetConfig+0xf4>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d003      	beq.n	8003706 <TIM_Base_SetConfig+0xce>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a0b      	ldr	r2, [pc, #44]	; (8003730 <TIM_Base_SetConfig+0xf8>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d103      	bne.n	800370e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	691a      	ldr	r2, [r3, #16]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2201      	movs	r2, #1
 8003712:	615a      	str	r2, [r3, #20]
}
 8003714:	46c0      	nop			; (mov r8, r8)
 8003716:	46bd      	mov	sp, r7
 8003718:	b004      	add	sp, #16
 800371a:	bd80      	pop	{r7, pc}
 800371c:	40012c00 	.word	0x40012c00
 8003720:	40000400 	.word	0x40000400
 8003724:	40002000 	.word	0x40002000
 8003728:	40014000 	.word	0x40014000
 800372c:	40014400 	.word	0x40014400
 8003730:	40014800 	.word	0x40014800
 8003734:	fffffcff 	.word	0xfffffcff

08003738 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	223c      	movs	r2, #60	; 0x3c
 8003746:	5c9b      	ldrb	r3, [r3, r2]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d101      	bne.n	8003750 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800374c:	2302      	movs	r3, #2
 800374e:	e047      	b.n	80037e0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	223c      	movs	r2, #60	; 0x3c
 8003754:	2101      	movs	r1, #1
 8003756:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	223d      	movs	r2, #61	; 0x3d
 800375c:	2102      	movs	r1, #2
 800375e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2270      	movs	r2, #112	; 0x70
 8003774:	4393      	bics	r3, r2
 8003776:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68fa      	ldr	r2, [r7, #12]
 800377e:	4313      	orrs	r3, r2
 8003780:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a16      	ldr	r2, [pc, #88]	; (80037e8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d00f      	beq.n	80037b4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	2380      	movs	r3, #128	; 0x80
 800379a:	05db      	lsls	r3, r3, #23
 800379c:	429a      	cmp	r2, r3
 800379e:	d009      	beq.n	80037b4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a11      	ldr	r2, [pc, #68]	; (80037ec <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d004      	beq.n	80037b4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a10      	ldr	r2, [pc, #64]	; (80037f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d10c      	bne.n	80037ce <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	2280      	movs	r2, #128	; 0x80
 80037b8:	4393      	bics	r3, r2
 80037ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	68ba      	ldr	r2, [r7, #8]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68ba      	ldr	r2, [r7, #8]
 80037cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	223d      	movs	r2, #61	; 0x3d
 80037d2:	2101      	movs	r1, #1
 80037d4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	223c      	movs	r2, #60	; 0x3c
 80037da:	2100      	movs	r1, #0
 80037dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80037de:	2300      	movs	r3, #0
}
 80037e0:	0018      	movs	r0, r3
 80037e2:	46bd      	mov	sp, r7
 80037e4:	b004      	add	sp, #16
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	40012c00 	.word	0x40012c00
 80037ec:	40000400 	.word	0x40000400
 80037f0:	40014000 	.word	0x40014000

080037f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037fc:	46c0      	nop			; (mov r8, r8)
 80037fe:	46bd      	mov	sp, r7
 8003800:	b002      	add	sp, #8
 8003802:	bd80      	pop	{r7, pc}

08003804 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800380c:	46c0      	nop			; (mov r8, r8)
 800380e:	46bd      	mov	sp, r7
 8003810:	b002      	add	sp, #8
 8003812:	bd80      	pop	{r7, pc}

08003814 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d101      	bne.n	8003826 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e044      	b.n	80038b0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800382a:	2b00      	cmp	r3, #0
 800382c:	d107      	bne.n	800383e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2274      	movs	r2, #116	; 0x74
 8003832:	2100      	movs	r1, #0
 8003834:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	0018      	movs	r0, r3
 800383a:	f7fc fffb 	bl	8000834 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2224      	movs	r2, #36	; 0x24
 8003842:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2101      	movs	r1, #1
 8003850:	438a      	bics	r2, r1
 8003852:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	0018      	movs	r0, r3
 8003858:	f000 faf8 	bl	8003e4c <UART_SetConfig>
 800385c:	0003      	movs	r3, r0
 800385e:	2b01      	cmp	r3, #1
 8003860:	d101      	bne.n	8003866 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e024      	b.n	80038b0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386a:	2b00      	cmp	r3, #0
 800386c:	d003      	beq.n	8003876 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	0018      	movs	r0, r3
 8003872:	f000 fc73 	bl	800415c <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	685a      	ldr	r2, [r3, #4]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	490d      	ldr	r1, [pc, #52]	; (80038b8 <HAL_UART_Init+0xa4>)
 8003882:	400a      	ands	r2, r1
 8003884:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	689a      	ldr	r2, [r3, #8]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	212a      	movs	r1, #42	; 0x2a
 8003892:	438a      	bics	r2, r1
 8003894:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2101      	movs	r1, #1
 80038a2:	430a      	orrs	r2, r1
 80038a4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	0018      	movs	r0, r3
 80038aa:	f000 fd0b 	bl	80042c4 <UART_CheckIdleState>
 80038ae:	0003      	movs	r3, r0
}
 80038b0:	0018      	movs	r0, r3
 80038b2:	46bd      	mov	sp, r7
 80038b4:	b002      	add	sp, #8
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	ffffb7ff 	.word	0xffffb7ff

080038bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b08a      	sub	sp, #40	; 0x28
 80038c0:	af02      	add	r7, sp, #8
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	603b      	str	r3, [r7, #0]
 80038c8:	1dbb      	adds	r3, r7, #6
 80038ca:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038d0:	2b20      	cmp	r3, #32
 80038d2:	d000      	beq.n	80038d6 <HAL_UART_Transmit+0x1a>
 80038d4:	e096      	b.n	8003a04 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d003      	beq.n	80038e4 <HAL_UART_Transmit+0x28>
 80038dc:	1dbb      	adds	r3, r7, #6
 80038de:	881b      	ldrh	r3, [r3, #0]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d101      	bne.n	80038e8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e08e      	b.n	8003a06 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	689a      	ldr	r2, [r3, #8]
 80038ec:	2380      	movs	r3, #128	; 0x80
 80038ee:	015b      	lsls	r3, r3, #5
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d109      	bne.n	8003908 <HAL_UART_Transmit+0x4c>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	691b      	ldr	r3, [r3, #16]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d105      	bne.n	8003908 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	2201      	movs	r2, #1
 8003900:	4013      	ands	r3, r2
 8003902:	d001      	beq.n	8003908 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e07e      	b.n	8003a06 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2274      	movs	r2, #116	; 0x74
 800390c:	5c9b      	ldrb	r3, [r3, r2]
 800390e:	2b01      	cmp	r3, #1
 8003910:	d101      	bne.n	8003916 <HAL_UART_Transmit+0x5a>
 8003912:	2302      	movs	r3, #2
 8003914:	e077      	b.n	8003a06 <HAL_UART_Transmit+0x14a>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2274      	movs	r2, #116	; 0x74
 800391a:	2101      	movs	r1, #1
 800391c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2280      	movs	r2, #128	; 0x80
 8003922:	2100      	movs	r1, #0
 8003924:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2221      	movs	r2, #33	; 0x21
 800392a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800392c:	f7fd f8b4 	bl	8000a98 <HAL_GetTick>
 8003930:	0003      	movs	r3, r0
 8003932:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	1dba      	adds	r2, r7, #6
 8003938:	2150      	movs	r1, #80	; 0x50
 800393a:	8812      	ldrh	r2, [r2, #0]
 800393c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	1dba      	adds	r2, r7, #6
 8003942:	2152      	movs	r1, #82	; 0x52
 8003944:	8812      	ldrh	r2, [r2, #0]
 8003946:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	689a      	ldr	r2, [r3, #8]
 800394c:	2380      	movs	r3, #128	; 0x80
 800394e:	015b      	lsls	r3, r3, #5
 8003950:	429a      	cmp	r2, r3
 8003952:	d108      	bne.n	8003966 <HAL_UART_Transmit+0xaa>
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	691b      	ldr	r3, [r3, #16]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d104      	bne.n	8003966 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 800395c:	2300      	movs	r3, #0
 800395e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	61bb      	str	r3, [r7, #24]
 8003964:	e003      	b.n	800396e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800396a:	2300      	movs	r3, #0
 800396c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2274      	movs	r2, #116	; 0x74
 8003972:	2100      	movs	r1, #0
 8003974:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8003976:	e02d      	b.n	80039d4 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003978:	697a      	ldr	r2, [r7, #20]
 800397a:	68f8      	ldr	r0, [r7, #12]
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	9300      	str	r3, [sp, #0]
 8003980:	0013      	movs	r3, r2
 8003982:	2200      	movs	r2, #0
 8003984:	2180      	movs	r1, #128	; 0x80
 8003986:	f000 fce5 	bl	8004354 <UART_WaitOnFlagUntilTimeout>
 800398a:	1e03      	subs	r3, r0, #0
 800398c:	d001      	beq.n	8003992 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e039      	b.n	8003a06 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d10b      	bne.n	80039b0 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	881a      	ldrh	r2, [r3, #0]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	05d2      	lsls	r2, r2, #23
 80039a2:	0dd2      	lsrs	r2, r2, #23
 80039a4:	b292      	uxth	r2, r2
 80039a6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	3302      	adds	r3, #2
 80039ac:	61bb      	str	r3, [r7, #24]
 80039ae:	e008      	b.n	80039c2 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	781a      	ldrb	r2, [r3, #0]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	b292      	uxth	r2, r2
 80039ba:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	3301      	adds	r3, #1
 80039c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2252      	movs	r2, #82	; 0x52
 80039c6:	5a9b      	ldrh	r3, [r3, r2]
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	3b01      	subs	r3, #1
 80039cc:	b299      	uxth	r1, r3
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2252      	movs	r2, #82	; 0x52
 80039d2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2252      	movs	r2, #82	; 0x52
 80039d8:	5a9b      	ldrh	r3, [r3, r2]
 80039da:	b29b      	uxth	r3, r3
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d1cb      	bne.n	8003978 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039e0:	697a      	ldr	r2, [r7, #20]
 80039e2:	68f8      	ldr	r0, [r7, #12]
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	9300      	str	r3, [sp, #0]
 80039e8:	0013      	movs	r3, r2
 80039ea:	2200      	movs	r2, #0
 80039ec:	2140      	movs	r1, #64	; 0x40
 80039ee:	f000 fcb1 	bl	8004354 <UART_WaitOnFlagUntilTimeout>
 80039f2:	1e03      	subs	r3, r0, #0
 80039f4:	d001      	beq.n	80039fa <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e005      	b.n	8003a06 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2220      	movs	r2, #32
 80039fe:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003a00:	2300      	movs	r3, #0
 8003a02:	e000      	b.n	8003a06 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003a04:	2302      	movs	r3, #2
  }
}
 8003a06:	0018      	movs	r0, r3
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	b008      	add	sp, #32
 8003a0c:	bd80      	pop	{r7, pc}
	...

08003a10 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b088      	sub	sp, #32
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	69db      	ldr	r3, [r3, #28]
 8003a1e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	4ab4      	ldr	r2, [pc, #720]	; (8003d04 <HAL_UART_IRQHandler+0x2f4>)
 8003a34:	4013      	ands	r3, r2
 8003a36:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d112      	bne.n	8003a64 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	2220      	movs	r2, #32
 8003a42:	4013      	ands	r3, r2
 8003a44:	d00e      	beq.n	8003a64 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	2220      	movs	r2, #32
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	d00a      	beq.n	8003a64 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d100      	bne.n	8003a58 <HAL_UART_IRQHandler+0x48>
 8003a56:	e1cf      	b.n	8003df8 <HAL_UART_IRQHandler+0x3e8>
      {
        huart->RxISR(huart);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	0010      	movs	r0, r2
 8003a60:	4798      	blx	r3
      }
      return;
 8003a62:	e1c9      	b.n	8003df8 <HAL_UART_IRQHandler+0x3e8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d100      	bne.n	8003a6c <HAL_UART_IRQHandler+0x5c>
 8003a6a:	e0d9      	b.n	8003c20 <HAL_UART_IRQHandler+0x210>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	4013      	ands	r3, r2
 8003a72:	d104      	bne.n	8003a7e <HAL_UART_IRQHandler+0x6e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	4aa4      	ldr	r2, [pc, #656]	; (8003d08 <HAL_UART_IRQHandler+0x2f8>)
 8003a78:	4013      	ands	r3, r2
 8003a7a:	d100      	bne.n	8003a7e <HAL_UART_IRQHandler+0x6e>
 8003a7c:	e0d0      	b.n	8003c20 <HAL_UART_IRQHandler+0x210>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	2201      	movs	r2, #1
 8003a82:	4013      	ands	r3, r2
 8003a84:	d010      	beq.n	8003aa8 <HAL_UART_IRQHandler+0x98>
 8003a86:	69ba      	ldr	r2, [r7, #24]
 8003a88:	2380      	movs	r3, #128	; 0x80
 8003a8a:	005b      	lsls	r3, r3, #1
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	d00b      	beq.n	8003aa8 <HAL_UART_IRQHandler+0x98>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2201      	movs	r2, #1
 8003a96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2280      	movs	r2, #128	; 0x80
 8003a9c:	589b      	ldr	r3, [r3, r2]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	431a      	orrs	r2, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2180      	movs	r1, #128	; 0x80
 8003aa6:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	2202      	movs	r2, #2
 8003aac:	4013      	ands	r3, r2
 8003aae:	d00f      	beq.n	8003ad0 <HAL_UART_IRQHandler+0xc0>
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	d00b      	beq.n	8003ad0 <HAL_UART_IRQHandler+0xc0>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2202      	movs	r2, #2
 8003abe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2280      	movs	r2, #128	; 0x80
 8003ac4:	589b      	ldr	r3, [r3, r2]
 8003ac6:	2204      	movs	r2, #4
 8003ac8:	431a      	orrs	r2, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2180      	movs	r1, #128	; 0x80
 8003ace:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	2204      	movs	r2, #4
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	d00f      	beq.n	8003af8 <HAL_UART_IRQHandler+0xe8>
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	2201      	movs	r2, #1
 8003adc:	4013      	ands	r3, r2
 8003ade:	d00b      	beq.n	8003af8 <HAL_UART_IRQHandler+0xe8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2204      	movs	r2, #4
 8003ae6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2280      	movs	r2, #128	; 0x80
 8003aec:	589b      	ldr	r3, [r3, r2]
 8003aee:	2202      	movs	r2, #2
 8003af0:	431a      	orrs	r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2180      	movs	r1, #128	; 0x80
 8003af6:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	2208      	movs	r2, #8
 8003afc:	4013      	ands	r3, r2
 8003afe:	d013      	beq.n	8003b28 <HAL_UART_IRQHandler+0x118>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	2220      	movs	r2, #32
 8003b04:	4013      	ands	r3, r2
 8003b06:	d103      	bne.n	8003b10 <HAL_UART_IRQHandler+0x100>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003b0e:	d00b      	beq.n	8003b28 <HAL_UART_IRQHandler+0x118>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2208      	movs	r2, #8
 8003b16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2280      	movs	r2, #128	; 0x80
 8003b1c:	589b      	ldr	r3, [r3, r2]
 8003b1e:	2208      	movs	r2, #8
 8003b20:	431a      	orrs	r2, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2180      	movs	r1, #128	; 0x80
 8003b26:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003b28:	69fa      	ldr	r2, [r7, #28]
 8003b2a:	2380      	movs	r3, #128	; 0x80
 8003b2c:	011b      	lsls	r3, r3, #4
 8003b2e:	4013      	ands	r3, r2
 8003b30:	d011      	beq.n	8003b56 <HAL_UART_IRQHandler+0x146>
 8003b32:	69ba      	ldr	r2, [r7, #24]
 8003b34:	2380      	movs	r3, #128	; 0x80
 8003b36:	04db      	lsls	r3, r3, #19
 8003b38:	4013      	ands	r3, r2
 8003b3a:	d00c      	beq.n	8003b56 <HAL_UART_IRQHandler+0x146>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2280      	movs	r2, #128	; 0x80
 8003b42:	0112      	lsls	r2, r2, #4
 8003b44:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2280      	movs	r2, #128	; 0x80
 8003b4a:	589b      	ldr	r3, [r3, r2]
 8003b4c:	2220      	movs	r2, #32
 8003b4e:	431a      	orrs	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2180      	movs	r1, #128	; 0x80
 8003b54:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2280      	movs	r2, #128	; 0x80
 8003b5a:	589b      	ldr	r3, [r3, r2]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d100      	bne.n	8003b62 <HAL_UART_IRQHandler+0x152>
 8003b60:	e14c      	b.n	8003dfc <HAL_UART_IRQHandler+0x3ec>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	2220      	movs	r2, #32
 8003b66:	4013      	ands	r3, r2
 8003b68:	d00c      	beq.n	8003b84 <HAL_UART_IRQHandler+0x174>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	2220      	movs	r2, #32
 8003b6e:	4013      	ands	r3, r2
 8003b70:	d008      	beq.n	8003b84 <HAL_UART_IRQHandler+0x174>
      {
        if (huart->RxISR != NULL)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d004      	beq.n	8003b84 <HAL_UART_IRQHandler+0x174>
        {
          huart->RxISR(huart);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	0010      	movs	r0, r2
 8003b82:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2280      	movs	r2, #128	; 0x80
 8003b88:	589b      	ldr	r3, [r3, r2]
 8003b8a:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	2240      	movs	r2, #64	; 0x40
 8003b94:	4013      	ands	r3, r2
 8003b96:	2b40      	cmp	r3, #64	; 0x40
 8003b98:	d003      	beq.n	8003ba2 <HAL_UART_IRQHandler+0x192>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2228      	movs	r2, #40	; 0x28
 8003b9e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ba0:	d033      	beq.n	8003c0a <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	0018      	movs	r0, r3
 8003ba6:	f000 fc53 	bl	8004450 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	2240      	movs	r2, #64	; 0x40
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	2b40      	cmp	r3, #64	; 0x40
 8003bb6:	d123      	bne.n	8003c00 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	689a      	ldr	r2, [r3, #8]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2140      	movs	r1, #64	; 0x40
 8003bc4:	438a      	bics	r2, r1
 8003bc6:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d012      	beq.n	8003bf6 <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd4:	4a4d      	ldr	r2, [pc, #308]	; (8003d0c <HAL_UART_IRQHandler+0x2fc>)
 8003bd6:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bdc:	0018      	movs	r0, r3
 8003bde:	f7fd f89f 	bl	8000d20 <HAL_DMA_Abort_IT>
 8003be2:	1e03      	subs	r3, r0, #0
 8003be4:	d01a      	beq.n	8003c1c <HAL_UART_IRQHandler+0x20c>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf0:	0018      	movs	r0, r3
 8003bf2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bf4:	e012      	b.n	8003c1c <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	0018      	movs	r0, r3
 8003bfa:	f000 f913 	bl	8003e24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bfe:	e00d      	b.n	8003c1c <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	0018      	movs	r0, r3
 8003c04:	f000 f90e 	bl	8003e24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c08:	e008      	b.n	8003c1c <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	0018      	movs	r0, r3
 8003c0e:	f000 f909 	bl	8003e24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2280      	movs	r2, #128	; 0x80
 8003c16:	2100      	movs	r1, #0
 8003c18:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003c1a:	e0ef      	b.n	8003dfc <HAL_UART_IRQHandler+0x3ec>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c1c:	46c0      	nop			; (mov r8, r8)
    return;
 8003c1e:	e0ed      	b.n	8003dfc <HAL_UART_IRQHandler+0x3ec>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d000      	beq.n	8003c2a <HAL_UART_IRQHandler+0x21a>
 8003c28:	e0b3      	b.n	8003d92 <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	2210      	movs	r2, #16
 8003c2e:	4013      	ands	r3, r2
 8003c30:	d100      	bne.n	8003c34 <HAL_UART_IRQHandler+0x224>
 8003c32:	e0ae      	b.n	8003d92 <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	2210      	movs	r2, #16
 8003c38:	4013      	ands	r3, r2
 8003c3a:	d100      	bne.n	8003c3e <HAL_UART_IRQHandler+0x22e>
 8003c3c:	e0a9      	b.n	8003d92 <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2210      	movs	r2, #16
 8003c44:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	2240      	movs	r2, #64	; 0x40
 8003c4e:	4013      	ands	r3, r2
 8003c50:	2b40      	cmp	r3, #64	; 0x40
 8003c52:	d15f      	bne.n	8003d14 <HAL_UART_IRQHandler+0x304>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	685a      	ldr	r2, [r3, #4]
 8003c5c:	2108      	movs	r1, #8
 8003c5e:	187b      	adds	r3, r7, r1
 8003c60:	801a      	strh	r2, [r3, #0]
      if (  (nb_remaining_rx_data > 0U)
 8003c62:	187b      	adds	r3, r7, r1
 8003c64:	881b      	ldrh	r3, [r3, #0]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d100      	bne.n	8003c6c <HAL_UART_IRQHandler+0x25c>
 8003c6a:	e0c9      	b.n	8003e00 <HAL_UART_IRQHandler+0x3f0>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2258      	movs	r2, #88	; 0x58
 8003c70:	5a9b      	ldrh	r3, [r3, r2]
 8003c72:	187a      	adds	r2, r7, r1
 8003c74:	8812      	ldrh	r2, [r2, #0]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d300      	bcc.n	8003c7c <HAL_UART_IRQHandler+0x26c>
 8003c7a:	e0c1      	b.n	8003e00 <HAL_UART_IRQHandler+0x3f0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	187a      	adds	r2, r7, r1
 8003c80:	215a      	movs	r1, #90	; 0x5a
 8003c82:	8812      	ldrh	r2, [r2, #0]
 8003c84:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c8a:	699b      	ldr	r3, [r3, #24]
 8003c8c:	2b20      	cmp	r3, #32
 8003c8e:	d02a      	beq.n	8003ce6 <HAL_UART_IRQHandler+0x2d6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	491d      	ldr	r1, [pc, #116]	; (8003d10 <HAL_UART_IRQHandler+0x300>)
 8003c9c:	400a      	ands	r2, r1
 8003c9e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	689a      	ldr	r2, [r3, #8]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2101      	movs	r1, #1
 8003cac:	438a      	bics	r2, r1
 8003cae:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	689a      	ldr	r2, [r3, #8]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2140      	movs	r1, #64	; 0x40
 8003cbc:	438a      	bics	r2, r1
 8003cbe:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2220      	movs	r2, #32
 8003cc4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2110      	movs	r1, #16
 8003cd8:	438a      	bics	r2, r1
 8003cda:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce0:	0018      	movs	r0, r3
 8003ce2:	f7fc ffe5 	bl	8000cb0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2258      	movs	r2, #88	; 0x58
 8003cea:	5a9a      	ldrh	r2, [r3, r2]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	215a      	movs	r1, #90	; 0x5a
 8003cf0:	5a5b      	ldrh	r3, [r3, r1]
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	b29a      	uxth	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	0011      	movs	r1, r2
 8003cfc:	0018      	movs	r0, r3
 8003cfe:	f000 f899 	bl	8003e34 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003d02:	e07d      	b.n	8003e00 <HAL_UART_IRQHandler+0x3f0>
 8003d04:	0000080f 	.word	0x0000080f
 8003d08:	04000120 	.word	0x04000120
 8003d0c:	080044b1 	.word	0x080044b1
 8003d10:	fffffeff 	.word	0xfffffeff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2258      	movs	r2, #88	; 0x58
 8003d18:	5a99      	ldrh	r1, [r3, r2]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	225a      	movs	r2, #90	; 0x5a
 8003d1e:	5a9b      	ldrh	r3, [r3, r2]
 8003d20:	b29a      	uxth	r2, r3
 8003d22:	200a      	movs	r0, #10
 8003d24:	183b      	adds	r3, r7, r0
 8003d26:	1a8a      	subs	r2, r1, r2
 8003d28:	801a      	strh	r2, [r3, #0]
      if (  (huart->RxXferCount > 0U)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	225a      	movs	r2, #90	; 0x5a
 8003d2e:	5a9b      	ldrh	r3, [r3, r2]
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d100      	bne.n	8003d38 <HAL_UART_IRQHandler+0x328>
 8003d36:	e065      	b.n	8003e04 <HAL_UART_IRQHandler+0x3f4>
          &&(nb_rx_data > 0U) )
 8003d38:	183b      	adds	r3, r7, r0
 8003d3a:	881b      	ldrh	r3, [r3, #0]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d061      	beq.n	8003e04 <HAL_UART_IRQHandler+0x3f4>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4931      	ldr	r1, [pc, #196]	; (8003e10 <HAL_UART_IRQHandler+0x400>)
 8003d4c:	400a      	ands	r2, r1
 8003d4e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	689a      	ldr	r2, [r3, #8]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2101      	movs	r1, #1
 8003d5c:	438a      	bics	r2, r1
 8003d5e:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2220      	movs	r2, #32
 8003d64:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2110      	movs	r1, #16
 8003d7e:	438a      	bics	r2, r1
 8003d80:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d82:	183b      	adds	r3, r7, r0
 8003d84:	881a      	ldrh	r2, [r3, #0]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	0011      	movs	r1, r2
 8003d8a:	0018      	movs	r0, r3
 8003d8c:	f000 f852 	bl	8003e34 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003d90:	e038      	b.n	8003e04 <HAL_UART_IRQHandler+0x3f4>
    }
  }
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003d92:	69fa      	ldr	r2, [r7, #28]
 8003d94:	2380      	movs	r3, #128	; 0x80
 8003d96:	035b      	lsls	r3, r3, #13
 8003d98:	4013      	ands	r3, r2
 8003d9a:	d00e      	beq.n	8003dba <HAL_UART_IRQHandler+0x3aa>
 8003d9c:	697a      	ldr	r2, [r7, #20]
 8003d9e:	2380      	movs	r3, #128	; 0x80
 8003da0:	03db      	lsls	r3, r3, #15
 8003da2:	4013      	ands	r3, r2
 8003da4:	d009      	beq.n	8003dba <HAL_UART_IRQHandler+0x3aa>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2280      	movs	r2, #128	; 0x80
 8003dac:	0352      	lsls	r2, r2, #13
 8003dae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	0018      	movs	r0, r3
 8003db4:	f000 fbad 	bl	8004512 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003db8:	e027      	b.n	8003e0a <HAL_UART_IRQHandler+0x3fa>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	2280      	movs	r2, #128	; 0x80
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	d00d      	beq.n	8003dde <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	2280      	movs	r2, #128	; 0x80
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	d009      	beq.n	8003dde <HAL_UART_IRQHandler+0x3ce>
  {
    if (huart->TxISR != NULL)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d01a      	beq.n	8003e08 <HAL_UART_IRQHandler+0x3f8>
    {
      huart->TxISR(huart);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	0010      	movs	r0, r2
 8003dda:	4798      	blx	r3
    }
    return;
 8003ddc:	e014      	b.n	8003e08 <HAL_UART_IRQHandler+0x3f8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	2240      	movs	r2, #64	; 0x40
 8003de2:	4013      	ands	r3, r2
 8003de4:	d011      	beq.n	8003e0a <HAL_UART_IRQHandler+0x3fa>
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	2240      	movs	r2, #64	; 0x40
 8003dea:	4013      	ands	r3, r2
 8003dec:	d00d      	beq.n	8003e0a <HAL_UART_IRQHandler+0x3fa>
  {
    UART_EndTransmit_IT(huart);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	0018      	movs	r0, r3
 8003df2:	f000 fb74 	bl	80044de <UART_EndTransmit_IT>
    return;
 8003df6:	e008      	b.n	8003e0a <HAL_UART_IRQHandler+0x3fa>
      return;
 8003df8:	46c0      	nop			; (mov r8, r8)
 8003dfa:	e006      	b.n	8003e0a <HAL_UART_IRQHandler+0x3fa>
    return;
 8003dfc:	46c0      	nop			; (mov r8, r8)
 8003dfe:	e004      	b.n	8003e0a <HAL_UART_IRQHandler+0x3fa>
      return;
 8003e00:	46c0      	nop			; (mov r8, r8)
 8003e02:	e002      	b.n	8003e0a <HAL_UART_IRQHandler+0x3fa>
      return;
 8003e04:	46c0      	nop			; (mov r8, r8)
 8003e06:	e000      	b.n	8003e0a <HAL_UART_IRQHandler+0x3fa>
    return;
 8003e08:	46c0      	nop			; (mov r8, r8)
  }

}
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	b008      	add	sp, #32
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	fffffedf 	.word	0xfffffedf

08003e14 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003e1c:	46c0      	nop			; (mov r8, r8)
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	b002      	add	sp, #8
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003e2c:	46c0      	nop			; (mov r8, r8)
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	b002      	add	sp, #8
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	000a      	movs	r2, r1
 8003e3e:	1cbb      	adds	r3, r7, #2
 8003e40:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e42:	46c0      	nop			; (mov r8, r8)
 8003e44:	46bd      	mov	sp, r7
 8003e46:	b002      	add	sp, #8
 8003e48:	bd80      	pop	{r7, pc}
	...

08003e4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b088      	sub	sp, #32
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e54:	231e      	movs	r3, #30
 8003e56:	18fb      	adds	r3, r7, r3
 8003e58:	2200      	movs	r2, #0
 8003e5a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689a      	ldr	r2, [r3, #8]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	691b      	ldr	r3, [r3, #16]
 8003e64:	431a      	orrs	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	431a      	orrs	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	69db      	ldr	r3, [r3, #28]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4aaf      	ldr	r2, [pc, #700]	; (8004138 <UART_SetConfig+0x2ec>)
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	0019      	movs	r1, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	697a      	ldr	r2, [r7, #20]
 8003e86:	430a      	orrs	r2, r1
 8003e88:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	4aaa      	ldr	r2, [pc, #680]	; (800413c <UART_SetConfig+0x2f0>)
 8003e92:	4013      	ands	r3, r2
 8003e94:	0019      	movs	r1, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	68da      	ldr	r2, [r3, #12]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	699b      	ldr	r3, [r3, #24]
 8003ea6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a1b      	ldr	r3, [r3, #32]
 8003eac:	697a      	ldr	r2, [r7, #20]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	4aa1      	ldr	r2, [pc, #644]	; (8004140 <UART_SetConfig+0x2f4>)
 8003eba:	4013      	ands	r3, r2
 8003ebc:	0019      	movs	r1, r3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	430a      	orrs	r2, r1
 8003ec6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a9d      	ldr	r2, [pc, #628]	; (8004144 <UART_SetConfig+0x2f8>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d127      	bne.n	8003f22 <UART_SetConfig+0xd6>
 8003ed2:	4b9d      	ldr	r3, [pc, #628]	; (8004148 <UART_SetConfig+0x2fc>)
 8003ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed6:	2203      	movs	r2, #3
 8003ed8:	4013      	ands	r3, r2
 8003eda:	2b03      	cmp	r3, #3
 8003edc:	d00d      	beq.n	8003efa <UART_SetConfig+0xae>
 8003ede:	d81b      	bhi.n	8003f18 <UART_SetConfig+0xcc>
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	d014      	beq.n	8003f0e <UART_SetConfig+0xc2>
 8003ee4:	d818      	bhi.n	8003f18 <UART_SetConfig+0xcc>
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d002      	beq.n	8003ef0 <UART_SetConfig+0xa4>
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d00a      	beq.n	8003f04 <UART_SetConfig+0xb8>
 8003eee:	e013      	b.n	8003f18 <UART_SetConfig+0xcc>
 8003ef0:	231f      	movs	r3, #31
 8003ef2:	18fb      	adds	r3, r7, r3
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	701a      	strb	r2, [r3, #0]
 8003ef8:	e065      	b.n	8003fc6 <UART_SetConfig+0x17a>
 8003efa:	231f      	movs	r3, #31
 8003efc:	18fb      	adds	r3, r7, r3
 8003efe:	2202      	movs	r2, #2
 8003f00:	701a      	strb	r2, [r3, #0]
 8003f02:	e060      	b.n	8003fc6 <UART_SetConfig+0x17a>
 8003f04:	231f      	movs	r3, #31
 8003f06:	18fb      	adds	r3, r7, r3
 8003f08:	2204      	movs	r2, #4
 8003f0a:	701a      	strb	r2, [r3, #0]
 8003f0c:	e05b      	b.n	8003fc6 <UART_SetConfig+0x17a>
 8003f0e:	231f      	movs	r3, #31
 8003f10:	18fb      	adds	r3, r7, r3
 8003f12:	2208      	movs	r2, #8
 8003f14:	701a      	strb	r2, [r3, #0]
 8003f16:	e056      	b.n	8003fc6 <UART_SetConfig+0x17a>
 8003f18:	231f      	movs	r3, #31
 8003f1a:	18fb      	adds	r3, r7, r3
 8003f1c:	2210      	movs	r2, #16
 8003f1e:	701a      	strb	r2, [r3, #0]
 8003f20:	e051      	b.n	8003fc6 <UART_SetConfig+0x17a>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a89      	ldr	r2, [pc, #548]	; (800414c <UART_SetConfig+0x300>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d134      	bne.n	8003f96 <UART_SetConfig+0x14a>
 8003f2c:	4b86      	ldr	r3, [pc, #536]	; (8004148 <UART_SetConfig+0x2fc>)
 8003f2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f30:	23c0      	movs	r3, #192	; 0xc0
 8003f32:	029b      	lsls	r3, r3, #10
 8003f34:	4013      	ands	r3, r2
 8003f36:	22c0      	movs	r2, #192	; 0xc0
 8003f38:	0292      	lsls	r2, r2, #10
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d017      	beq.n	8003f6e <UART_SetConfig+0x122>
 8003f3e:	22c0      	movs	r2, #192	; 0xc0
 8003f40:	0292      	lsls	r2, r2, #10
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d822      	bhi.n	8003f8c <UART_SetConfig+0x140>
 8003f46:	2280      	movs	r2, #128	; 0x80
 8003f48:	0292      	lsls	r2, r2, #10
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d019      	beq.n	8003f82 <UART_SetConfig+0x136>
 8003f4e:	2280      	movs	r2, #128	; 0x80
 8003f50:	0292      	lsls	r2, r2, #10
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d81a      	bhi.n	8003f8c <UART_SetConfig+0x140>
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d004      	beq.n	8003f64 <UART_SetConfig+0x118>
 8003f5a:	2280      	movs	r2, #128	; 0x80
 8003f5c:	0252      	lsls	r2, r2, #9
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d00a      	beq.n	8003f78 <UART_SetConfig+0x12c>
 8003f62:	e013      	b.n	8003f8c <UART_SetConfig+0x140>
 8003f64:	231f      	movs	r3, #31
 8003f66:	18fb      	adds	r3, r7, r3
 8003f68:	2200      	movs	r2, #0
 8003f6a:	701a      	strb	r2, [r3, #0]
 8003f6c:	e02b      	b.n	8003fc6 <UART_SetConfig+0x17a>
 8003f6e:	231f      	movs	r3, #31
 8003f70:	18fb      	adds	r3, r7, r3
 8003f72:	2202      	movs	r2, #2
 8003f74:	701a      	strb	r2, [r3, #0]
 8003f76:	e026      	b.n	8003fc6 <UART_SetConfig+0x17a>
 8003f78:	231f      	movs	r3, #31
 8003f7a:	18fb      	adds	r3, r7, r3
 8003f7c:	2204      	movs	r2, #4
 8003f7e:	701a      	strb	r2, [r3, #0]
 8003f80:	e021      	b.n	8003fc6 <UART_SetConfig+0x17a>
 8003f82:	231f      	movs	r3, #31
 8003f84:	18fb      	adds	r3, r7, r3
 8003f86:	2208      	movs	r2, #8
 8003f88:	701a      	strb	r2, [r3, #0]
 8003f8a:	e01c      	b.n	8003fc6 <UART_SetConfig+0x17a>
 8003f8c:	231f      	movs	r3, #31
 8003f8e:	18fb      	adds	r3, r7, r3
 8003f90:	2210      	movs	r2, #16
 8003f92:	701a      	strb	r2, [r3, #0]
 8003f94:	e017      	b.n	8003fc6 <UART_SetConfig+0x17a>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a6d      	ldr	r2, [pc, #436]	; (8004150 <UART_SetConfig+0x304>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d104      	bne.n	8003faa <UART_SetConfig+0x15e>
 8003fa0:	231f      	movs	r3, #31
 8003fa2:	18fb      	adds	r3, r7, r3
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	701a      	strb	r2, [r3, #0]
 8003fa8:	e00d      	b.n	8003fc6 <UART_SetConfig+0x17a>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a69      	ldr	r2, [pc, #420]	; (8004154 <UART_SetConfig+0x308>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d104      	bne.n	8003fbe <UART_SetConfig+0x172>
 8003fb4:	231f      	movs	r3, #31
 8003fb6:	18fb      	adds	r3, r7, r3
 8003fb8:	2200      	movs	r2, #0
 8003fba:	701a      	strb	r2, [r3, #0]
 8003fbc:	e003      	b.n	8003fc6 <UART_SetConfig+0x17a>
 8003fbe:	231f      	movs	r3, #31
 8003fc0:	18fb      	adds	r3, r7, r3
 8003fc2:	2210      	movs	r2, #16
 8003fc4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	69da      	ldr	r2, [r3, #28]
 8003fca:	2380      	movs	r3, #128	; 0x80
 8003fcc:	021b      	lsls	r3, r3, #8
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d15d      	bne.n	800408e <UART_SetConfig+0x242>
  {
    switch (clocksource)
 8003fd2:	231f      	movs	r3, #31
 8003fd4:	18fb      	adds	r3, r7, r3
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	2b08      	cmp	r3, #8
 8003fda:	d015      	beq.n	8004008 <UART_SetConfig+0x1bc>
 8003fdc:	dc18      	bgt.n	8004010 <UART_SetConfig+0x1c4>
 8003fde:	2b04      	cmp	r3, #4
 8003fe0:	d00d      	beq.n	8003ffe <UART_SetConfig+0x1b2>
 8003fe2:	dc15      	bgt.n	8004010 <UART_SetConfig+0x1c4>
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d002      	beq.n	8003fee <UART_SetConfig+0x1a2>
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d005      	beq.n	8003ff8 <UART_SetConfig+0x1ac>
 8003fec:	e010      	b.n	8004010 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fee:	f7ff f837 	bl	8003060 <HAL_RCC_GetPCLK1Freq>
 8003ff2:	0003      	movs	r3, r0
 8003ff4:	61bb      	str	r3, [r7, #24]
        break;
 8003ff6:	e012      	b.n	800401e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ff8:	4b57      	ldr	r3, [pc, #348]	; (8004158 <UART_SetConfig+0x30c>)
 8003ffa:	61bb      	str	r3, [r7, #24]
        break;
 8003ffc:	e00f      	b.n	800401e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ffe:	f7fe ffa5 	bl	8002f4c <HAL_RCC_GetSysClockFreq>
 8004002:	0003      	movs	r3, r0
 8004004:	61bb      	str	r3, [r7, #24]
        break;
 8004006:	e00a      	b.n	800401e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004008:	2380      	movs	r3, #128	; 0x80
 800400a:	021b      	lsls	r3, r3, #8
 800400c:	61bb      	str	r3, [r7, #24]
        break;
 800400e:	e006      	b.n	800401e <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8004010:	2300      	movs	r3, #0
 8004012:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004014:	231e      	movs	r3, #30
 8004016:	18fb      	adds	r3, r7, r3
 8004018:	2201      	movs	r2, #1
 800401a:	701a      	strb	r2, [r3, #0]
        break;
 800401c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d100      	bne.n	8004026 <UART_SetConfig+0x1da>
 8004024:	e07b      	b.n	800411e <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	005a      	lsls	r2, r3, #1
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	085b      	lsrs	r3, r3, #1
 8004030:	18d2      	adds	r2, r2, r3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	0019      	movs	r1, r3
 8004038:	0010      	movs	r0, r2
 800403a:	f7fc f86d 	bl	8000118 <__udivsi3>
 800403e:	0003      	movs	r3, r0
 8004040:	b29b      	uxth	r3, r3
 8004042:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	2b0f      	cmp	r3, #15
 8004048:	d91c      	bls.n	8004084 <UART_SetConfig+0x238>
 800404a:	693a      	ldr	r2, [r7, #16]
 800404c:	2380      	movs	r3, #128	; 0x80
 800404e:	025b      	lsls	r3, r3, #9
 8004050:	429a      	cmp	r2, r3
 8004052:	d217      	bcs.n	8004084 <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	b29a      	uxth	r2, r3
 8004058:	200e      	movs	r0, #14
 800405a:	183b      	adds	r3, r7, r0
 800405c:	210f      	movs	r1, #15
 800405e:	438a      	bics	r2, r1
 8004060:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	085b      	lsrs	r3, r3, #1
 8004066:	b29b      	uxth	r3, r3
 8004068:	2207      	movs	r2, #7
 800406a:	4013      	ands	r3, r2
 800406c:	b299      	uxth	r1, r3
 800406e:	183b      	adds	r3, r7, r0
 8004070:	183a      	adds	r2, r7, r0
 8004072:	8812      	ldrh	r2, [r2, #0]
 8004074:	430a      	orrs	r2, r1
 8004076:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	183a      	adds	r2, r7, r0
 800407e:	8812      	ldrh	r2, [r2, #0]
 8004080:	60da      	str	r2, [r3, #12]
 8004082:	e04c      	b.n	800411e <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8004084:	231e      	movs	r3, #30
 8004086:	18fb      	adds	r3, r7, r3
 8004088:	2201      	movs	r2, #1
 800408a:	701a      	strb	r2, [r3, #0]
 800408c:	e047      	b.n	800411e <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800408e:	231f      	movs	r3, #31
 8004090:	18fb      	adds	r3, r7, r3
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	2b08      	cmp	r3, #8
 8004096:	d015      	beq.n	80040c4 <UART_SetConfig+0x278>
 8004098:	dc18      	bgt.n	80040cc <UART_SetConfig+0x280>
 800409a:	2b04      	cmp	r3, #4
 800409c:	d00d      	beq.n	80040ba <UART_SetConfig+0x26e>
 800409e:	dc15      	bgt.n	80040cc <UART_SetConfig+0x280>
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d002      	beq.n	80040aa <UART_SetConfig+0x25e>
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d005      	beq.n	80040b4 <UART_SetConfig+0x268>
 80040a8:	e010      	b.n	80040cc <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040aa:	f7fe ffd9 	bl	8003060 <HAL_RCC_GetPCLK1Freq>
 80040ae:	0003      	movs	r3, r0
 80040b0:	61bb      	str	r3, [r7, #24]
        break;
 80040b2:	e012      	b.n	80040da <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040b4:	4b28      	ldr	r3, [pc, #160]	; (8004158 <UART_SetConfig+0x30c>)
 80040b6:	61bb      	str	r3, [r7, #24]
        break;
 80040b8:	e00f      	b.n	80040da <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040ba:	f7fe ff47 	bl	8002f4c <HAL_RCC_GetSysClockFreq>
 80040be:	0003      	movs	r3, r0
 80040c0:	61bb      	str	r3, [r7, #24]
        break;
 80040c2:	e00a      	b.n	80040da <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040c4:	2380      	movs	r3, #128	; 0x80
 80040c6:	021b      	lsls	r3, r3, #8
 80040c8:	61bb      	str	r3, [r7, #24]
        break;
 80040ca:	e006      	b.n	80040da <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 80040cc:	2300      	movs	r3, #0
 80040ce:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80040d0:	231e      	movs	r3, #30
 80040d2:	18fb      	adds	r3, r7, r3
 80040d4:	2201      	movs	r2, #1
 80040d6:	701a      	strb	r2, [r3, #0]
        break;
 80040d8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d01e      	beq.n	800411e <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	085a      	lsrs	r2, r3, #1
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	18d2      	adds	r2, r2, r3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	0019      	movs	r1, r3
 80040f0:	0010      	movs	r0, r2
 80040f2:	f7fc f811 	bl	8000118 <__udivsi3>
 80040f6:	0003      	movs	r3, r0
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	2b0f      	cmp	r3, #15
 8004100:	d909      	bls.n	8004116 <UART_SetConfig+0x2ca>
 8004102:	693a      	ldr	r2, [r7, #16]
 8004104:	2380      	movs	r3, #128	; 0x80
 8004106:	025b      	lsls	r3, r3, #9
 8004108:	429a      	cmp	r2, r3
 800410a:	d204      	bcs.n	8004116 <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	693a      	ldr	r2, [r7, #16]
 8004112:	60da      	str	r2, [r3, #12]
 8004114:	e003      	b.n	800411e <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8004116:	231e      	movs	r3, #30
 8004118:	18fb      	adds	r3, r7, r3
 800411a:	2201      	movs	r2, #1
 800411c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800412a:	231e      	movs	r3, #30
 800412c:	18fb      	adds	r3, r7, r3
 800412e:	781b      	ldrb	r3, [r3, #0]
}
 8004130:	0018      	movs	r0, r3
 8004132:	46bd      	mov	sp, r7
 8004134:	b008      	add	sp, #32
 8004136:	bd80      	pop	{r7, pc}
 8004138:	efff69f3 	.word	0xefff69f3
 800413c:	ffffcfff 	.word	0xffffcfff
 8004140:	fffff4ff 	.word	0xfffff4ff
 8004144:	40013800 	.word	0x40013800
 8004148:	40021000 	.word	0x40021000
 800414c:	40004400 	.word	0x40004400
 8004150:	40004800 	.word	0x40004800
 8004154:	40004c00 	.word	0x40004c00
 8004158:	007a1200 	.word	0x007a1200

0800415c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004168:	2201      	movs	r2, #1
 800416a:	4013      	ands	r3, r2
 800416c:	d00b      	beq.n	8004186 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	4a4a      	ldr	r2, [pc, #296]	; (80042a0 <UART_AdvFeatureConfig+0x144>)
 8004176:	4013      	ands	r3, r2
 8004178:	0019      	movs	r1, r3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	430a      	orrs	r2, r1
 8004184:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418a:	2202      	movs	r2, #2
 800418c:	4013      	ands	r3, r2
 800418e:	d00b      	beq.n	80041a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	4a43      	ldr	r2, [pc, #268]	; (80042a4 <UART_AdvFeatureConfig+0x148>)
 8004198:	4013      	ands	r3, r2
 800419a:	0019      	movs	r1, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	430a      	orrs	r2, r1
 80041a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ac:	2204      	movs	r2, #4
 80041ae:	4013      	ands	r3, r2
 80041b0:	d00b      	beq.n	80041ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	4a3b      	ldr	r2, [pc, #236]	; (80042a8 <UART_AdvFeatureConfig+0x14c>)
 80041ba:	4013      	ands	r3, r2
 80041bc:	0019      	movs	r1, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	430a      	orrs	r2, r1
 80041c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ce:	2208      	movs	r2, #8
 80041d0:	4013      	ands	r3, r2
 80041d2:	d00b      	beq.n	80041ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	4a34      	ldr	r2, [pc, #208]	; (80042ac <UART_AdvFeatureConfig+0x150>)
 80041dc:	4013      	ands	r3, r2
 80041de:	0019      	movs	r1, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	430a      	orrs	r2, r1
 80041ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f0:	2210      	movs	r2, #16
 80041f2:	4013      	ands	r3, r2
 80041f4:	d00b      	beq.n	800420e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	4a2c      	ldr	r2, [pc, #176]	; (80042b0 <UART_AdvFeatureConfig+0x154>)
 80041fe:	4013      	ands	r3, r2
 8004200:	0019      	movs	r1, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	430a      	orrs	r2, r1
 800420c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004212:	2220      	movs	r2, #32
 8004214:	4013      	ands	r3, r2
 8004216:	d00b      	beq.n	8004230 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	4a25      	ldr	r2, [pc, #148]	; (80042b4 <UART_AdvFeatureConfig+0x158>)
 8004220:	4013      	ands	r3, r2
 8004222:	0019      	movs	r1, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	430a      	orrs	r2, r1
 800422e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004234:	2240      	movs	r2, #64	; 0x40
 8004236:	4013      	ands	r3, r2
 8004238:	d01d      	beq.n	8004276 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	4a1d      	ldr	r2, [pc, #116]	; (80042b8 <UART_AdvFeatureConfig+0x15c>)
 8004242:	4013      	ands	r3, r2
 8004244:	0019      	movs	r1, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	430a      	orrs	r2, r1
 8004250:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004256:	2380      	movs	r3, #128	; 0x80
 8004258:	035b      	lsls	r3, r3, #13
 800425a:	429a      	cmp	r2, r3
 800425c:	d10b      	bne.n	8004276 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	4a15      	ldr	r2, [pc, #84]	; (80042bc <UART_AdvFeatureConfig+0x160>)
 8004266:	4013      	ands	r3, r2
 8004268:	0019      	movs	r1, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	430a      	orrs	r2, r1
 8004274:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427a:	2280      	movs	r2, #128	; 0x80
 800427c:	4013      	ands	r3, r2
 800427e:	d00b      	beq.n	8004298 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	4a0e      	ldr	r2, [pc, #56]	; (80042c0 <UART_AdvFeatureConfig+0x164>)
 8004288:	4013      	ands	r3, r2
 800428a:	0019      	movs	r1, r3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	430a      	orrs	r2, r1
 8004296:	605a      	str	r2, [r3, #4]
  }
}
 8004298:	46c0      	nop			; (mov r8, r8)
 800429a:	46bd      	mov	sp, r7
 800429c:	b002      	add	sp, #8
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	fffdffff 	.word	0xfffdffff
 80042a4:	fffeffff 	.word	0xfffeffff
 80042a8:	fffbffff 	.word	0xfffbffff
 80042ac:	ffff7fff 	.word	0xffff7fff
 80042b0:	ffffefff 	.word	0xffffefff
 80042b4:	ffffdfff 	.word	0xffffdfff
 80042b8:	ffefffff 	.word	0xffefffff
 80042bc:	ff9fffff 	.word	0xff9fffff
 80042c0:	fff7ffff 	.word	0xfff7ffff

080042c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b086      	sub	sp, #24
 80042c8:	af02      	add	r7, sp, #8
 80042ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2280      	movs	r2, #128	; 0x80
 80042d0:	2100      	movs	r1, #0
 80042d2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80042d4:	f7fc fbe0 	bl	8000a98 <HAL_GetTick>
 80042d8:	0003      	movs	r3, r0
 80042da:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2208      	movs	r2, #8
 80042e4:	4013      	ands	r3, r2
 80042e6:	2b08      	cmp	r3, #8
 80042e8:	d10c      	bne.n	8004304 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2280      	movs	r2, #128	; 0x80
 80042ee:	0391      	lsls	r1, r2, #14
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	4a17      	ldr	r2, [pc, #92]	; (8004350 <UART_CheckIdleState+0x8c>)
 80042f4:	9200      	str	r2, [sp, #0]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f000 f82c 	bl	8004354 <UART_WaitOnFlagUntilTimeout>
 80042fc:	1e03      	subs	r3, r0, #0
 80042fe:	d001      	beq.n	8004304 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004300:	2303      	movs	r3, #3
 8004302:	e021      	b.n	8004348 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2204      	movs	r2, #4
 800430c:	4013      	ands	r3, r2
 800430e:	2b04      	cmp	r3, #4
 8004310:	d10c      	bne.n	800432c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2280      	movs	r2, #128	; 0x80
 8004316:	03d1      	lsls	r1, r2, #15
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	4a0d      	ldr	r2, [pc, #52]	; (8004350 <UART_CheckIdleState+0x8c>)
 800431c:	9200      	str	r2, [sp, #0]
 800431e:	2200      	movs	r2, #0
 8004320:	f000 f818 	bl	8004354 <UART_WaitOnFlagUntilTimeout>
 8004324:	1e03      	subs	r3, r0, #0
 8004326:	d001      	beq.n	800432c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	e00d      	b.n	8004348 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2220      	movs	r2, #32
 8004330:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2220      	movs	r2, #32
 8004336:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2274      	movs	r2, #116	; 0x74
 8004342:	2100      	movs	r1, #0
 8004344:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004346:	2300      	movs	r3, #0
}
 8004348:	0018      	movs	r0, r3
 800434a:	46bd      	mov	sp, r7
 800434c:	b004      	add	sp, #16
 800434e:	bd80      	pop	{r7, pc}
 8004350:	01ffffff 	.word	0x01ffffff

08004354 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	60f8      	str	r0, [r7, #12]
 800435c:	60b9      	str	r1, [r7, #8]
 800435e:	603b      	str	r3, [r7, #0]
 8004360:	1dfb      	adds	r3, r7, #7
 8004362:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004364:	e05e      	b.n	8004424 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	3301      	adds	r3, #1
 800436a:	d05b      	beq.n	8004424 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800436c:	f7fc fb94 	bl	8000a98 <HAL_GetTick>
 8004370:	0002      	movs	r2, r0
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	69ba      	ldr	r2, [r7, #24]
 8004378:	429a      	cmp	r2, r3
 800437a:	d302      	bcc.n	8004382 <UART_WaitOnFlagUntilTimeout+0x2e>
 800437c:	69bb      	ldr	r3, [r7, #24]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d11b      	bne.n	80043ba <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	492f      	ldr	r1, [pc, #188]	; (800444c <UART_WaitOnFlagUntilTimeout+0xf8>)
 800438e:	400a      	ands	r2, r1
 8004390:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	689a      	ldr	r2, [r3, #8]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2101      	movs	r1, #1
 800439e:	438a      	bics	r2, r1
 80043a0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2220      	movs	r2, #32
 80043a6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2220      	movs	r2, #32
 80043ac:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2274      	movs	r2, #116	; 0x74
 80043b2:	2100      	movs	r1, #0
 80043b4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e044      	b.n	8004444 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2204      	movs	r2, #4
 80043c2:	4013      	ands	r3, r2
 80043c4:	d02e      	beq.n	8004424 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	69da      	ldr	r2, [r3, #28]
 80043cc:	2380      	movs	r3, #128	; 0x80
 80043ce:	011b      	lsls	r3, r3, #4
 80043d0:	401a      	ands	r2, r3
 80043d2:	2380      	movs	r3, #128	; 0x80
 80043d4:	011b      	lsls	r3, r3, #4
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d124      	bne.n	8004424 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2280      	movs	r2, #128	; 0x80
 80043e0:	0112      	lsls	r2, r2, #4
 80043e2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4917      	ldr	r1, [pc, #92]	; (800444c <UART_WaitOnFlagUntilTimeout+0xf8>)
 80043f0:	400a      	ands	r2, r1
 80043f2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	689a      	ldr	r2, [r3, #8]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2101      	movs	r1, #1
 8004400:	438a      	bics	r2, r1
 8004402:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2220      	movs	r2, #32
 8004408:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2220      	movs	r2, #32
 800440e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2280      	movs	r2, #128	; 0x80
 8004414:	2120      	movs	r1, #32
 8004416:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2274      	movs	r2, #116	; 0x74
 800441c:	2100      	movs	r1, #0
 800441e:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	e00f      	b.n	8004444 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	69db      	ldr	r3, [r3, #28]
 800442a:	68ba      	ldr	r2, [r7, #8]
 800442c:	4013      	ands	r3, r2
 800442e:	68ba      	ldr	r2, [r7, #8]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	425a      	negs	r2, r3
 8004434:	4153      	adcs	r3, r2
 8004436:	b2db      	uxtb	r3, r3
 8004438:	001a      	movs	r2, r3
 800443a:	1dfb      	adds	r3, r7, #7
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	429a      	cmp	r2, r3
 8004440:	d091      	beq.n	8004366 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004442:	2300      	movs	r3, #0
}
 8004444:	0018      	movs	r0, r3
 8004446:	46bd      	mov	sp, r7
 8004448:	b004      	add	sp, #16
 800444a:	bd80      	pop	{r7, pc}
 800444c:	fffffe5f 	.word	0xfffffe5f

08004450 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4912      	ldr	r1, [pc, #72]	; (80044ac <UART_EndRxTransfer+0x5c>)
 8004464:	400a      	ands	r2, r1
 8004466:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	689a      	ldr	r2, [r3, #8]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2101      	movs	r1, #1
 8004474:	438a      	bics	r2, r1
 8004476:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800447c:	2b01      	cmp	r3, #1
 800447e:	d107      	bne.n	8004490 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2110      	movs	r1, #16
 800448c:	438a      	bics	r2, r1
 800448e:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2220      	movs	r2, #32
 8004494:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	665a      	str	r2, [r3, #100]	; 0x64
}
 80044a2:	46c0      	nop			; (mov r8, r8)
 80044a4:	46bd      	mov	sp, r7
 80044a6:	b002      	add	sp, #8
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	46c0      	nop			; (mov r8, r8)
 80044ac:	fffffedf 	.word	0xfffffedf

080044b0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b084      	sub	sp, #16
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	225a      	movs	r2, #90	; 0x5a
 80044c2:	2100      	movs	r1, #0
 80044c4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2252      	movs	r2, #82	; 0x52
 80044ca:	2100      	movs	r1, #0
 80044cc:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	0018      	movs	r0, r3
 80044d2:	f7ff fca7 	bl	8003e24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044d6:	46c0      	nop			; (mov r8, r8)
 80044d8:	46bd      	mov	sp, r7
 80044da:	b004      	add	sp, #16
 80044dc:	bd80      	pop	{r7, pc}

080044de <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80044de:	b580      	push	{r7, lr}
 80044e0:	b082      	sub	sp, #8
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2140      	movs	r1, #64	; 0x40
 80044f2:	438a      	bics	r2, r1
 80044f4:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2220      	movs	r2, #32
 80044fa:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	0018      	movs	r0, r3
 8004506:	f7ff fc85 	bl	8003e14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800450a:	46c0      	nop			; (mov r8, r8)
 800450c:	46bd      	mov	sp, r7
 800450e:	b002      	add	sp, #8
 8004510:	bd80      	pop	{r7, pc}

08004512 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004512:	b580      	push	{r7, lr}
 8004514:	b082      	sub	sp, #8
 8004516:	af00      	add	r7, sp, #0
 8004518:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800451a:	46c0      	nop			; (mov r8, r8)
 800451c:	46bd      	mov	sp, r7
 800451e:	b002      	add	sp, #8
 8004520:	bd80      	pop	{r7, pc}
	...

08004524 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b09a      	sub	sp, #104	; 0x68
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800452e:	2367      	movs	r3, #103	; 0x67
 8004530:	18fb      	adds	r3, r7, r3
 8004532:	2200      	movs	r2, #0
 8004534:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	18d3      	adds	r3, r2, r3
 8004540:	881b      	ldrh	r3, [r3, #0]
 8004542:	b29a      	uxth	r2, r3
 8004544:	2364      	movs	r3, #100	; 0x64
 8004546:	18fb      	adds	r3, r7, r3
 8004548:	49cf      	ldr	r1, [pc, #828]	; (8004888 <USB_ActivateEndpoint+0x364>)
 800454a:	400a      	ands	r2, r1
 800454c:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	78db      	ldrb	r3, [r3, #3]
 8004552:	2b03      	cmp	r3, #3
 8004554:	d017      	beq.n	8004586 <USB_ActivateEndpoint+0x62>
 8004556:	dc28      	bgt.n	80045aa <USB_ActivateEndpoint+0x86>
 8004558:	2b02      	cmp	r3, #2
 800455a:	d00e      	beq.n	800457a <USB_ActivateEndpoint+0x56>
 800455c:	dc25      	bgt.n	80045aa <USB_ActivateEndpoint+0x86>
 800455e:	2b00      	cmp	r3, #0
 8004560:	d002      	beq.n	8004568 <USB_ActivateEndpoint+0x44>
 8004562:	2b01      	cmp	r3, #1
 8004564:	d018      	beq.n	8004598 <USB_ActivateEndpoint+0x74>
 8004566:	e020      	b.n	80045aa <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004568:	2264      	movs	r2, #100	; 0x64
 800456a:	18bb      	adds	r3, r7, r2
 800456c:	18ba      	adds	r2, r7, r2
 800456e:	8812      	ldrh	r2, [r2, #0]
 8004570:	2180      	movs	r1, #128	; 0x80
 8004572:	0089      	lsls	r1, r1, #2
 8004574:	430a      	orrs	r2, r1
 8004576:	801a      	strh	r2, [r3, #0]
      break;
 8004578:	e01c      	b.n	80045b4 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 800457a:	2264      	movs	r2, #100	; 0x64
 800457c:	18bb      	adds	r3, r7, r2
 800457e:	18ba      	adds	r2, r7, r2
 8004580:	8812      	ldrh	r2, [r2, #0]
 8004582:	801a      	strh	r2, [r3, #0]
      break;
 8004584:	e016      	b.n	80045b4 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004586:	2264      	movs	r2, #100	; 0x64
 8004588:	18bb      	adds	r3, r7, r2
 800458a:	18ba      	adds	r2, r7, r2
 800458c:	8812      	ldrh	r2, [r2, #0]
 800458e:	21c0      	movs	r1, #192	; 0xc0
 8004590:	00c9      	lsls	r1, r1, #3
 8004592:	430a      	orrs	r2, r1
 8004594:	801a      	strh	r2, [r3, #0]
      break;
 8004596:	e00d      	b.n	80045b4 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004598:	2264      	movs	r2, #100	; 0x64
 800459a:	18bb      	adds	r3, r7, r2
 800459c:	18ba      	adds	r2, r7, r2
 800459e:	8812      	ldrh	r2, [r2, #0]
 80045a0:	2180      	movs	r1, #128	; 0x80
 80045a2:	00c9      	lsls	r1, r1, #3
 80045a4:	430a      	orrs	r2, r1
 80045a6:	801a      	strh	r2, [r3, #0]
      break;
 80045a8:	e004      	b.n	80045b4 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 80045aa:	2367      	movs	r3, #103	; 0x67
 80045ac:	18fb      	adds	r3, r7, r3
 80045ae:	2201      	movs	r2, #1
 80045b0:	701a      	strb	r2, [r3, #0]
      break;
 80045b2:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	18d3      	adds	r3, r2, r3
 80045be:	2264      	movs	r2, #100	; 0x64
 80045c0:	18ba      	adds	r2, r7, r2
 80045c2:	8812      	ldrh	r2, [r2, #0]
 80045c4:	49b1      	ldr	r1, [pc, #708]	; (800488c <USB_ActivateEndpoint+0x368>)
 80045c6:	430a      	orrs	r2, r1
 80045c8:	b292      	uxth	r2, r2
 80045ca:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	18d3      	adds	r3, r2, r3
 80045d6:	881b      	ldrh	r3, [r3, #0]
 80045d8:	b29b      	uxth	r3, r3
 80045da:	b21b      	sxth	r3, r3
 80045dc:	4aac      	ldr	r2, [pc, #688]	; (8004890 <USB_ActivateEndpoint+0x36c>)
 80045de:	4013      	ands	r3, r2
 80045e0:	b21a      	sxth	r2, r3
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	b21b      	sxth	r3, r3
 80045e8:	4313      	orrs	r3, r2
 80045ea:	b21a      	sxth	r2, r3
 80045ec:	215e      	movs	r1, #94	; 0x5e
 80045ee:	187b      	adds	r3, r7, r1
 80045f0:	801a      	strh	r2, [r3, #0]
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	18d3      	adds	r3, r2, r3
 80045fc:	187a      	adds	r2, r7, r1
 80045fe:	8812      	ldrh	r2, [r2, #0]
 8004600:	49a2      	ldr	r1, [pc, #648]	; (800488c <USB_ActivateEndpoint+0x368>)
 8004602:	430a      	orrs	r2, r1
 8004604:	b292      	uxth	r2, r2
 8004606:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	7b1b      	ldrb	r3, [r3, #12]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d000      	beq.n	8004612 <USB_ActivateEndpoint+0xee>
 8004610:	e150      	b.n	80048b4 <USB_ActivateEndpoint+0x390>
  {
    if (ep->is_in != 0U)
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	785b      	ldrb	r3, [r3, #1]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d100      	bne.n	800461c <USB_ActivateEndpoint+0xf8>
 800461a:	e07a      	b.n	8004712 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	617b      	str	r3, [r7, #20]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2250      	movs	r2, #80	; 0x50
 8004624:	5a9b      	ldrh	r3, [r3, r2]
 8004626:	b29b      	uxth	r3, r3
 8004628:	001a      	movs	r2, r3
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	189b      	adds	r3, r3, r2
 800462e:	617b      	str	r3, [r7, #20]
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	00da      	lsls	r2, r3, #3
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	18d3      	adds	r3, r2, r3
 800463a:	2280      	movs	r2, #128	; 0x80
 800463c:	00d2      	lsls	r2, r2, #3
 800463e:	4694      	mov	ip, r2
 8004640:	4463      	add	r3, ip
 8004642:	613b      	str	r3, [r7, #16]
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	88db      	ldrh	r3, [r3, #6]
 8004648:	085b      	lsrs	r3, r3, #1
 800464a:	b29b      	uxth	r3, r3
 800464c:	18db      	adds	r3, r3, r3
 800464e:	b29a      	uxth	r2, r3
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	18d2      	adds	r2, r2, r3
 800465e:	210e      	movs	r1, #14
 8004660:	187b      	adds	r3, r7, r1
 8004662:	8812      	ldrh	r2, [r2, #0]
 8004664:	801a      	strh	r2, [r3, #0]
 8004666:	187b      	adds	r3, r7, r1
 8004668:	881b      	ldrh	r3, [r3, #0]
 800466a:	2240      	movs	r2, #64	; 0x40
 800466c:	4013      	ands	r3, r2
 800466e:	d016      	beq.n	800469e <USB_ActivateEndpoint+0x17a>
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	18d3      	adds	r3, r2, r3
 800467a:	881b      	ldrh	r3, [r3, #0]
 800467c:	b29a      	uxth	r2, r3
 800467e:	200c      	movs	r0, #12
 8004680:	183b      	adds	r3, r7, r0
 8004682:	4983      	ldr	r1, [pc, #524]	; (8004890 <USB_ActivateEndpoint+0x36c>)
 8004684:	400a      	ands	r2, r1
 8004686:	801a      	strh	r2, [r3, #0]
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	18d3      	adds	r3, r2, r3
 8004692:	183a      	adds	r2, r7, r0
 8004694:	8812      	ldrh	r2, [r2, #0]
 8004696:	497f      	ldr	r1, [pc, #508]	; (8004894 <USB_ActivateEndpoint+0x370>)
 8004698:	430a      	orrs	r2, r1
 800469a:	b292      	uxth	r2, r2
 800469c:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	78db      	ldrb	r3, [r3, #3]
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d01d      	beq.n	80046e2 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	18d3      	adds	r3, r2, r3
 80046b0:	881b      	ldrh	r3, [r3, #0]
 80046b2:	b29a      	uxth	r2, r3
 80046b4:	2008      	movs	r0, #8
 80046b6:	183b      	adds	r3, r7, r0
 80046b8:	4977      	ldr	r1, [pc, #476]	; (8004898 <USB_ActivateEndpoint+0x374>)
 80046ba:	400a      	ands	r2, r1
 80046bc:	801a      	strh	r2, [r3, #0]
 80046be:	183b      	adds	r3, r7, r0
 80046c0:	183a      	adds	r2, r7, r0
 80046c2:	8812      	ldrh	r2, [r2, #0]
 80046c4:	2120      	movs	r1, #32
 80046c6:	404a      	eors	r2, r1
 80046c8:	801a      	strh	r2, [r3, #0]
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	18d3      	adds	r3, r2, r3
 80046d4:	183a      	adds	r2, r7, r0
 80046d6:	8812      	ldrh	r2, [r2, #0]
 80046d8:	496c      	ldr	r1, [pc, #432]	; (800488c <USB_ActivateEndpoint+0x368>)
 80046da:	430a      	orrs	r2, r1
 80046dc:	b292      	uxth	r2, r2
 80046de:	801a      	strh	r2, [r3, #0]
 80046e0:	e25e      	b.n	8004ba0 <USB_ActivateEndpoint+0x67c>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	18d3      	adds	r3, r2, r3
 80046ec:	881b      	ldrh	r3, [r3, #0]
 80046ee:	b29a      	uxth	r2, r3
 80046f0:	200a      	movs	r0, #10
 80046f2:	183b      	adds	r3, r7, r0
 80046f4:	4968      	ldr	r1, [pc, #416]	; (8004898 <USB_ActivateEndpoint+0x374>)
 80046f6:	400a      	ands	r2, r1
 80046f8:	801a      	strh	r2, [r3, #0]
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	18d3      	adds	r3, r2, r3
 8004704:	183a      	adds	r2, r7, r0
 8004706:	8812      	ldrh	r2, [r2, #0]
 8004708:	4960      	ldr	r1, [pc, #384]	; (800488c <USB_ActivateEndpoint+0x368>)
 800470a:	430a      	orrs	r2, r1
 800470c:	b292      	uxth	r2, r2
 800470e:	801a      	strh	r2, [r3, #0]
 8004710:	e246      	b.n	8004ba0 <USB_ActivateEndpoint+0x67c>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2250      	movs	r2, #80	; 0x50
 800471a:	5a9b      	ldrh	r3, [r3, r2]
 800471c:	b29b      	uxth	r3, r3
 800471e:	001a      	movs	r2, r3
 8004720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004722:	189b      	adds	r3, r3, r2
 8004724:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	781b      	ldrb	r3, [r3, #0]
 800472a:	00da      	lsls	r2, r3, #3
 800472c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800472e:	18d3      	adds	r3, r2, r3
 8004730:	4a5a      	ldr	r2, [pc, #360]	; (800489c <USB_ActivateEndpoint+0x378>)
 8004732:	4694      	mov	ip, r2
 8004734:	4463      	add	r3, ip
 8004736:	62bb      	str	r3, [r7, #40]	; 0x28
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	88db      	ldrh	r3, [r3, #6]
 800473c:	085b      	lsrs	r3, r3, #1
 800473e:	b29b      	uxth	r3, r3
 8004740:	18db      	adds	r3, r3, r3
 8004742:	b29a      	uxth	r2, r3
 8004744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004746:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	627b      	str	r3, [r7, #36]	; 0x24
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2250      	movs	r2, #80	; 0x50
 8004750:	5a9b      	ldrh	r3, [r3, r2]
 8004752:	b29b      	uxth	r3, r3
 8004754:	001a      	movs	r2, r3
 8004756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004758:	189b      	adds	r3, r3, r2
 800475a:	627b      	str	r3, [r7, #36]	; 0x24
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	00da      	lsls	r2, r3, #3
 8004762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004764:	18d3      	adds	r3, r2, r3
 8004766:	4a4e      	ldr	r2, [pc, #312]	; (80048a0 <USB_ActivateEndpoint+0x37c>)
 8004768:	4694      	mov	ip, r2
 800476a:	4463      	add	r3, ip
 800476c:	623b      	str	r3, [r7, #32]
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d110      	bne.n	8004798 <USB_ActivateEndpoint+0x274>
 8004776:	6a3b      	ldr	r3, [r7, #32]
 8004778:	881b      	ldrh	r3, [r3, #0]
 800477a:	b29b      	uxth	r3, r3
 800477c:	4a49      	ldr	r2, [pc, #292]	; (80048a4 <USB_ActivateEndpoint+0x380>)
 800477e:	4013      	ands	r3, r2
 8004780:	b29a      	uxth	r2, r3
 8004782:	6a3b      	ldr	r3, [r7, #32]
 8004784:	801a      	strh	r2, [r3, #0]
 8004786:	6a3b      	ldr	r3, [r7, #32]
 8004788:	881b      	ldrh	r3, [r3, #0]
 800478a:	b29b      	uxth	r3, r3
 800478c:	4a46      	ldr	r2, [pc, #280]	; (80048a8 <USB_ActivateEndpoint+0x384>)
 800478e:	4313      	orrs	r3, r2
 8004790:	b29a      	uxth	r2, r3
 8004792:	6a3b      	ldr	r3, [r7, #32]
 8004794:	801a      	strh	r2, [r3, #0]
 8004796:	e02b      	b.n	80047f0 <USB_ActivateEndpoint+0x2cc>
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	2b3e      	cmp	r3, #62	; 0x3e
 800479e:	d812      	bhi.n	80047c6 <USB_ActivateEndpoint+0x2a2>
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	691b      	ldr	r3, [r3, #16]
 80047a4:	085b      	lsrs	r3, r3, #1
 80047a6:	663b      	str	r3, [r7, #96]	; 0x60
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	691b      	ldr	r3, [r3, #16]
 80047ac:	2201      	movs	r2, #1
 80047ae:	4013      	ands	r3, r2
 80047b0:	d002      	beq.n	80047b8 <USB_ActivateEndpoint+0x294>
 80047b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047b4:	3301      	adds	r3, #1
 80047b6:	663b      	str	r3, [r7, #96]	; 0x60
 80047b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	029b      	lsls	r3, r3, #10
 80047be:	b29a      	uxth	r2, r3
 80047c0:	6a3b      	ldr	r3, [r7, #32]
 80047c2:	801a      	strh	r2, [r3, #0]
 80047c4:	e014      	b.n	80047f0 <USB_ActivateEndpoint+0x2cc>
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	095b      	lsrs	r3, r3, #5
 80047cc:	663b      	str	r3, [r7, #96]	; 0x60
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	221f      	movs	r2, #31
 80047d4:	4013      	ands	r3, r2
 80047d6:	d102      	bne.n	80047de <USB_ActivateEndpoint+0x2ba>
 80047d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047da:	3b01      	subs	r3, #1
 80047dc:	663b      	str	r3, [r7, #96]	; 0x60
 80047de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	029b      	lsls	r3, r3, #10
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	4a30      	ldr	r2, [pc, #192]	; (80048a8 <USB_ActivateEndpoint+0x384>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	b29a      	uxth	r2, r3
 80047ec:	6a3b      	ldr	r3, [r7, #32]
 80047ee:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	18d2      	adds	r2, r2, r3
 80047fa:	211e      	movs	r1, #30
 80047fc:	187b      	adds	r3, r7, r1
 80047fe:	8812      	ldrh	r2, [r2, #0]
 8004800:	801a      	strh	r2, [r3, #0]
 8004802:	187b      	adds	r3, r7, r1
 8004804:	881a      	ldrh	r2, [r3, #0]
 8004806:	2380      	movs	r3, #128	; 0x80
 8004808:	01db      	lsls	r3, r3, #7
 800480a:	4013      	ands	r3, r2
 800480c:	d016      	beq.n	800483c <USB_ActivateEndpoint+0x318>
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	18d3      	adds	r3, r2, r3
 8004818:	881b      	ldrh	r3, [r3, #0]
 800481a:	b29a      	uxth	r2, r3
 800481c:	201c      	movs	r0, #28
 800481e:	183b      	adds	r3, r7, r0
 8004820:	491b      	ldr	r1, [pc, #108]	; (8004890 <USB_ActivateEndpoint+0x36c>)
 8004822:	400a      	ands	r2, r1
 8004824:	801a      	strh	r2, [r3, #0]
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	18d3      	adds	r3, r2, r3
 8004830:	183a      	adds	r2, r7, r0
 8004832:	8812      	ldrh	r2, [r2, #0]
 8004834:	491d      	ldr	r1, [pc, #116]	; (80048ac <USB_ActivateEndpoint+0x388>)
 8004836:	430a      	orrs	r2, r1
 8004838:	b292      	uxth	r2, r2
 800483a:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	18d3      	adds	r3, r2, r3
 8004846:	881b      	ldrh	r3, [r3, #0]
 8004848:	b29a      	uxth	r2, r3
 800484a:	201a      	movs	r0, #26
 800484c:	183b      	adds	r3, r7, r0
 800484e:	4918      	ldr	r1, [pc, #96]	; (80048b0 <USB_ActivateEndpoint+0x38c>)
 8004850:	400a      	ands	r2, r1
 8004852:	801a      	strh	r2, [r3, #0]
 8004854:	183b      	adds	r3, r7, r0
 8004856:	183a      	adds	r2, r7, r0
 8004858:	8812      	ldrh	r2, [r2, #0]
 800485a:	2180      	movs	r1, #128	; 0x80
 800485c:	0149      	lsls	r1, r1, #5
 800485e:	404a      	eors	r2, r1
 8004860:	801a      	strh	r2, [r3, #0]
 8004862:	183b      	adds	r3, r7, r0
 8004864:	183a      	adds	r2, r7, r0
 8004866:	8812      	ldrh	r2, [r2, #0]
 8004868:	2180      	movs	r1, #128	; 0x80
 800486a:	0189      	lsls	r1, r1, #6
 800486c:	404a      	eors	r2, r1
 800486e:	801a      	strh	r2, [r3, #0]
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	18d3      	adds	r3, r2, r3
 800487a:	183a      	adds	r2, r7, r0
 800487c:	8812      	ldrh	r2, [r2, #0]
 800487e:	4903      	ldr	r1, [pc, #12]	; (800488c <USB_ActivateEndpoint+0x368>)
 8004880:	430a      	orrs	r2, r1
 8004882:	b292      	uxth	r2, r2
 8004884:	801a      	strh	r2, [r3, #0]
 8004886:	e18b      	b.n	8004ba0 <USB_ActivateEndpoint+0x67c>
 8004888:	ffff898f 	.word	0xffff898f
 800488c:	ffff8080 	.word	0xffff8080
 8004890:	ffff8f8f 	.word	0xffff8f8f
 8004894:	ffff80c0 	.word	0xffff80c0
 8004898:	ffff8fbf 	.word	0xffff8fbf
 800489c:	00000404 	.word	0x00000404
 80048a0:	00000406 	.word	0x00000406
 80048a4:	ffff83ff 	.word	0xffff83ff
 80048a8:	ffff8000 	.word	0xffff8000
 80048ac:	ffffc080 	.word	0xffffc080
 80048b0:	ffffbf8f 	.word	0xffffbf8f
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	18d3      	adds	r3, r2, r3
 80048be:	881b      	ldrh	r3, [r3, #0]
 80048c0:	b29a      	uxth	r2, r3
 80048c2:	205c      	movs	r0, #92	; 0x5c
 80048c4:	183b      	adds	r3, r7, r0
 80048c6:	49ba      	ldr	r1, [pc, #744]	; (8004bb0 <USB_ActivateEndpoint+0x68c>)
 80048c8:	400a      	ands	r2, r1
 80048ca:	801a      	strh	r2, [r3, #0]
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	18d3      	adds	r3, r2, r3
 80048d6:	183a      	adds	r2, r7, r0
 80048d8:	8812      	ldrh	r2, [r2, #0]
 80048da:	49b6      	ldr	r1, [pc, #728]	; (8004bb4 <USB_ActivateEndpoint+0x690>)
 80048dc:	430a      	orrs	r2, r1
 80048de:	b292      	uxth	r2, r2
 80048e0:	801a      	strh	r2, [r3, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2250      	movs	r2, #80	; 0x50
 80048ea:	5a9b      	ldrh	r3, [r3, r2]
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	001a      	movs	r2, r3
 80048f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048f2:	189b      	adds	r3, r3, r2
 80048f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	781b      	ldrb	r3, [r3, #0]
 80048fa:	00da      	lsls	r2, r3, #3
 80048fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048fe:	18d3      	adds	r3, r2, r3
 8004900:	2280      	movs	r2, #128	; 0x80
 8004902:	00d2      	lsls	r2, r2, #3
 8004904:	4694      	mov	ip, r2
 8004906:	4463      	add	r3, ip
 8004908:	657b      	str	r3, [r7, #84]	; 0x54
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	891b      	ldrh	r3, [r3, #8]
 800490e:	085b      	lsrs	r3, r3, #1
 8004910:	b29b      	uxth	r3, r3
 8004912:	18db      	adds	r3, r3, r3
 8004914:	b29a      	uxth	r2, r3
 8004916:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004918:	801a      	strh	r2, [r3, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	653b      	str	r3, [r7, #80]	; 0x50
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2250      	movs	r2, #80	; 0x50
 8004922:	5a9b      	ldrh	r3, [r3, r2]
 8004924:	b29b      	uxth	r3, r3
 8004926:	001a      	movs	r2, r3
 8004928:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800492a:	189b      	adds	r3, r3, r2
 800492c:	653b      	str	r3, [r7, #80]	; 0x50
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	00da      	lsls	r2, r3, #3
 8004934:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004936:	18d3      	adds	r3, r2, r3
 8004938:	4a9f      	ldr	r2, [pc, #636]	; (8004bb8 <USB_ActivateEndpoint+0x694>)
 800493a:	4694      	mov	ip, r2
 800493c:	4463      	add	r3, ip
 800493e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	895b      	ldrh	r3, [r3, #10]
 8004944:	085b      	lsrs	r3, r3, #1
 8004946:	b29b      	uxth	r3, r3
 8004948:	18db      	adds	r3, r3, r3
 800494a:	b29a      	uxth	r2, r3
 800494c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800494e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	785b      	ldrb	r3, [r3, #1]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d000      	beq.n	800495a <USB_ActivateEndpoint+0x436>
 8004958:	e087      	b.n	8004a6a <USB_ActivateEndpoint+0x546>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	781b      	ldrb	r3, [r3, #0]
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	18d2      	adds	r2, r2, r3
 8004964:	213c      	movs	r1, #60	; 0x3c
 8004966:	187b      	adds	r3, r7, r1
 8004968:	8812      	ldrh	r2, [r2, #0]
 800496a:	801a      	strh	r2, [r3, #0]
 800496c:	187b      	adds	r3, r7, r1
 800496e:	881a      	ldrh	r2, [r3, #0]
 8004970:	2380      	movs	r3, #128	; 0x80
 8004972:	01db      	lsls	r3, r3, #7
 8004974:	4013      	ands	r3, r2
 8004976:	d016      	beq.n	80049a6 <USB_ActivateEndpoint+0x482>
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	18d3      	adds	r3, r2, r3
 8004982:	881b      	ldrh	r3, [r3, #0]
 8004984:	b29a      	uxth	r2, r3
 8004986:	203a      	movs	r0, #58	; 0x3a
 8004988:	183b      	adds	r3, r7, r0
 800498a:	4989      	ldr	r1, [pc, #548]	; (8004bb0 <USB_ActivateEndpoint+0x68c>)
 800498c:	400a      	ands	r2, r1
 800498e:	801a      	strh	r2, [r3, #0]
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	18d3      	adds	r3, r2, r3
 800499a:	183a      	adds	r2, r7, r0
 800499c:	8812      	ldrh	r2, [r2, #0]
 800499e:	4987      	ldr	r1, [pc, #540]	; (8004bbc <USB_ActivateEndpoint+0x698>)
 80049a0:	430a      	orrs	r2, r1
 80049a2:	b292      	uxth	r2, r2
 80049a4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	18d2      	adds	r2, r2, r3
 80049b0:	2138      	movs	r1, #56	; 0x38
 80049b2:	187b      	adds	r3, r7, r1
 80049b4:	8812      	ldrh	r2, [r2, #0]
 80049b6:	801a      	strh	r2, [r3, #0]
 80049b8:	187b      	adds	r3, r7, r1
 80049ba:	881b      	ldrh	r3, [r3, #0]
 80049bc:	2240      	movs	r2, #64	; 0x40
 80049be:	4013      	ands	r3, r2
 80049c0:	d016      	beq.n	80049f0 <USB_ActivateEndpoint+0x4cc>
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	18d3      	adds	r3, r2, r3
 80049cc:	881b      	ldrh	r3, [r3, #0]
 80049ce:	b29a      	uxth	r2, r3
 80049d0:	2036      	movs	r0, #54	; 0x36
 80049d2:	183b      	adds	r3, r7, r0
 80049d4:	4976      	ldr	r1, [pc, #472]	; (8004bb0 <USB_ActivateEndpoint+0x68c>)
 80049d6:	400a      	ands	r2, r1
 80049d8:	801a      	strh	r2, [r3, #0]
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	18d3      	adds	r3, r2, r3
 80049e4:	183a      	adds	r2, r7, r0
 80049e6:	8812      	ldrh	r2, [r2, #0]
 80049e8:	4975      	ldr	r1, [pc, #468]	; (8004bc0 <USB_ActivateEndpoint+0x69c>)
 80049ea:	430a      	orrs	r2, r1
 80049ec:	b292      	uxth	r2, r2
 80049ee:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	18d3      	adds	r3, r2, r3
 80049fa:	881b      	ldrh	r3, [r3, #0]
 80049fc:	b29a      	uxth	r2, r3
 80049fe:	2034      	movs	r0, #52	; 0x34
 8004a00:	183b      	adds	r3, r7, r0
 8004a02:	4970      	ldr	r1, [pc, #448]	; (8004bc4 <USB_ActivateEndpoint+0x6a0>)
 8004a04:	400a      	ands	r2, r1
 8004a06:	801a      	strh	r2, [r3, #0]
 8004a08:	183b      	adds	r3, r7, r0
 8004a0a:	183a      	adds	r2, r7, r0
 8004a0c:	8812      	ldrh	r2, [r2, #0]
 8004a0e:	2180      	movs	r1, #128	; 0x80
 8004a10:	0149      	lsls	r1, r1, #5
 8004a12:	404a      	eors	r2, r1
 8004a14:	801a      	strh	r2, [r3, #0]
 8004a16:	183b      	adds	r3, r7, r0
 8004a18:	183a      	adds	r2, r7, r0
 8004a1a:	8812      	ldrh	r2, [r2, #0]
 8004a1c:	2180      	movs	r1, #128	; 0x80
 8004a1e:	0189      	lsls	r1, r1, #6
 8004a20:	404a      	eors	r2, r1
 8004a22:	801a      	strh	r2, [r3, #0]
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	18d3      	adds	r3, r2, r3
 8004a2e:	183a      	adds	r2, r7, r0
 8004a30:	8812      	ldrh	r2, [r2, #0]
 8004a32:	4965      	ldr	r1, [pc, #404]	; (8004bc8 <USB_ActivateEndpoint+0x6a4>)
 8004a34:	430a      	orrs	r2, r1
 8004a36:	b292      	uxth	r2, r2
 8004a38:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	18d3      	adds	r3, r2, r3
 8004a44:	881b      	ldrh	r3, [r3, #0]
 8004a46:	b29a      	uxth	r2, r3
 8004a48:	2032      	movs	r0, #50	; 0x32
 8004a4a:	183b      	adds	r3, r7, r0
 8004a4c:	495f      	ldr	r1, [pc, #380]	; (8004bcc <USB_ActivateEndpoint+0x6a8>)
 8004a4e:	400a      	ands	r2, r1
 8004a50:	801a      	strh	r2, [r3, #0]
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	18d3      	adds	r3, r2, r3
 8004a5c:	183a      	adds	r2, r7, r0
 8004a5e:	8812      	ldrh	r2, [r2, #0]
 8004a60:	4959      	ldr	r1, [pc, #356]	; (8004bc8 <USB_ActivateEndpoint+0x6a4>)
 8004a62:	430a      	orrs	r2, r1
 8004a64:	b292      	uxth	r2, r2
 8004a66:	801a      	strh	r2, [r3, #0]
 8004a68:	e09a      	b.n	8004ba0 <USB_ActivateEndpoint+0x67c>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	18d2      	adds	r2, r2, r3
 8004a74:	214a      	movs	r1, #74	; 0x4a
 8004a76:	187b      	adds	r3, r7, r1
 8004a78:	8812      	ldrh	r2, [r2, #0]
 8004a7a:	801a      	strh	r2, [r3, #0]
 8004a7c:	187b      	adds	r3, r7, r1
 8004a7e:	881a      	ldrh	r2, [r3, #0]
 8004a80:	2380      	movs	r3, #128	; 0x80
 8004a82:	01db      	lsls	r3, r3, #7
 8004a84:	4013      	ands	r3, r2
 8004a86:	d016      	beq.n	8004ab6 <USB_ActivateEndpoint+0x592>
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	781b      	ldrb	r3, [r3, #0]
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	18d3      	adds	r3, r2, r3
 8004a92:	881b      	ldrh	r3, [r3, #0]
 8004a94:	b29a      	uxth	r2, r3
 8004a96:	2048      	movs	r0, #72	; 0x48
 8004a98:	183b      	adds	r3, r7, r0
 8004a9a:	4945      	ldr	r1, [pc, #276]	; (8004bb0 <USB_ActivateEndpoint+0x68c>)
 8004a9c:	400a      	ands	r2, r1
 8004a9e:	801a      	strh	r2, [r3, #0]
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	18d3      	adds	r3, r2, r3
 8004aaa:	183a      	adds	r2, r7, r0
 8004aac:	8812      	ldrh	r2, [r2, #0]
 8004aae:	4943      	ldr	r1, [pc, #268]	; (8004bbc <USB_ActivateEndpoint+0x698>)
 8004ab0:	430a      	orrs	r2, r1
 8004ab2:	b292      	uxth	r2, r2
 8004ab4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	18d2      	adds	r2, r2, r3
 8004ac0:	2146      	movs	r1, #70	; 0x46
 8004ac2:	187b      	adds	r3, r7, r1
 8004ac4:	8812      	ldrh	r2, [r2, #0]
 8004ac6:	801a      	strh	r2, [r3, #0]
 8004ac8:	187b      	adds	r3, r7, r1
 8004aca:	881b      	ldrh	r3, [r3, #0]
 8004acc:	2240      	movs	r2, #64	; 0x40
 8004ace:	4013      	ands	r3, r2
 8004ad0:	d016      	beq.n	8004b00 <USB_ActivateEndpoint+0x5dc>
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	18d3      	adds	r3, r2, r3
 8004adc:	881b      	ldrh	r3, [r3, #0]
 8004ade:	b29a      	uxth	r2, r3
 8004ae0:	2044      	movs	r0, #68	; 0x44
 8004ae2:	183b      	adds	r3, r7, r0
 8004ae4:	4932      	ldr	r1, [pc, #200]	; (8004bb0 <USB_ActivateEndpoint+0x68c>)
 8004ae6:	400a      	ands	r2, r1
 8004ae8:	801a      	strh	r2, [r3, #0]
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	18d3      	adds	r3, r2, r3
 8004af4:	183a      	adds	r2, r7, r0
 8004af6:	8812      	ldrh	r2, [r2, #0]
 8004af8:	4931      	ldr	r1, [pc, #196]	; (8004bc0 <USB_ActivateEndpoint+0x69c>)
 8004afa:	430a      	orrs	r2, r1
 8004afc:	b292      	uxth	r2, r2
 8004afe:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	78db      	ldrb	r3, [r3, #3]
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d01d      	beq.n	8004b44 <USB_ActivateEndpoint+0x620>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	18d3      	adds	r3, r2, r3
 8004b12:	881b      	ldrh	r3, [r3, #0]
 8004b14:	b29a      	uxth	r2, r3
 8004b16:	2040      	movs	r0, #64	; 0x40
 8004b18:	183b      	adds	r3, r7, r0
 8004b1a:	492c      	ldr	r1, [pc, #176]	; (8004bcc <USB_ActivateEndpoint+0x6a8>)
 8004b1c:	400a      	ands	r2, r1
 8004b1e:	801a      	strh	r2, [r3, #0]
 8004b20:	183b      	adds	r3, r7, r0
 8004b22:	183a      	adds	r2, r7, r0
 8004b24:	8812      	ldrh	r2, [r2, #0]
 8004b26:	2120      	movs	r1, #32
 8004b28:	404a      	eors	r2, r1
 8004b2a:	801a      	strh	r2, [r3, #0]
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	18d3      	adds	r3, r2, r3
 8004b36:	183a      	adds	r2, r7, r0
 8004b38:	8812      	ldrh	r2, [r2, #0]
 8004b3a:	4923      	ldr	r1, [pc, #140]	; (8004bc8 <USB_ActivateEndpoint+0x6a4>)
 8004b3c:	430a      	orrs	r2, r1
 8004b3e:	b292      	uxth	r2, r2
 8004b40:	801a      	strh	r2, [r3, #0]
 8004b42:	e016      	b.n	8004b72 <USB_ActivateEndpoint+0x64e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	18d3      	adds	r3, r2, r3
 8004b4e:	881b      	ldrh	r3, [r3, #0]
 8004b50:	b29a      	uxth	r2, r3
 8004b52:	2042      	movs	r0, #66	; 0x42
 8004b54:	183b      	adds	r3, r7, r0
 8004b56:	491d      	ldr	r1, [pc, #116]	; (8004bcc <USB_ActivateEndpoint+0x6a8>)
 8004b58:	400a      	ands	r2, r1
 8004b5a:	801a      	strh	r2, [r3, #0]
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	18d3      	adds	r3, r2, r3
 8004b66:	183a      	adds	r2, r7, r0
 8004b68:	8812      	ldrh	r2, [r2, #0]
 8004b6a:	4917      	ldr	r1, [pc, #92]	; (8004bc8 <USB_ActivateEndpoint+0x6a4>)
 8004b6c:	430a      	orrs	r2, r1
 8004b6e:	b292      	uxth	r2, r2
 8004b70:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	18d3      	adds	r3, r2, r3
 8004b7c:	881b      	ldrh	r3, [r3, #0]
 8004b7e:	b29a      	uxth	r2, r3
 8004b80:	203e      	movs	r0, #62	; 0x3e
 8004b82:	183b      	adds	r3, r7, r0
 8004b84:	490f      	ldr	r1, [pc, #60]	; (8004bc4 <USB_ActivateEndpoint+0x6a0>)
 8004b86:	400a      	ands	r2, r1
 8004b88:	801a      	strh	r2, [r3, #0]
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	18d3      	adds	r3, r2, r3
 8004b94:	183a      	adds	r2, r7, r0
 8004b96:	8812      	ldrh	r2, [r2, #0]
 8004b98:	490b      	ldr	r1, [pc, #44]	; (8004bc8 <USB_ActivateEndpoint+0x6a4>)
 8004b9a:	430a      	orrs	r2, r1
 8004b9c:	b292      	uxth	r2, r2
 8004b9e:	801a      	strh	r2, [r3, #0]
    }
  }

  return ret;
 8004ba0:	2367      	movs	r3, #103	; 0x67
 8004ba2:	18fb      	adds	r3, r7, r3
 8004ba4:	781b      	ldrb	r3, [r3, #0]
}
 8004ba6:	0018      	movs	r0, r3
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	b01a      	add	sp, #104	; 0x68
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	46c0      	nop			; (mov r8, r8)
 8004bb0:	ffff8f8f 	.word	0xffff8f8f
 8004bb4:	ffff8180 	.word	0xffff8180
 8004bb8:	00000404 	.word	0x00000404
 8004bbc:	ffffc080 	.word	0xffffc080
 8004bc0:	ffff80c0 	.word	0xffff80c0
 8004bc4:	ffffbf8f 	.word	0xffffbf8f
 8004bc8:	ffff8080 	.word	0xffff8080
 8004bcc:	ffff8fbf 	.word	0xffff8fbf

08004bd0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004bd0:	b5b0      	push	{r4, r5, r7, lr}
 8004bd2:	b0c4      	sub	sp, #272	; 0x110
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	785b      	ldrb	r3, [r3, #1]
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d001      	beq.n	8004be6 <USB_EPStartXfer+0x16>
 8004be2:	f000 fd49 	bl	8005678 <USB_EPStartXfer+0xaa8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	699a      	ldr	r2, [r3, #24]
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d906      	bls.n	8004c00 <USB_EPStartXfer+0x30>
    {
      len = ep->maxpacket;
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	2286      	movs	r2, #134	; 0x86
 8004bf8:	0052      	lsls	r2, r2, #1
 8004bfa:	18ba      	adds	r2, r7, r2
 8004bfc:	6013      	str	r3, [r2, #0]
 8004bfe:	e005      	b.n	8004c0c <USB_EPStartXfer+0x3c>
    }
    else
    {
      len = ep->xfer_len;
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	699b      	ldr	r3, [r3, #24]
 8004c04:	2286      	movs	r2, #134	; 0x86
 8004c06:	0052      	lsls	r2, r2, #1
 8004c08:	18ba      	adds	r2, r7, r2
 8004c0a:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	7b1b      	ldrb	r3, [r3, #12]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d125      	bne.n	8004c60 <USB_EPStartXfer+0x90>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	6959      	ldr	r1, [r3, #20]
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	88da      	ldrh	r2, [r3, #6]
 8004c1c:	2486      	movs	r4, #134	; 0x86
 8004c1e:	0064      	lsls	r4, r4, #1
 8004c20:	193b      	adds	r3, r7, r4
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f001 fa18 	bl	800605c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	617b      	str	r3, [r7, #20]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2250      	movs	r2, #80	; 0x50
 8004c34:	5a9b      	ldrh	r3, [r3, r2]
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	001a      	movs	r2, r3
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	189b      	adds	r3, r3, r2
 8004c3e:	617b      	str	r3, [r7, #20]
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	00da      	lsls	r2, r3, #3
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	18d3      	adds	r3, r2, r3
 8004c4a:	4ad0      	ldr	r2, [pc, #832]	; (8004f8c <USB_EPStartXfer+0x3bc>)
 8004c4c:	4694      	mov	ip, r2
 8004c4e:	4463      	add	r3, ip
 8004c50:	613b      	str	r3, [r7, #16]
 8004c52:	193b      	adds	r3, r7, r4
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	b29a      	uxth	r2, r3
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	801a      	strh	r2, [r3, #0]
 8004c5c:	f000 fcca 	bl	80055f4 <USB_EPStartXfer+0xa24>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	78db      	ldrb	r3, [r3, #3]
 8004c64:	2b02      	cmp	r3, #2
 8004c66:	d000      	beq.n	8004c6a <USB_EPStartXfer+0x9a>
 8004c68:	e346      	b.n	80052f8 <USB_EPStartXfer+0x728>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	6a1a      	ldr	r2, [r3, #32]
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d800      	bhi.n	8004c78 <USB_EPStartXfer+0xa8>
 8004c76:	e2ec      	b.n	8005252 <USB_EPStartXfer+0x682>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	18d3      	adds	r3, r2, r3
 8004c82:	881b      	ldrh	r3, [r3, #0]
 8004c84:	b29a      	uxth	r2, r3
 8004c86:	205a      	movs	r0, #90	; 0x5a
 8004c88:	183b      	adds	r3, r7, r0
 8004c8a:	49c1      	ldr	r1, [pc, #772]	; (8004f90 <USB_EPStartXfer+0x3c0>)
 8004c8c:	400a      	ands	r2, r1
 8004c8e:	801a      	strh	r2, [r3, #0]
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	18d3      	adds	r3, r2, r3
 8004c9a:	183a      	adds	r2, r7, r0
 8004c9c:	8812      	ldrh	r2, [r2, #0]
 8004c9e:	49bd      	ldr	r1, [pc, #756]	; (8004f94 <USB_EPStartXfer+0x3c4>)
 8004ca0:	430a      	orrs	r2, r1
 8004ca2:	b292      	uxth	r2, r2
 8004ca4:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	6a1a      	ldr	r2, [r3, #32]
 8004caa:	2186      	movs	r1, #134	; 0x86
 8004cac:	0049      	lsls	r1, r1, #1
 8004cae:	187b      	adds	r3, r7, r1
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	1ad2      	subs	r2, r2, r3
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	18d3      	adds	r3, r2, r3
 8004cc2:	881b      	ldrh	r3, [r3, #0]
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	001a      	movs	r2, r3
 8004cc8:	2340      	movs	r3, #64	; 0x40
 8004cca:	4013      	ands	r3, r2
 8004ccc:	d100      	bne.n	8004cd0 <USB_EPStartXfer+0x100>
 8004cce:	e169      	b.n	8004fa4 <USB_EPStartXfer+0x3d4>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	637b      	str	r3, [r7, #52]	; 0x34
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	785b      	ldrb	r3, [r3, #1]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d168      	bne.n	8004dae <USB_EPStartXfer+0x1de>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2250      	movs	r2, #80	; 0x50
 8004ce4:	5a9b      	ldrh	r3, [r3, r2]
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	001a      	movs	r2, r3
 8004cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cec:	189b      	adds	r3, r3, r2
 8004cee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	00da      	lsls	r2, r3, #3
 8004cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cf8:	18d3      	adds	r3, r2, r3
 8004cfa:	4aa7      	ldr	r2, [pc, #668]	; (8004f98 <USB_EPStartXfer+0x3c8>)
 8004cfc:	4694      	mov	ip, r2
 8004cfe:	4463      	add	r3, ip
 8004d00:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d02:	187b      	adds	r3, r7, r1
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d110      	bne.n	8004d2c <USB_EPStartXfer+0x15c>
 8004d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0c:	881b      	ldrh	r3, [r3, #0]
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	4aa2      	ldr	r2, [pc, #648]	; (8004f9c <USB_EPStartXfer+0x3cc>)
 8004d12:	4013      	ands	r3, r2
 8004d14:	b29a      	uxth	r2, r3
 8004d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d18:	801a      	strh	r2, [r3, #0]
 8004d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d1c:	881b      	ldrh	r3, [r3, #0]
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	4a9f      	ldr	r2, [pc, #636]	; (8004fa0 <USB_EPStartXfer+0x3d0>)
 8004d22:	4313      	orrs	r3, r2
 8004d24:	b29a      	uxth	r2, r3
 8004d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d28:	801a      	strh	r2, [r3, #0]
 8004d2a:	e05c      	b.n	8004de6 <USB_EPStartXfer+0x216>
 8004d2c:	2286      	movs	r2, #134	; 0x86
 8004d2e:	0052      	lsls	r2, r2, #1
 8004d30:	18bb      	adds	r3, r7, r2
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	2b3e      	cmp	r3, #62	; 0x3e
 8004d36:	d81a      	bhi.n	8004d6e <USB_EPStartXfer+0x19e>
 8004d38:	18bb      	adds	r3, r7, r2
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	085b      	lsrs	r3, r3, #1
 8004d3e:	1d79      	adds	r1, r7, #5
 8004d40:	31ff      	adds	r1, #255	; 0xff
 8004d42:	600b      	str	r3, [r1, #0]
 8004d44:	18bb      	adds	r3, r7, r2
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2201      	movs	r2, #1
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	d006      	beq.n	8004d5c <USB_EPStartXfer+0x18c>
 8004d4e:	1d7b      	adds	r3, r7, #5
 8004d50:	33ff      	adds	r3, #255	; 0xff
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	3301      	adds	r3, #1
 8004d56:	1d7a      	adds	r2, r7, #5
 8004d58:	32ff      	adds	r2, #255	; 0xff
 8004d5a:	6013      	str	r3, [r2, #0]
 8004d5c:	1d7b      	adds	r3, r7, #5
 8004d5e:	33ff      	adds	r3, #255	; 0xff
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	029b      	lsls	r3, r3, #10
 8004d66:	b29a      	uxth	r2, r3
 8004d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d6a:	801a      	strh	r2, [r3, #0]
 8004d6c:	e03b      	b.n	8004de6 <USB_EPStartXfer+0x216>
 8004d6e:	2286      	movs	r2, #134	; 0x86
 8004d70:	0052      	lsls	r2, r2, #1
 8004d72:	18bb      	adds	r3, r7, r2
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	095b      	lsrs	r3, r3, #5
 8004d78:	1d79      	adds	r1, r7, #5
 8004d7a:	31ff      	adds	r1, #255	; 0xff
 8004d7c:	600b      	str	r3, [r1, #0]
 8004d7e:	18bb      	adds	r3, r7, r2
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	221f      	movs	r2, #31
 8004d84:	4013      	ands	r3, r2
 8004d86:	d106      	bne.n	8004d96 <USB_EPStartXfer+0x1c6>
 8004d88:	1d7b      	adds	r3, r7, #5
 8004d8a:	33ff      	adds	r3, #255	; 0xff
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	3b01      	subs	r3, #1
 8004d90:	1d7a      	adds	r2, r7, #5
 8004d92:	32ff      	adds	r2, #255	; 0xff
 8004d94:	6013      	str	r3, [r2, #0]
 8004d96:	1d7b      	adds	r3, r7, #5
 8004d98:	33ff      	adds	r3, #255	; 0xff
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	029b      	lsls	r3, r3, #10
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	4a7f      	ldr	r2, [pc, #508]	; (8004fa0 <USB_EPStartXfer+0x3d0>)
 8004da4:	4313      	orrs	r3, r2
 8004da6:	b29a      	uxth	r2, r3
 8004da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004daa:	801a      	strh	r2, [r3, #0]
 8004dac:	e01b      	b.n	8004de6 <USB_EPStartXfer+0x216>
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	785b      	ldrb	r3, [r3, #1]
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d117      	bne.n	8004de6 <USB_EPStartXfer+0x216>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2250      	movs	r2, #80	; 0x50
 8004dba:	5a9b      	ldrh	r3, [r3, r2]
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	001a      	movs	r2, r3
 8004dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dc2:	189b      	adds	r3, r3, r2
 8004dc4:	637b      	str	r3, [r7, #52]	; 0x34
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	00da      	lsls	r2, r3, #3
 8004dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dce:	18d3      	adds	r3, r2, r3
 8004dd0:	4a71      	ldr	r2, [pc, #452]	; (8004f98 <USB_EPStartXfer+0x3c8>)
 8004dd2:	4694      	mov	ip, r2
 8004dd4:	4463      	add	r3, ip
 8004dd6:	633b      	str	r3, [r7, #48]	; 0x30
 8004dd8:	2386      	movs	r3, #134	; 0x86
 8004dda:	005b      	lsls	r3, r3, #1
 8004ddc:	18fb      	adds	r3, r7, r3
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	b29a      	uxth	r2, r3
 8004de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004de6:	2085      	movs	r0, #133	; 0x85
 8004de8:	0040      	lsls	r0, r0, #1
 8004dea:	183b      	adds	r3, r7, r0
 8004dec:	683a      	ldr	r2, [r7, #0]
 8004dee:	8952      	ldrh	r2, [r2, #10]
 8004df0:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	6959      	ldr	r1, [r3, #20]
 8004df6:	2586      	movs	r5, #134	; 0x86
 8004df8:	006d      	lsls	r5, r5, #1
 8004dfa:	197b      	adds	r3, r7, r5
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	b29c      	uxth	r4, r3
 8004e00:	183b      	adds	r3, r7, r0
 8004e02:	881a      	ldrh	r2, [r3, #0]
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	0023      	movs	r3, r4
 8004e08:	f001 f928 	bl	800605c <USB_WritePMA>
            ep->xfer_buff += len;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	695a      	ldr	r2, [r3, #20]
 8004e10:	197b      	adds	r3, r7, r5
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	18d2      	adds	r2, r2, r3
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	6a1a      	ldr	r2, [r3, #32]
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d907      	bls.n	8004e36 <USB_EPStartXfer+0x266>
            {
              ep->xfer_len_db -= len;
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	6a1a      	ldr	r2, [r3, #32]
 8004e2a:	197b      	adds	r3, r7, r5
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	1ad2      	subs	r2, r2, r3
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	621a      	str	r2, [r3, #32]
 8004e34:	e008      	b.n	8004e48 <USB_EPStartXfer+0x278>
            }
            else
            {
              len = ep->xfer_len_db;
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	6a1b      	ldr	r3, [r3, #32]
 8004e3a:	2286      	movs	r2, #134	; 0x86
 8004e3c:	0052      	lsls	r2, r2, #1
 8004e3e:	18ba      	adds	r2, r7, r2
 8004e40:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	2200      	movs	r2, #0
 8004e46:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	785b      	ldrb	r3, [r3, #1]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d16a      	bne.n	8004f26 <USB_EPStartXfer+0x356>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	61fb      	str	r3, [r7, #28]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2250      	movs	r2, #80	; 0x50
 8004e58:	5a9b      	ldrh	r3, [r3, r2]
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	001a      	movs	r2, r3
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	189b      	adds	r3, r3, r2
 8004e62:	61fb      	str	r3, [r7, #28]
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	00da      	lsls	r2, r3, #3
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	18d3      	adds	r3, r2, r3
 8004e6e:	4a47      	ldr	r2, [pc, #284]	; (8004f8c <USB_EPStartXfer+0x3bc>)
 8004e70:	4694      	mov	ip, r2
 8004e72:	4463      	add	r3, ip
 8004e74:	61bb      	str	r3, [r7, #24]
 8004e76:	2386      	movs	r3, #134	; 0x86
 8004e78:	005b      	lsls	r3, r3, #1
 8004e7a:	18fb      	adds	r3, r7, r3
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d110      	bne.n	8004ea4 <USB_EPStartXfer+0x2d4>
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	881b      	ldrh	r3, [r3, #0]
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	4a44      	ldr	r2, [pc, #272]	; (8004f9c <USB_EPStartXfer+0x3cc>)
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	b29a      	uxth	r2, r3
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	801a      	strh	r2, [r3, #0]
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	881b      	ldrh	r3, [r3, #0]
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	4a41      	ldr	r2, [pc, #260]	; (8004fa0 <USB_EPStartXfer+0x3d0>)
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	b29a      	uxth	r2, r3
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	801a      	strh	r2, [r3, #0]
 8004ea2:	e05e      	b.n	8004f62 <USB_EPStartXfer+0x392>
 8004ea4:	2286      	movs	r2, #134	; 0x86
 8004ea6:	0052      	lsls	r2, r2, #1
 8004ea8:	18bb      	adds	r3, r7, r2
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	2b3e      	cmp	r3, #62	; 0x3e
 8004eae:	d81a      	bhi.n	8004ee6 <USB_EPStartXfer+0x316>
 8004eb0:	18bb      	adds	r3, r7, r2
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	085b      	lsrs	r3, r3, #1
 8004eb6:	1c79      	adds	r1, r7, #1
 8004eb8:	31ff      	adds	r1, #255	; 0xff
 8004eba:	600b      	str	r3, [r1, #0]
 8004ebc:	18bb      	adds	r3, r7, r2
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	d006      	beq.n	8004ed4 <USB_EPStartXfer+0x304>
 8004ec6:	1c7b      	adds	r3, r7, #1
 8004ec8:	33ff      	adds	r3, #255	; 0xff
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	3301      	adds	r3, #1
 8004ece:	1c7a      	adds	r2, r7, #1
 8004ed0:	32ff      	adds	r2, #255	; 0xff
 8004ed2:	6013      	str	r3, [r2, #0]
 8004ed4:	1c7b      	adds	r3, r7, #1
 8004ed6:	33ff      	adds	r3, #255	; 0xff
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	029b      	lsls	r3, r3, #10
 8004ede:	b29a      	uxth	r2, r3
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	801a      	strh	r2, [r3, #0]
 8004ee4:	e03d      	b.n	8004f62 <USB_EPStartXfer+0x392>
 8004ee6:	2286      	movs	r2, #134	; 0x86
 8004ee8:	0052      	lsls	r2, r2, #1
 8004eea:	18bb      	adds	r3, r7, r2
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	095b      	lsrs	r3, r3, #5
 8004ef0:	1c79      	adds	r1, r7, #1
 8004ef2:	31ff      	adds	r1, #255	; 0xff
 8004ef4:	600b      	str	r3, [r1, #0]
 8004ef6:	18bb      	adds	r3, r7, r2
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	221f      	movs	r2, #31
 8004efc:	4013      	ands	r3, r2
 8004efe:	d106      	bne.n	8004f0e <USB_EPStartXfer+0x33e>
 8004f00:	1c7b      	adds	r3, r7, #1
 8004f02:	33ff      	adds	r3, #255	; 0xff
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	3b01      	subs	r3, #1
 8004f08:	1c7a      	adds	r2, r7, #1
 8004f0a:	32ff      	adds	r2, #255	; 0xff
 8004f0c:	6013      	str	r3, [r2, #0]
 8004f0e:	1c7b      	adds	r3, r7, #1
 8004f10:	33ff      	adds	r3, #255	; 0xff
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	029b      	lsls	r3, r3, #10
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	4a21      	ldr	r2, [pc, #132]	; (8004fa0 <USB_EPStartXfer+0x3d0>)
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	b29a      	uxth	r2, r3
 8004f20:	69bb      	ldr	r3, [r7, #24]
 8004f22:	801a      	strh	r2, [r3, #0]
 8004f24:	e01d      	b.n	8004f62 <USB_EPStartXfer+0x392>
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	785b      	ldrb	r3, [r3, #1]
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d119      	bne.n	8004f62 <USB_EPStartXfer+0x392>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	627b      	str	r3, [r7, #36]	; 0x24
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2250      	movs	r2, #80	; 0x50
 8004f36:	5a9b      	ldrh	r3, [r3, r2]
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	001a      	movs	r2, r3
 8004f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3e:	189b      	adds	r3, r3, r2
 8004f40:	627b      	str	r3, [r7, #36]	; 0x24
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	00da      	lsls	r2, r3, #3
 8004f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4a:	18d3      	adds	r3, r2, r3
 8004f4c:	4a0f      	ldr	r2, [pc, #60]	; (8004f8c <USB_EPStartXfer+0x3bc>)
 8004f4e:	4694      	mov	ip, r2
 8004f50:	4463      	add	r3, ip
 8004f52:	623b      	str	r3, [r7, #32]
 8004f54:	2386      	movs	r3, #134	; 0x86
 8004f56:	005b      	lsls	r3, r3, #1
 8004f58:	18fb      	adds	r3, r7, r3
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	b29a      	uxth	r2, r3
 8004f5e:	6a3b      	ldr	r3, [r7, #32]
 8004f60:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004f62:	2085      	movs	r0, #133	; 0x85
 8004f64:	0040      	lsls	r0, r0, #1
 8004f66:	183b      	adds	r3, r7, r0
 8004f68:	683a      	ldr	r2, [r7, #0]
 8004f6a:	8912      	ldrh	r2, [r2, #8]
 8004f6c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	6959      	ldr	r1, [r3, #20]
 8004f72:	2386      	movs	r3, #134	; 0x86
 8004f74:	005b      	lsls	r3, r3, #1
 8004f76:	18fb      	adds	r3, r7, r3
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	b29c      	uxth	r4, r3
 8004f7c:	183b      	adds	r3, r7, r0
 8004f7e:	881a      	ldrh	r2, [r3, #0]
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	0023      	movs	r3, r4
 8004f84:	f001 f86a 	bl	800605c <USB_WritePMA>
 8004f88:	e334      	b.n	80055f4 <USB_EPStartXfer+0xa24>
 8004f8a:	46c0      	nop			; (mov r8, r8)
 8004f8c:	00000402 	.word	0x00000402
 8004f90:	ffff8f8f 	.word	0xffff8f8f
 8004f94:	ffff8180 	.word	0xffff8180
 8004f98:	00000406 	.word	0x00000406
 8004f9c:	ffff83ff 	.word	0xffff83ff
 8004fa0:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	785b      	ldrb	r3, [r3, #1]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d166      	bne.n	800507a <USB_EPStartXfer+0x4aa>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2250      	movs	r2, #80	; 0x50
 8004fb4:	5a9b      	ldrh	r3, [r3, r2]
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	001a      	movs	r2, r3
 8004fba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fbc:	189b      	adds	r3, r3, r2
 8004fbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	00da      	lsls	r2, r3, #3
 8004fc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fc8:	18d3      	adds	r3, r2, r3
 8004fca:	4ac5      	ldr	r2, [pc, #788]	; (80052e0 <USB_EPStartXfer+0x710>)
 8004fcc:	4694      	mov	ip, r2
 8004fce:	4463      	add	r3, ip
 8004fd0:	64bb      	str	r3, [r7, #72]	; 0x48
 8004fd2:	2386      	movs	r3, #134	; 0x86
 8004fd4:	005b      	lsls	r3, r3, #1
 8004fd6:	18fb      	adds	r3, r7, r3
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d110      	bne.n	8005000 <USB_EPStartXfer+0x430>
 8004fde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fe0:	881b      	ldrh	r3, [r3, #0]
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	4abf      	ldr	r2, [pc, #764]	; (80052e4 <USB_EPStartXfer+0x714>)
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	b29a      	uxth	r2, r3
 8004fea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fec:	801a      	strh	r2, [r3, #0]
 8004fee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ff0:	881b      	ldrh	r3, [r3, #0]
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	4abc      	ldr	r2, [pc, #752]	; (80052e8 <USB_EPStartXfer+0x718>)
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	b29a      	uxth	r2, r3
 8004ffa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ffc:	801a      	strh	r2, [r3, #0]
 8004ffe:	e05a      	b.n	80050b6 <USB_EPStartXfer+0x4e6>
 8005000:	2286      	movs	r2, #134	; 0x86
 8005002:	0052      	lsls	r2, r2, #1
 8005004:	18bb      	adds	r3, r7, r2
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	2b3e      	cmp	r3, #62	; 0x3e
 800500a:	d818      	bhi.n	800503e <USB_EPStartXfer+0x46e>
 800500c:	18bb      	adds	r3, r7, r2
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	085b      	lsrs	r3, r3, #1
 8005012:	21fc      	movs	r1, #252	; 0xfc
 8005014:	1878      	adds	r0, r7, r1
 8005016:	6003      	str	r3, [r0, #0]
 8005018:	18bb      	adds	r3, r7, r2
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2201      	movs	r2, #1
 800501e:	4013      	ands	r3, r2
 8005020:	d004      	beq.n	800502c <USB_EPStartXfer+0x45c>
 8005022:	187b      	adds	r3, r7, r1
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	3301      	adds	r3, #1
 8005028:	187a      	adds	r2, r7, r1
 800502a:	6013      	str	r3, [r2, #0]
 800502c:	23fc      	movs	r3, #252	; 0xfc
 800502e:	18fb      	adds	r3, r7, r3
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	b29b      	uxth	r3, r3
 8005034:	029b      	lsls	r3, r3, #10
 8005036:	b29a      	uxth	r2, r3
 8005038:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800503a:	801a      	strh	r2, [r3, #0]
 800503c:	e03b      	b.n	80050b6 <USB_EPStartXfer+0x4e6>
 800503e:	2286      	movs	r2, #134	; 0x86
 8005040:	0052      	lsls	r2, r2, #1
 8005042:	18bb      	adds	r3, r7, r2
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	095b      	lsrs	r3, r3, #5
 8005048:	21fc      	movs	r1, #252	; 0xfc
 800504a:	1878      	adds	r0, r7, r1
 800504c:	6003      	str	r3, [r0, #0]
 800504e:	18bb      	adds	r3, r7, r2
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	221f      	movs	r2, #31
 8005054:	4013      	ands	r3, r2
 8005056:	d104      	bne.n	8005062 <USB_EPStartXfer+0x492>
 8005058:	187b      	adds	r3, r7, r1
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	3b01      	subs	r3, #1
 800505e:	187a      	adds	r2, r7, r1
 8005060:	6013      	str	r3, [r2, #0]
 8005062:	23fc      	movs	r3, #252	; 0xfc
 8005064:	18fb      	adds	r3, r7, r3
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	b29b      	uxth	r3, r3
 800506a:	029b      	lsls	r3, r3, #10
 800506c:	b29b      	uxth	r3, r3
 800506e:	4a9e      	ldr	r2, [pc, #632]	; (80052e8 <USB_EPStartXfer+0x718>)
 8005070:	4313      	orrs	r3, r2
 8005072:	b29a      	uxth	r2, r3
 8005074:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005076:	801a      	strh	r2, [r3, #0]
 8005078:	e01d      	b.n	80050b6 <USB_EPStartXfer+0x4e6>
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	785b      	ldrb	r3, [r3, #1]
 800507e:	2b01      	cmp	r3, #1
 8005080:	d119      	bne.n	80050b6 <USB_EPStartXfer+0x4e6>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	657b      	str	r3, [r7, #84]	; 0x54
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2250      	movs	r2, #80	; 0x50
 800508a:	5a9b      	ldrh	r3, [r3, r2]
 800508c:	b29b      	uxth	r3, r3
 800508e:	001a      	movs	r2, r3
 8005090:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005092:	189b      	adds	r3, r3, r2
 8005094:	657b      	str	r3, [r7, #84]	; 0x54
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	00da      	lsls	r2, r3, #3
 800509c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800509e:	18d3      	adds	r3, r2, r3
 80050a0:	4a8f      	ldr	r2, [pc, #572]	; (80052e0 <USB_EPStartXfer+0x710>)
 80050a2:	4694      	mov	ip, r2
 80050a4:	4463      	add	r3, ip
 80050a6:	653b      	str	r3, [r7, #80]	; 0x50
 80050a8:	2386      	movs	r3, #134	; 0x86
 80050aa:	005b      	lsls	r3, r3, #1
 80050ac:	18fb      	adds	r3, r7, r3
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	b29a      	uxth	r2, r3
 80050b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050b4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80050b6:	2085      	movs	r0, #133	; 0x85
 80050b8:	0040      	lsls	r0, r0, #1
 80050ba:	183b      	adds	r3, r7, r0
 80050bc:	683a      	ldr	r2, [r7, #0]
 80050be:	8912      	ldrh	r2, [r2, #8]
 80050c0:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	6959      	ldr	r1, [r3, #20]
 80050c6:	2586      	movs	r5, #134	; 0x86
 80050c8:	006d      	lsls	r5, r5, #1
 80050ca:	197b      	adds	r3, r7, r5
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	b29c      	uxth	r4, r3
 80050d0:	183b      	adds	r3, r7, r0
 80050d2:	881a      	ldrh	r2, [r3, #0]
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	0023      	movs	r3, r4
 80050d8:	f000 ffc0 	bl	800605c <USB_WritePMA>
            ep->xfer_buff += len;
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	695a      	ldr	r2, [r3, #20]
 80050e0:	197b      	adds	r3, r7, r5
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	18d2      	adds	r2, r2, r3
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	6a1a      	ldr	r2, [r3, #32]
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	691b      	ldr	r3, [r3, #16]
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d907      	bls.n	8005106 <USB_EPStartXfer+0x536>
            {
              ep->xfer_len_db -= len;
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	6a1a      	ldr	r2, [r3, #32]
 80050fa:	197b      	adds	r3, r7, r5
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	1ad2      	subs	r2, r2, r3
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	621a      	str	r2, [r3, #32]
 8005104:	e008      	b.n	8005118 <USB_EPStartXfer+0x548>
            }
            else
            {
              len = ep->xfer_len_db;
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	6a1b      	ldr	r3, [r3, #32]
 800510a:	2286      	movs	r2, #134	; 0x86
 800510c:	0052      	lsls	r2, r2, #1
 800510e:	18ba      	adds	r2, r7, r2
 8005110:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	2200      	movs	r2, #0
 8005116:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	647b      	str	r3, [r7, #68]	; 0x44
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	785b      	ldrb	r3, [r3, #1]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d166      	bne.n	80051f2 <USB_EPStartXfer+0x622>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2250      	movs	r2, #80	; 0x50
 800512c:	5a9b      	ldrh	r3, [r3, r2]
 800512e:	b29b      	uxth	r3, r3
 8005130:	001a      	movs	r2, r3
 8005132:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005134:	189b      	adds	r3, r3, r2
 8005136:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	00da      	lsls	r2, r3, #3
 800513e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005140:	18d3      	adds	r3, r2, r3
 8005142:	4a6a      	ldr	r2, [pc, #424]	; (80052ec <USB_EPStartXfer+0x71c>)
 8005144:	4694      	mov	ip, r2
 8005146:	4463      	add	r3, ip
 8005148:	63bb      	str	r3, [r7, #56]	; 0x38
 800514a:	2386      	movs	r3, #134	; 0x86
 800514c:	005b      	lsls	r3, r3, #1
 800514e:	18fb      	adds	r3, r7, r3
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d110      	bne.n	8005178 <USB_EPStartXfer+0x5a8>
 8005156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005158:	881b      	ldrh	r3, [r3, #0]
 800515a:	b29b      	uxth	r3, r3
 800515c:	4a61      	ldr	r2, [pc, #388]	; (80052e4 <USB_EPStartXfer+0x714>)
 800515e:	4013      	ands	r3, r2
 8005160:	b29a      	uxth	r2, r3
 8005162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005164:	801a      	strh	r2, [r3, #0]
 8005166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005168:	881b      	ldrh	r3, [r3, #0]
 800516a:	b29b      	uxth	r3, r3
 800516c:	4a5e      	ldr	r2, [pc, #376]	; (80052e8 <USB_EPStartXfer+0x718>)
 800516e:	4313      	orrs	r3, r2
 8005170:	b29a      	uxth	r2, r3
 8005172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005174:	801a      	strh	r2, [r3, #0]
 8005176:	e058      	b.n	800522a <USB_EPStartXfer+0x65a>
 8005178:	2286      	movs	r2, #134	; 0x86
 800517a:	0052      	lsls	r2, r2, #1
 800517c:	18bb      	adds	r3, r7, r2
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2b3e      	cmp	r3, #62	; 0x3e
 8005182:	d818      	bhi.n	80051b6 <USB_EPStartXfer+0x5e6>
 8005184:	18bb      	adds	r3, r7, r2
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	085b      	lsrs	r3, r3, #1
 800518a:	21f8      	movs	r1, #248	; 0xf8
 800518c:	1878      	adds	r0, r7, r1
 800518e:	6003      	str	r3, [r0, #0]
 8005190:	18bb      	adds	r3, r7, r2
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	2201      	movs	r2, #1
 8005196:	4013      	ands	r3, r2
 8005198:	d004      	beq.n	80051a4 <USB_EPStartXfer+0x5d4>
 800519a:	187b      	adds	r3, r7, r1
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	3301      	adds	r3, #1
 80051a0:	187a      	adds	r2, r7, r1
 80051a2:	6013      	str	r3, [r2, #0]
 80051a4:	23f8      	movs	r3, #248	; 0xf8
 80051a6:	18fb      	adds	r3, r7, r3
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	029b      	lsls	r3, r3, #10
 80051ae:	b29a      	uxth	r2, r3
 80051b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b2:	801a      	strh	r2, [r3, #0]
 80051b4:	e039      	b.n	800522a <USB_EPStartXfer+0x65a>
 80051b6:	2286      	movs	r2, #134	; 0x86
 80051b8:	0052      	lsls	r2, r2, #1
 80051ba:	18bb      	adds	r3, r7, r2
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	095b      	lsrs	r3, r3, #5
 80051c0:	21f8      	movs	r1, #248	; 0xf8
 80051c2:	1878      	adds	r0, r7, r1
 80051c4:	6003      	str	r3, [r0, #0]
 80051c6:	18bb      	adds	r3, r7, r2
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	221f      	movs	r2, #31
 80051cc:	4013      	ands	r3, r2
 80051ce:	d104      	bne.n	80051da <USB_EPStartXfer+0x60a>
 80051d0:	187b      	adds	r3, r7, r1
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	3b01      	subs	r3, #1
 80051d6:	187a      	adds	r2, r7, r1
 80051d8:	6013      	str	r3, [r2, #0]
 80051da:	23f8      	movs	r3, #248	; 0xf8
 80051dc:	18fb      	adds	r3, r7, r3
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	029b      	lsls	r3, r3, #10
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	4a40      	ldr	r2, [pc, #256]	; (80052e8 <USB_EPStartXfer+0x718>)
 80051e8:	4313      	orrs	r3, r2
 80051ea:	b29a      	uxth	r2, r3
 80051ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ee:	801a      	strh	r2, [r3, #0]
 80051f0:	e01b      	b.n	800522a <USB_EPStartXfer+0x65a>
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	785b      	ldrb	r3, [r3, #1]
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d117      	bne.n	800522a <USB_EPStartXfer+0x65a>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2250      	movs	r2, #80	; 0x50
 80051fe:	5a9b      	ldrh	r3, [r3, r2]
 8005200:	b29b      	uxth	r3, r3
 8005202:	001a      	movs	r2, r3
 8005204:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005206:	189b      	adds	r3, r3, r2
 8005208:	647b      	str	r3, [r7, #68]	; 0x44
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	00da      	lsls	r2, r3, #3
 8005210:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005212:	18d3      	adds	r3, r2, r3
 8005214:	4a35      	ldr	r2, [pc, #212]	; (80052ec <USB_EPStartXfer+0x71c>)
 8005216:	4694      	mov	ip, r2
 8005218:	4463      	add	r3, ip
 800521a:	643b      	str	r3, [r7, #64]	; 0x40
 800521c:	2386      	movs	r3, #134	; 0x86
 800521e:	005b      	lsls	r3, r3, #1
 8005220:	18fb      	adds	r3, r7, r3
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	b29a      	uxth	r2, r3
 8005226:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005228:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800522a:	2085      	movs	r0, #133	; 0x85
 800522c:	0040      	lsls	r0, r0, #1
 800522e:	183b      	adds	r3, r7, r0
 8005230:	683a      	ldr	r2, [r7, #0]
 8005232:	8952      	ldrh	r2, [r2, #10]
 8005234:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	6959      	ldr	r1, [r3, #20]
 800523a:	2386      	movs	r3, #134	; 0x86
 800523c:	005b      	lsls	r3, r3, #1
 800523e:	18fb      	adds	r3, r7, r3
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	b29c      	uxth	r4, r3
 8005244:	183b      	adds	r3, r7, r0
 8005246:	881a      	ldrh	r2, [r3, #0]
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	0023      	movs	r3, r4
 800524c:	f000 ff06 	bl	800605c <USB_WritePMA>
 8005250:	e1d0      	b.n	80055f4 <USB_EPStartXfer+0xa24>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	6a1b      	ldr	r3, [r3, #32]
 8005256:	2086      	movs	r0, #134	; 0x86
 8005258:	0040      	lsls	r0, r0, #1
 800525a:	183a      	adds	r2, r7, r0
 800525c:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	18d3      	adds	r3, r2, r3
 8005268:	881b      	ldrh	r3, [r3, #0]
 800526a:	b29a      	uxth	r2, r3
 800526c:	2466      	movs	r4, #102	; 0x66
 800526e:	193b      	adds	r3, r7, r4
 8005270:	491f      	ldr	r1, [pc, #124]	; (80052f0 <USB_EPStartXfer+0x720>)
 8005272:	400a      	ands	r2, r1
 8005274:	801a      	strh	r2, [r3, #0]
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	18d3      	adds	r3, r2, r3
 8005280:	193a      	adds	r2, r7, r4
 8005282:	8812      	ldrh	r2, [r2, #0]
 8005284:	491b      	ldr	r1, [pc, #108]	; (80052f4 <USB_EPStartXfer+0x724>)
 8005286:	430a      	orrs	r2, r1
 8005288:	b292      	uxth	r2, r2
 800528a:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	663b      	str	r3, [r7, #96]	; 0x60
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2250      	movs	r2, #80	; 0x50
 8005294:	5a9b      	ldrh	r3, [r3, r2]
 8005296:	b29b      	uxth	r3, r3
 8005298:	001a      	movs	r2, r3
 800529a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800529c:	189b      	adds	r3, r3, r2
 800529e:	663b      	str	r3, [r7, #96]	; 0x60
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	00da      	lsls	r2, r3, #3
 80052a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80052a8:	18d3      	adds	r3, r2, r3
 80052aa:	4a0d      	ldr	r2, [pc, #52]	; (80052e0 <USB_EPStartXfer+0x710>)
 80052ac:	4694      	mov	ip, r2
 80052ae:	4463      	add	r3, ip
 80052b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052b2:	183b      	adds	r3, r7, r0
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	b29a      	uxth	r2, r3
 80052b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052ba:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80052bc:	2585      	movs	r5, #133	; 0x85
 80052be:	006d      	lsls	r5, r5, #1
 80052c0:	197b      	adds	r3, r7, r5
 80052c2:	683a      	ldr	r2, [r7, #0]
 80052c4:	8912      	ldrh	r2, [r2, #8]
 80052c6:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	6959      	ldr	r1, [r3, #20]
 80052cc:	183b      	adds	r3, r7, r0
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	b29c      	uxth	r4, r3
 80052d2:	197b      	adds	r3, r7, r5
 80052d4:	881a      	ldrh	r2, [r3, #0]
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	0023      	movs	r3, r4
 80052da:	f000 febf 	bl	800605c <USB_WritePMA>
 80052de:	e189      	b.n	80055f4 <USB_EPStartXfer+0xa24>
 80052e0:	00000402 	.word	0x00000402
 80052e4:	ffff83ff 	.word	0xffff83ff
 80052e8:	ffff8000 	.word	0xffff8000
 80052ec:	00000406 	.word	0x00000406
 80052f0:	ffff8e8f 	.word	0xffff8e8f
 80052f4:	ffff8080 	.word	0xffff8080

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	18d3      	adds	r3, r2, r3
 8005302:	881b      	ldrh	r3, [r3, #0]
 8005304:	b29b      	uxth	r3, r3
 8005306:	001a      	movs	r2, r3
 8005308:	2340      	movs	r3, #64	; 0x40
 800530a:	4013      	ands	r3, r2
 800530c:	d100      	bne.n	8005310 <USB_EPStartXfer+0x740>
 800530e:	e08f      	b.n	8005430 <USB_EPStartXfer+0x860>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	67bb      	str	r3, [r7, #120]	; 0x78
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	785b      	ldrb	r3, [r3, #1]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d166      	bne.n	80053ea <USB_EPStartXfer+0x81a>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	673b      	str	r3, [r7, #112]	; 0x70
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2250      	movs	r2, #80	; 0x50
 8005324:	5a9b      	ldrh	r3, [r3, r2]
 8005326:	b29b      	uxth	r3, r3
 8005328:	001a      	movs	r2, r3
 800532a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800532c:	189b      	adds	r3, r3, r2
 800532e:	673b      	str	r3, [r7, #112]	; 0x70
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	00da      	lsls	r2, r3, #3
 8005336:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005338:	18d3      	adds	r3, r2, r3
 800533a:	4adc      	ldr	r2, [pc, #880]	; (80056ac <USB_EPStartXfer+0xadc>)
 800533c:	4694      	mov	ip, r2
 800533e:	4463      	add	r3, ip
 8005340:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005342:	2386      	movs	r3, #134	; 0x86
 8005344:	005b      	lsls	r3, r3, #1
 8005346:	18fb      	adds	r3, r7, r3
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d110      	bne.n	8005370 <USB_EPStartXfer+0x7a0>
 800534e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005350:	881b      	ldrh	r3, [r3, #0]
 8005352:	b29b      	uxth	r3, r3
 8005354:	4ad6      	ldr	r2, [pc, #856]	; (80056b0 <USB_EPStartXfer+0xae0>)
 8005356:	4013      	ands	r3, r2
 8005358:	b29a      	uxth	r2, r3
 800535a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800535c:	801a      	strh	r2, [r3, #0]
 800535e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005360:	881b      	ldrh	r3, [r3, #0]
 8005362:	b29b      	uxth	r3, r3
 8005364:	4ad3      	ldr	r2, [pc, #844]	; (80056b4 <USB_EPStartXfer+0xae4>)
 8005366:	4313      	orrs	r3, r2
 8005368:	b29a      	uxth	r2, r3
 800536a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800536c:	801a      	strh	r2, [r3, #0]
 800536e:	e058      	b.n	8005422 <USB_EPStartXfer+0x852>
 8005370:	2286      	movs	r2, #134	; 0x86
 8005372:	0052      	lsls	r2, r2, #1
 8005374:	18bb      	adds	r3, r7, r2
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	2b3e      	cmp	r3, #62	; 0x3e
 800537a:	d818      	bhi.n	80053ae <USB_EPStartXfer+0x7de>
 800537c:	18bb      	adds	r3, r7, r2
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	085b      	lsrs	r3, r3, #1
 8005382:	21f4      	movs	r1, #244	; 0xf4
 8005384:	1878      	adds	r0, r7, r1
 8005386:	6003      	str	r3, [r0, #0]
 8005388:	18bb      	adds	r3, r7, r2
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2201      	movs	r2, #1
 800538e:	4013      	ands	r3, r2
 8005390:	d004      	beq.n	800539c <USB_EPStartXfer+0x7cc>
 8005392:	187b      	adds	r3, r7, r1
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	3301      	adds	r3, #1
 8005398:	187a      	adds	r2, r7, r1
 800539a:	6013      	str	r3, [r2, #0]
 800539c:	23f4      	movs	r3, #244	; 0xf4
 800539e:	18fb      	adds	r3, r7, r3
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	029b      	lsls	r3, r3, #10
 80053a6:	b29a      	uxth	r2, r3
 80053a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053aa:	801a      	strh	r2, [r3, #0]
 80053ac:	e039      	b.n	8005422 <USB_EPStartXfer+0x852>
 80053ae:	2286      	movs	r2, #134	; 0x86
 80053b0:	0052      	lsls	r2, r2, #1
 80053b2:	18bb      	adds	r3, r7, r2
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	095b      	lsrs	r3, r3, #5
 80053b8:	21f4      	movs	r1, #244	; 0xf4
 80053ba:	1878      	adds	r0, r7, r1
 80053bc:	6003      	str	r3, [r0, #0]
 80053be:	18bb      	adds	r3, r7, r2
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	221f      	movs	r2, #31
 80053c4:	4013      	ands	r3, r2
 80053c6:	d104      	bne.n	80053d2 <USB_EPStartXfer+0x802>
 80053c8:	187b      	adds	r3, r7, r1
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	3b01      	subs	r3, #1
 80053ce:	187a      	adds	r2, r7, r1
 80053d0:	6013      	str	r3, [r2, #0]
 80053d2:	23f4      	movs	r3, #244	; 0xf4
 80053d4:	18fb      	adds	r3, r7, r3
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	b29b      	uxth	r3, r3
 80053da:	029b      	lsls	r3, r3, #10
 80053dc:	b29b      	uxth	r3, r3
 80053de:	4ab5      	ldr	r2, [pc, #724]	; (80056b4 <USB_EPStartXfer+0xae4>)
 80053e0:	4313      	orrs	r3, r2
 80053e2:	b29a      	uxth	r2, r3
 80053e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053e6:	801a      	strh	r2, [r3, #0]
 80053e8:	e01b      	b.n	8005422 <USB_EPStartXfer+0x852>
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	785b      	ldrb	r3, [r3, #1]
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d117      	bne.n	8005422 <USB_EPStartXfer+0x852>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2250      	movs	r2, #80	; 0x50
 80053f6:	5a9b      	ldrh	r3, [r3, r2]
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	001a      	movs	r2, r3
 80053fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053fe:	189b      	adds	r3, r3, r2
 8005400:	67bb      	str	r3, [r7, #120]	; 0x78
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	00da      	lsls	r2, r3, #3
 8005408:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800540a:	18d3      	adds	r3, r2, r3
 800540c:	4aa7      	ldr	r2, [pc, #668]	; (80056ac <USB_EPStartXfer+0xadc>)
 800540e:	4694      	mov	ip, r2
 8005410:	4463      	add	r3, ip
 8005412:	677b      	str	r3, [r7, #116]	; 0x74
 8005414:	2386      	movs	r3, #134	; 0x86
 8005416:	005b      	lsls	r3, r3, #1
 8005418:	18fb      	adds	r3, r7, r3
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	b29a      	uxth	r2, r3
 800541e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005420:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005422:	2385      	movs	r3, #133	; 0x85
 8005424:	005b      	lsls	r3, r3, #1
 8005426:	18fb      	adds	r3, r7, r3
 8005428:	683a      	ldr	r2, [r7, #0]
 800542a:	8952      	ldrh	r2, [r2, #10]
 800542c:	801a      	strh	r2, [r3, #0]
 800542e:	e09b      	b.n	8005568 <USB_EPStartXfer+0x998>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	785b      	ldrb	r3, [r3, #1]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d16b      	bne.n	8005510 <USB_EPStartXfer+0x940>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2180      	movs	r1, #128	; 0x80
 800543c:	187a      	adds	r2, r7, r1
 800543e:	6013      	str	r3, [r2, #0]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2250      	movs	r2, #80	; 0x50
 8005444:	5a9b      	ldrh	r3, [r3, r2]
 8005446:	b29b      	uxth	r3, r3
 8005448:	001a      	movs	r2, r3
 800544a:	187b      	adds	r3, r7, r1
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	189b      	adds	r3, r3, r2
 8005450:	187a      	adds	r2, r7, r1
 8005452:	6013      	str	r3, [r2, #0]
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	00da      	lsls	r2, r3, #3
 800545a:	187b      	adds	r3, r7, r1
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	18d3      	adds	r3, r2, r3
 8005460:	4a95      	ldr	r2, [pc, #596]	; (80056b8 <USB_EPStartXfer+0xae8>)
 8005462:	4694      	mov	ip, r2
 8005464:	4463      	add	r3, ip
 8005466:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005468:	2386      	movs	r3, #134	; 0x86
 800546a:	005b      	lsls	r3, r3, #1
 800546c:	18fb      	adds	r3, r7, r3
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d110      	bne.n	8005496 <USB_EPStartXfer+0x8c6>
 8005474:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005476:	881b      	ldrh	r3, [r3, #0]
 8005478:	b29b      	uxth	r3, r3
 800547a:	4a8d      	ldr	r2, [pc, #564]	; (80056b0 <USB_EPStartXfer+0xae0>)
 800547c:	4013      	ands	r3, r2
 800547e:	b29a      	uxth	r2, r3
 8005480:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005482:	801a      	strh	r2, [r3, #0]
 8005484:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005486:	881b      	ldrh	r3, [r3, #0]
 8005488:	b29b      	uxth	r3, r3
 800548a:	4a8a      	ldr	r2, [pc, #552]	; (80056b4 <USB_EPStartXfer+0xae4>)
 800548c:	4313      	orrs	r3, r2
 800548e:	b29a      	uxth	r2, r3
 8005490:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005492:	801a      	strh	r2, [r3, #0]
 8005494:	e062      	b.n	800555c <USB_EPStartXfer+0x98c>
 8005496:	2286      	movs	r2, #134	; 0x86
 8005498:	0052      	lsls	r2, r2, #1
 800549a:	18bb      	adds	r3, r7, r2
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2b3e      	cmp	r3, #62	; 0x3e
 80054a0:	d818      	bhi.n	80054d4 <USB_EPStartXfer+0x904>
 80054a2:	18bb      	adds	r3, r7, r2
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	085b      	lsrs	r3, r3, #1
 80054a8:	21f0      	movs	r1, #240	; 0xf0
 80054aa:	1878      	adds	r0, r7, r1
 80054ac:	6003      	str	r3, [r0, #0]
 80054ae:	18bb      	adds	r3, r7, r2
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	2201      	movs	r2, #1
 80054b4:	4013      	ands	r3, r2
 80054b6:	d004      	beq.n	80054c2 <USB_EPStartXfer+0x8f2>
 80054b8:	187b      	adds	r3, r7, r1
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	3301      	adds	r3, #1
 80054be:	187a      	adds	r2, r7, r1
 80054c0:	6013      	str	r3, [r2, #0]
 80054c2:	23f0      	movs	r3, #240	; 0xf0
 80054c4:	18fb      	adds	r3, r7, r3
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	029b      	lsls	r3, r3, #10
 80054cc:	b29a      	uxth	r2, r3
 80054ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80054d0:	801a      	strh	r2, [r3, #0]
 80054d2:	e043      	b.n	800555c <USB_EPStartXfer+0x98c>
 80054d4:	2286      	movs	r2, #134	; 0x86
 80054d6:	0052      	lsls	r2, r2, #1
 80054d8:	18bb      	adds	r3, r7, r2
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	095b      	lsrs	r3, r3, #5
 80054de:	21f0      	movs	r1, #240	; 0xf0
 80054e0:	1878      	adds	r0, r7, r1
 80054e2:	6003      	str	r3, [r0, #0]
 80054e4:	18bb      	adds	r3, r7, r2
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	221f      	movs	r2, #31
 80054ea:	4013      	ands	r3, r2
 80054ec:	d104      	bne.n	80054f8 <USB_EPStartXfer+0x928>
 80054ee:	187b      	adds	r3, r7, r1
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	3b01      	subs	r3, #1
 80054f4:	187a      	adds	r2, r7, r1
 80054f6:	6013      	str	r3, [r2, #0]
 80054f8:	23f0      	movs	r3, #240	; 0xf0
 80054fa:	18fb      	adds	r3, r7, r3
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	b29b      	uxth	r3, r3
 8005500:	029b      	lsls	r3, r3, #10
 8005502:	b29b      	uxth	r3, r3
 8005504:	4a6b      	ldr	r2, [pc, #428]	; (80056b4 <USB_EPStartXfer+0xae4>)
 8005506:	4313      	orrs	r3, r2
 8005508:	b29a      	uxth	r2, r3
 800550a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800550c:	801a      	strh	r2, [r3, #0]
 800550e:	e025      	b.n	800555c <USB_EPStartXfer+0x98c>
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	785b      	ldrb	r3, [r3, #1]
 8005514:	2b01      	cmp	r3, #1
 8005516:	d121      	bne.n	800555c <USB_EPStartXfer+0x98c>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2188      	movs	r1, #136	; 0x88
 800551c:	187a      	adds	r2, r7, r1
 800551e:	6013      	str	r3, [r2, #0]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2250      	movs	r2, #80	; 0x50
 8005524:	5a9b      	ldrh	r3, [r3, r2]
 8005526:	b29b      	uxth	r3, r3
 8005528:	001a      	movs	r2, r3
 800552a:	187b      	adds	r3, r7, r1
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	189b      	adds	r3, r3, r2
 8005530:	187a      	adds	r2, r7, r1
 8005532:	6013      	str	r3, [r2, #0]
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	00da      	lsls	r2, r3, #3
 800553a:	187b      	adds	r3, r7, r1
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	18d3      	adds	r3, r2, r3
 8005540:	4a5d      	ldr	r2, [pc, #372]	; (80056b8 <USB_EPStartXfer+0xae8>)
 8005542:	4694      	mov	ip, r2
 8005544:	4463      	add	r3, ip
 8005546:	2184      	movs	r1, #132	; 0x84
 8005548:	187a      	adds	r2, r7, r1
 800554a:	6013      	str	r3, [r2, #0]
 800554c:	2386      	movs	r3, #134	; 0x86
 800554e:	005b      	lsls	r3, r3, #1
 8005550:	18fb      	adds	r3, r7, r3
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	b29a      	uxth	r2, r3
 8005556:	187b      	adds	r3, r7, r1
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800555c:	2385      	movs	r3, #133	; 0x85
 800555e:	005b      	lsls	r3, r3, #1
 8005560:	18fb      	adds	r3, r7, r3
 8005562:	683a      	ldr	r2, [r7, #0]
 8005564:	8912      	ldrh	r2, [r2, #8]
 8005566:	801a      	strh	r2, [r3, #0]
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	6959      	ldr	r1, [r3, #20]
 800556c:	2386      	movs	r3, #134	; 0x86
 800556e:	005b      	lsls	r3, r3, #1
 8005570:	18fb      	adds	r3, r7, r3
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	b29c      	uxth	r4, r3
 8005576:	2385      	movs	r3, #133	; 0x85
 8005578:	005b      	lsls	r3, r3, #1
 800557a:	18fb      	adds	r3, r7, r3
 800557c:	881a      	ldrh	r2, [r3, #0]
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	0023      	movs	r3, r4
 8005582:	f000 fd6b 	bl	800605c <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	785b      	ldrb	r3, [r3, #1]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d117      	bne.n	80055be <USB_EPStartXfer+0x9ee>
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	18d3      	adds	r3, r2, r3
 8005598:	881b      	ldrh	r3, [r3, #0]
 800559a:	b29a      	uxth	r2, r3
 800559c:	2068      	movs	r0, #104	; 0x68
 800559e:	183b      	adds	r3, r7, r0
 80055a0:	4946      	ldr	r1, [pc, #280]	; (80056bc <USB_EPStartXfer+0xaec>)
 80055a2:	400a      	ands	r2, r1
 80055a4:	801a      	strh	r2, [r3, #0]
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	18d3      	adds	r3, r2, r3
 80055b0:	183a      	adds	r2, r7, r0
 80055b2:	8812      	ldrh	r2, [r2, #0]
 80055b4:	4942      	ldr	r1, [pc, #264]	; (80056c0 <USB_EPStartXfer+0xaf0>)
 80055b6:	430a      	orrs	r2, r1
 80055b8:	b292      	uxth	r2, r2
 80055ba:	801a      	strh	r2, [r3, #0]
 80055bc:	e01a      	b.n	80055f4 <USB_EPStartXfer+0xa24>
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	785b      	ldrb	r3, [r3, #1]
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d116      	bne.n	80055f4 <USB_EPStartXfer+0xa24>
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	781b      	ldrb	r3, [r3, #0]
 80055cc:	009b      	lsls	r3, r3, #2
 80055ce:	18d3      	adds	r3, r2, r3
 80055d0:	881b      	ldrh	r3, [r3, #0]
 80055d2:	b29a      	uxth	r2, r3
 80055d4:	206a      	movs	r0, #106	; 0x6a
 80055d6:	183b      	adds	r3, r7, r0
 80055d8:	4938      	ldr	r1, [pc, #224]	; (80056bc <USB_EPStartXfer+0xaec>)
 80055da:	400a      	ands	r2, r1
 80055dc:	801a      	strh	r2, [r3, #0]
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	18d3      	adds	r3, r2, r3
 80055e8:	183a      	adds	r2, r7, r0
 80055ea:	8812      	ldrh	r2, [r2, #0]
 80055ec:	4935      	ldr	r1, [pc, #212]	; (80056c4 <USB_EPStartXfer+0xaf4>)
 80055ee:	430a      	orrs	r2, r1
 80055f0:	b292      	uxth	r2, r2
 80055f2:	801a      	strh	r2, [r3, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	18d3      	adds	r3, r2, r3
 80055fe:	881b      	ldrh	r3, [r3, #0]
 8005600:	b29a      	uxth	r2, r3
 8005602:	4b31      	ldr	r3, [pc, #196]	; (80056c8 <USB_EPStartXfer+0xaf8>)
 8005604:	2188      	movs	r1, #136	; 0x88
 8005606:	0049      	lsls	r1, r1, #1
 8005608:	468c      	mov	ip, r1
 800560a:	44bc      	add	ip, r7
 800560c:	4463      	add	r3, ip
 800560e:	492f      	ldr	r1, [pc, #188]	; (80056cc <USB_EPStartXfer+0xafc>)
 8005610:	400a      	ands	r2, r1
 8005612:	801a      	strh	r2, [r3, #0]
 8005614:	4b2c      	ldr	r3, [pc, #176]	; (80056c8 <USB_EPStartXfer+0xaf8>)
 8005616:	2288      	movs	r2, #136	; 0x88
 8005618:	0052      	lsls	r2, r2, #1
 800561a:	4694      	mov	ip, r2
 800561c:	44bc      	add	ip, r7
 800561e:	4463      	add	r3, ip
 8005620:	4a29      	ldr	r2, [pc, #164]	; (80056c8 <USB_EPStartXfer+0xaf8>)
 8005622:	2188      	movs	r1, #136	; 0x88
 8005624:	0049      	lsls	r1, r1, #1
 8005626:	468c      	mov	ip, r1
 8005628:	44bc      	add	ip, r7
 800562a:	4462      	add	r2, ip
 800562c:	8812      	ldrh	r2, [r2, #0]
 800562e:	2110      	movs	r1, #16
 8005630:	404a      	eors	r2, r1
 8005632:	801a      	strh	r2, [r3, #0]
 8005634:	4b24      	ldr	r3, [pc, #144]	; (80056c8 <USB_EPStartXfer+0xaf8>)
 8005636:	2288      	movs	r2, #136	; 0x88
 8005638:	0052      	lsls	r2, r2, #1
 800563a:	4694      	mov	ip, r2
 800563c:	44bc      	add	ip, r7
 800563e:	4463      	add	r3, ip
 8005640:	4a21      	ldr	r2, [pc, #132]	; (80056c8 <USB_EPStartXfer+0xaf8>)
 8005642:	2188      	movs	r1, #136	; 0x88
 8005644:	0049      	lsls	r1, r1, #1
 8005646:	468c      	mov	ip, r1
 8005648:	44bc      	add	ip, r7
 800564a:	4462      	add	r2, ip
 800564c:	8812      	ldrh	r2, [r2, #0]
 800564e:	2120      	movs	r1, #32
 8005650:	404a      	eors	r2, r1
 8005652:	801a      	strh	r2, [r3, #0]
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	18d3      	adds	r3, r2, r3
 800565e:	4a1a      	ldr	r2, [pc, #104]	; (80056c8 <USB_EPStartXfer+0xaf8>)
 8005660:	2188      	movs	r1, #136	; 0x88
 8005662:	0049      	lsls	r1, r1, #1
 8005664:	468c      	mov	ip, r1
 8005666:	44bc      	add	ip, r7
 8005668:	4462      	add	r2, ip
 800566a:	8812      	ldrh	r2, [r2, #0]
 800566c:	4918      	ldr	r1, [pc, #96]	; (80056d0 <USB_EPStartXfer+0xb00>)
 800566e:	430a      	orrs	r2, r1
 8005670:	b292      	uxth	r2, r2
 8005672:	801a      	strh	r2, [r3, #0]
 8005674:	f000 fbc5 	bl	8005e02 <USB_EPStartXfer+0x1232>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	7b1b      	ldrb	r3, [r3, #12]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d000      	beq.n	8005682 <USB_EPStartXfer+0xab2>
 8005680:	e0a7      	b.n	80057d2 <USB_EPStartXfer+0xc02>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	699a      	ldr	r2, [r3, #24]
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	429a      	cmp	r2, r3
 800568c:	d922      	bls.n	80056d4 <USB_EPStartXfer+0xb04>
      {
        len = ep->maxpacket;
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	2186      	movs	r1, #134	; 0x86
 8005694:	0049      	lsls	r1, r1, #1
 8005696:	187a      	adds	r2, r7, r1
 8005698:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	699a      	ldr	r2, [r3, #24]
 800569e:	187b      	adds	r3, r7, r1
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	1ad2      	subs	r2, r2, r3
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	619a      	str	r2, [r3, #24]
 80056a8:	e01d      	b.n	80056e6 <USB_EPStartXfer+0xb16>
 80056aa:	46c0      	nop			; (mov r8, r8)
 80056ac:	00000406 	.word	0x00000406
 80056b0:	ffff83ff 	.word	0xffff83ff
 80056b4:	ffff8000 	.word	0xffff8000
 80056b8:	00000402 	.word	0x00000402
 80056bc:	ffff8f8f 	.word	0xffff8f8f
 80056c0:	ffff80c0 	.word	0xffff80c0
 80056c4:	ffffc080 	.word	0xffffc080
 80056c8:	fffffefe 	.word	0xfffffefe
 80056cc:	ffff8fbf 	.word	0xffff8fbf
 80056d0:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	699b      	ldr	r3, [r3, #24]
 80056d8:	2286      	movs	r2, #134	; 0x86
 80056da:	0052      	lsls	r2, r2, #1
 80056dc:	18ba      	adds	r2, r7, r2
 80056de:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	2200      	movs	r2, #0
 80056e4:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2194      	movs	r1, #148	; 0x94
 80056ea:	187a      	adds	r2, r7, r1
 80056ec:	6013      	str	r3, [r2, #0]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2250      	movs	r2, #80	; 0x50
 80056f2:	5a9b      	ldrh	r3, [r3, r2]
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	001a      	movs	r2, r3
 80056f8:	187b      	adds	r3, r7, r1
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	189b      	adds	r3, r3, r2
 80056fe:	187a      	adds	r2, r7, r1
 8005700:	6013      	str	r3, [r2, #0]
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	00da      	lsls	r2, r3, #3
 8005708:	187b      	adds	r3, r7, r1
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	18d3      	adds	r3, r2, r3
 800570e:	4abc      	ldr	r2, [pc, #752]	; (8005a00 <USB_EPStartXfer+0xe30>)
 8005710:	4694      	mov	ip, r2
 8005712:	4463      	add	r3, ip
 8005714:	2190      	movs	r1, #144	; 0x90
 8005716:	187a      	adds	r2, r7, r1
 8005718:	6013      	str	r3, [r2, #0]
 800571a:	2386      	movs	r3, #134	; 0x86
 800571c:	005b      	lsls	r3, r3, #1
 800571e:	18fb      	adds	r3, r7, r3
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d114      	bne.n	8005750 <USB_EPStartXfer+0xb80>
 8005726:	187b      	adds	r3, r7, r1
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	881b      	ldrh	r3, [r3, #0]
 800572c:	b29b      	uxth	r3, r3
 800572e:	4ab5      	ldr	r2, [pc, #724]	; (8005a04 <USB_EPStartXfer+0xe34>)
 8005730:	4013      	ands	r3, r2
 8005732:	b29a      	uxth	r2, r3
 8005734:	187b      	adds	r3, r7, r1
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	801a      	strh	r2, [r3, #0]
 800573a:	187b      	adds	r3, r7, r1
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	881b      	ldrh	r3, [r3, #0]
 8005740:	b29b      	uxth	r3, r3
 8005742:	4ab1      	ldr	r2, [pc, #708]	; (8005a08 <USB_EPStartXfer+0xe38>)
 8005744:	4313      	orrs	r3, r2
 8005746:	b29a      	uxth	r2, r3
 8005748:	187b      	adds	r3, r7, r1
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	801a      	strh	r2, [r3, #0]
 800574e:	e333      	b.n	8005db8 <USB_EPStartXfer+0x11e8>
 8005750:	2286      	movs	r2, #134	; 0x86
 8005752:	0052      	lsls	r2, r2, #1
 8005754:	18bb      	adds	r3, r7, r2
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	2b3e      	cmp	r3, #62	; 0x3e
 800575a:	d81a      	bhi.n	8005792 <USB_EPStartXfer+0xbc2>
 800575c:	18bb      	adds	r3, r7, r2
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	085b      	lsrs	r3, r3, #1
 8005762:	21ec      	movs	r1, #236	; 0xec
 8005764:	1878      	adds	r0, r7, r1
 8005766:	6003      	str	r3, [r0, #0]
 8005768:	18bb      	adds	r3, r7, r2
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	2201      	movs	r2, #1
 800576e:	4013      	ands	r3, r2
 8005770:	d004      	beq.n	800577c <USB_EPStartXfer+0xbac>
 8005772:	187b      	adds	r3, r7, r1
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	3301      	adds	r3, #1
 8005778:	187a      	adds	r2, r7, r1
 800577a:	6013      	str	r3, [r2, #0]
 800577c:	23ec      	movs	r3, #236	; 0xec
 800577e:	18fb      	adds	r3, r7, r3
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	b29b      	uxth	r3, r3
 8005784:	029b      	lsls	r3, r3, #10
 8005786:	b29a      	uxth	r2, r3
 8005788:	2390      	movs	r3, #144	; 0x90
 800578a:	18fb      	adds	r3, r7, r3
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	801a      	strh	r2, [r3, #0]
 8005790:	e312      	b.n	8005db8 <USB_EPStartXfer+0x11e8>
 8005792:	2286      	movs	r2, #134	; 0x86
 8005794:	0052      	lsls	r2, r2, #1
 8005796:	18bb      	adds	r3, r7, r2
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	095b      	lsrs	r3, r3, #5
 800579c:	21ec      	movs	r1, #236	; 0xec
 800579e:	1878      	adds	r0, r7, r1
 80057a0:	6003      	str	r3, [r0, #0]
 80057a2:	18bb      	adds	r3, r7, r2
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	221f      	movs	r2, #31
 80057a8:	4013      	ands	r3, r2
 80057aa:	d104      	bne.n	80057b6 <USB_EPStartXfer+0xbe6>
 80057ac:	187b      	adds	r3, r7, r1
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	3b01      	subs	r3, #1
 80057b2:	187a      	adds	r2, r7, r1
 80057b4:	6013      	str	r3, [r2, #0]
 80057b6:	23ec      	movs	r3, #236	; 0xec
 80057b8:	18fb      	adds	r3, r7, r3
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	b29b      	uxth	r3, r3
 80057be:	029b      	lsls	r3, r3, #10
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	4a91      	ldr	r2, [pc, #580]	; (8005a08 <USB_EPStartXfer+0xe38>)
 80057c4:	4313      	orrs	r3, r2
 80057c6:	b29a      	uxth	r2, r3
 80057c8:	2390      	movs	r3, #144	; 0x90
 80057ca:	18fb      	adds	r3, r7, r3
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	801a      	strh	r2, [r3, #0]
 80057d0:	e2f2      	b.n	8005db8 <USB_EPStartXfer+0x11e8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	78db      	ldrb	r3, [r3, #3]
 80057d6:	2b02      	cmp	r3, #2
 80057d8:	d000      	beq.n	80057dc <USB_EPStartXfer+0xc0c>
 80057da:	e179      	b.n	8005ad0 <USB_EPStartXfer+0xf00>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	785b      	ldrb	r3, [r3, #1]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d16f      	bne.n	80058c4 <USB_EPStartXfer+0xcf4>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	21b0      	movs	r1, #176	; 0xb0
 80057e8:	187a      	adds	r2, r7, r1
 80057ea:	6013      	str	r3, [r2, #0]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2250      	movs	r2, #80	; 0x50
 80057f0:	5a9b      	ldrh	r3, [r3, r2]
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	001a      	movs	r2, r3
 80057f6:	187b      	adds	r3, r7, r1
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	189b      	adds	r3, r3, r2
 80057fc:	187a      	adds	r2, r7, r1
 80057fe:	6013      	str	r3, [r2, #0]
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	00da      	lsls	r2, r3, #3
 8005806:	187b      	adds	r3, r7, r1
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	18d3      	adds	r3, r2, r3
 800580c:	4a7f      	ldr	r2, [pc, #508]	; (8005a0c <USB_EPStartXfer+0xe3c>)
 800580e:	4694      	mov	ip, r2
 8005810:	4463      	add	r3, ip
 8005812:	21ac      	movs	r1, #172	; 0xac
 8005814:	187a      	adds	r2, r7, r1
 8005816:	6013      	str	r3, [r2, #0]
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	691b      	ldr	r3, [r3, #16]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d114      	bne.n	800584a <USB_EPStartXfer+0xc7a>
 8005820:	187b      	adds	r3, r7, r1
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	881b      	ldrh	r3, [r3, #0]
 8005826:	b29b      	uxth	r3, r3
 8005828:	4a76      	ldr	r2, [pc, #472]	; (8005a04 <USB_EPStartXfer+0xe34>)
 800582a:	4013      	ands	r3, r2
 800582c:	b29a      	uxth	r2, r3
 800582e:	187b      	adds	r3, r7, r1
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	801a      	strh	r2, [r3, #0]
 8005834:	187b      	adds	r3, r7, r1
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	881b      	ldrh	r3, [r3, #0]
 800583a:	b29b      	uxth	r3, r3
 800583c:	4a72      	ldr	r2, [pc, #456]	; (8005a08 <USB_EPStartXfer+0xe38>)
 800583e:	4313      	orrs	r3, r2
 8005840:	b29a      	uxth	r2, r3
 8005842:	187b      	adds	r3, r7, r1
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	801a      	strh	r2, [r3, #0]
 8005848:	e060      	b.n	800590c <USB_EPStartXfer+0xd3c>
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	2b3e      	cmp	r3, #62	; 0x3e
 8005850:	d81a      	bhi.n	8005888 <USB_EPStartXfer+0xcb8>
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	691b      	ldr	r3, [r3, #16]
 8005856:	085b      	lsrs	r3, r3, #1
 8005858:	21e8      	movs	r1, #232	; 0xe8
 800585a:	187a      	adds	r2, r7, r1
 800585c:	6013      	str	r3, [r2, #0]
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	691b      	ldr	r3, [r3, #16]
 8005862:	2201      	movs	r2, #1
 8005864:	4013      	ands	r3, r2
 8005866:	d004      	beq.n	8005872 <USB_EPStartXfer+0xca2>
 8005868:	187b      	adds	r3, r7, r1
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	3301      	adds	r3, #1
 800586e:	187a      	adds	r2, r7, r1
 8005870:	6013      	str	r3, [r2, #0]
 8005872:	23e8      	movs	r3, #232	; 0xe8
 8005874:	18fb      	adds	r3, r7, r3
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	b29b      	uxth	r3, r3
 800587a:	029b      	lsls	r3, r3, #10
 800587c:	b29a      	uxth	r2, r3
 800587e:	23ac      	movs	r3, #172	; 0xac
 8005880:	18fb      	adds	r3, r7, r3
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	801a      	strh	r2, [r3, #0]
 8005886:	e041      	b.n	800590c <USB_EPStartXfer+0xd3c>
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	691b      	ldr	r3, [r3, #16]
 800588c:	095b      	lsrs	r3, r3, #5
 800588e:	21e8      	movs	r1, #232	; 0xe8
 8005890:	187a      	adds	r2, r7, r1
 8005892:	6013      	str	r3, [r2, #0]
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	691b      	ldr	r3, [r3, #16]
 8005898:	221f      	movs	r2, #31
 800589a:	4013      	ands	r3, r2
 800589c:	d104      	bne.n	80058a8 <USB_EPStartXfer+0xcd8>
 800589e:	187b      	adds	r3, r7, r1
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	3b01      	subs	r3, #1
 80058a4:	187a      	adds	r2, r7, r1
 80058a6:	6013      	str	r3, [r2, #0]
 80058a8:	23e8      	movs	r3, #232	; 0xe8
 80058aa:	18fb      	adds	r3, r7, r3
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	029b      	lsls	r3, r3, #10
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	4a54      	ldr	r2, [pc, #336]	; (8005a08 <USB_EPStartXfer+0xe38>)
 80058b6:	4313      	orrs	r3, r2
 80058b8:	b29a      	uxth	r2, r3
 80058ba:	23ac      	movs	r3, #172	; 0xac
 80058bc:	18fb      	adds	r3, r7, r3
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	801a      	strh	r2, [r3, #0]
 80058c2:	e023      	b.n	800590c <USB_EPStartXfer+0xd3c>
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	785b      	ldrb	r3, [r3, #1]
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d11f      	bne.n	800590c <USB_EPStartXfer+0xd3c>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	21b8      	movs	r1, #184	; 0xb8
 80058d0:	187a      	adds	r2, r7, r1
 80058d2:	6013      	str	r3, [r2, #0]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2250      	movs	r2, #80	; 0x50
 80058d8:	5a9b      	ldrh	r3, [r3, r2]
 80058da:	b29b      	uxth	r3, r3
 80058dc:	001a      	movs	r2, r3
 80058de:	187b      	adds	r3, r7, r1
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	189b      	adds	r3, r3, r2
 80058e4:	187a      	adds	r2, r7, r1
 80058e6:	6013      	str	r3, [r2, #0]
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	00da      	lsls	r2, r3, #3
 80058ee:	187b      	adds	r3, r7, r1
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	18d3      	adds	r3, r2, r3
 80058f4:	4a45      	ldr	r2, [pc, #276]	; (8005a0c <USB_EPStartXfer+0xe3c>)
 80058f6:	4694      	mov	ip, r2
 80058f8:	4463      	add	r3, ip
 80058fa:	21b4      	movs	r1, #180	; 0xb4
 80058fc:	187a      	adds	r2, r7, r1
 80058fe:	6013      	str	r3, [r2, #0]
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	691b      	ldr	r3, [r3, #16]
 8005904:	b29a      	uxth	r2, r3
 8005906:	187b      	adds	r3, r7, r1
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	801a      	strh	r2, [r3, #0]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	22a8      	movs	r2, #168	; 0xa8
 8005910:	18ba      	adds	r2, r7, r2
 8005912:	6013      	str	r3, [r2, #0]
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	785b      	ldrb	r3, [r3, #1]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d000      	beq.n	800591e <USB_EPStartXfer+0xd4e>
 800591c:	e078      	b.n	8005a10 <USB_EPStartXfer+0xe40>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	21a0      	movs	r1, #160	; 0xa0
 8005922:	187a      	adds	r2, r7, r1
 8005924:	6013      	str	r3, [r2, #0]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2250      	movs	r2, #80	; 0x50
 800592a:	5a9b      	ldrh	r3, [r3, r2]
 800592c:	b29b      	uxth	r3, r3
 800592e:	001a      	movs	r2, r3
 8005930:	187b      	adds	r3, r7, r1
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	189b      	adds	r3, r3, r2
 8005936:	187a      	adds	r2, r7, r1
 8005938:	6013      	str	r3, [r2, #0]
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	00da      	lsls	r2, r3, #3
 8005940:	187b      	adds	r3, r7, r1
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	18d3      	adds	r3, r2, r3
 8005946:	4a2e      	ldr	r2, [pc, #184]	; (8005a00 <USB_EPStartXfer+0xe30>)
 8005948:	4694      	mov	ip, r2
 800594a:	4463      	add	r3, ip
 800594c:	219c      	movs	r1, #156	; 0x9c
 800594e:	187a      	adds	r2, r7, r1
 8005950:	6013      	str	r3, [r2, #0]
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d114      	bne.n	8005984 <USB_EPStartXfer+0xdb4>
 800595a:	187b      	adds	r3, r7, r1
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	881b      	ldrh	r3, [r3, #0]
 8005960:	b29b      	uxth	r3, r3
 8005962:	4a28      	ldr	r2, [pc, #160]	; (8005a04 <USB_EPStartXfer+0xe34>)
 8005964:	4013      	ands	r3, r2
 8005966:	b29a      	uxth	r2, r3
 8005968:	187b      	adds	r3, r7, r1
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	801a      	strh	r2, [r3, #0]
 800596e:	187b      	adds	r3, r7, r1
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	881b      	ldrh	r3, [r3, #0]
 8005974:	b29b      	uxth	r3, r3
 8005976:	4a24      	ldr	r2, [pc, #144]	; (8005a08 <USB_EPStartXfer+0xe38>)
 8005978:	4313      	orrs	r3, r2
 800597a:	b29a      	uxth	r2, r3
 800597c:	187b      	adds	r3, r7, r1
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	801a      	strh	r2, [r3, #0]
 8005982:	e066      	b.n	8005a52 <USB_EPStartXfer+0xe82>
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	691b      	ldr	r3, [r3, #16]
 8005988:	2b3e      	cmp	r3, #62	; 0x3e
 800598a:	d81a      	bhi.n	80059c2 <USB_EPStartXfer+0xdf2>
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	691b      	ldr	r3, [r3, #16]
 8005990:	085b      	lsrs	r3, r3, #1
 8005992:	21e4      	movs	r1, #228	; 0xe4
 8005994:	187a      	adds	r2, r7, r1
 8005996:	6013      	str	r3, [r2, #0]
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	691b      	ldr	r3, [r3, #16]
 800599c:	2201      	movs	r2, #1
 800599e:	4013      	ands	r3, r2
 80059a0:	d004      	beq.n	80059ac <USB_EPStartXfer+0xddc>
 80059a2:	187b      	adds	r3, r7, r1
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	3301      	adds	r3, #1
 80059a8:	187a      	adds	r2, r7, r1
 80059aa:	6013      	str	r3, [r2, #0]
 80059ac:	23e4      	movs	r3, #228	; 0xe4
 80059ae:	18fb      	adds	r3, r7, r3
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	029b      	lsls	r3, r3, #10
 80059b6:	b29a      	uxth	r2, r3
 80059b8:	239c      	movs	r3, #156	; 0x9c
 80059ba:	18fb      	adds	r3, r7, r3
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	801a      	strh	r2, [r3, #0]
 80059c0:	e047      	b.n	8005a52 <USB_EPStartXfer+0xe82>
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	095b      	lsrs	r3, r3, #5
 80059c8:	21e4      	movs	r1, #228	; 0xe4
 80059ca:	187a      	adds	r2, r7, r1
 80059cc:	6013      	str	r3, [r2, #0]
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	221f      	movs	r2, #31
 80059d4:	4013      	ands	r3, r2
 80059d6:	d104      	bne.n	80059e2 <USB_EPStartXfer+0xe12>
 80059d8:	187b      	adds	r3, r7, r1
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	3b01      	subs	r3, #1
 80059de:	187a      	adds	r2, r7, r1
 80059e0:	6013      	str	r3, [r2, #0]
 80059e2:	23e4      	movs	r3, #228	; 0xe4
 80059e4:	18fb      	adds	r3, r7, r3
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	029b      	lsls	r3, r3, #10
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	4a06      	ldr	r2, [pc, #24]	; (8005a08 <USB_EPStartXfer+0xe38>)
 80059f0:	4313      	orrs	r3, r2
 80059f2:	b29a      	uxth	r2, r3
 80059f4:	239c      	movs	r3, #156	; 0x9c
 80059f6:	18fb      	adds	r3, r7, r3
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	801a      	strh	r2, [r3, #0]
 80059fc:	e029      	b.n	8005a52 <USB_EPStartXfer+0xe82>
 80059fe:	46c0      	nop			; (mov r8, r8)
 8005a00:	00000406 	.word	0x00000406
 8005a04:	ffff83ff 	.word	0xffff83ff
 8005a08:	ffff8000 	.word	0xffff8000
 8005a0c:	00000402 	.word	0x00000402
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	785b      	ldrb	r3, [r3, #1]
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d11c      	bne.n	8005a52 <USB_EPStartXfer+0xe82>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2250      	movs	r2, #80	; 0x50
 8005a1c:	5a9b      	ldrh	r3, [r3, r2]
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	001a      	movs	r2, r3
 8005a22:	21a8      	movs	r1, #168	; 0xa8
 8005a24:	187b      	adds	r3, r7, r1
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	189b      	adds	r3, r3, r2
 8005a2a:	187a      	adds	r2, r7, r1
 8005a2c:	6013      	str	r3, [r2, #0]
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	00da      	lsls	r2, r3, #3
 8005a34:	187b      	adds	r3, r7, r1
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	18d3      	adds	r3, r2, r3
 8005a3a:	4ad9      	ldr	r2, [pc, #868]	; (8005da0 <USB_EPStartXfer+0x11d0>)
 8005a3c:	4694      	mov	ip, r2
 8005a3e:	4463      	add	r3, ip
 8005a40:	21a4      	movs	r1, #164	; 0xa4
 8005a42:	187a      	adds	r2, r7, r1
 8005a44:	6013      	str	r3, [r2, #0]
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	691b      	ldr	r3, [r3, #16]
 8005a4a:	b29a      	uxth	r2, r3
 8005a4c:	187b      	adds	r3, r7, r1
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	69db      	ldr	r3, [r3, #28]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d100      	bne.n	8005a5c <USB_EPStartXfer+0xe8c>
 8005a5a:	e1ad      	b.n	8005db8 <USB_EPStartXfer+0x11e8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	18d2      	adds	r2, r2, r3
 8005a66:	219a      	movs	r1, #154	; 0x9a
 8005a68:	187b      	adds	r3, r7, r1
 8005a6a:	8812      	ldrh	r2, [r2, #0]
 8005a6c:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005a6e:	187b      	adds	r3, r7, r1
 8005a70:	881a      	ldrh	r2, [r3, #0]
 8005a72:	2380      	movs	r3, #128	; 0x80
 8005a74:	01db      	lsls	r3, r3, #7
 8005a76:	4013      	ands	r3, r2
 8005a78:	d004      	beq.n	8005a84 <USB_EPStartXfer+0xeb4>
 8005a7a:	187b      	adds	r3, r7, r1
 8005a7c:	881b      	ldrh	r3, [r3, #0]
 8005a7e:	2240      	movs	r2, #64	; 0x40
 8005a80:	4013      	ands	r3, r2
 8005a82:	d10d      	bne.n	8005aa0 <USB_EPStartXfer+0xed0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005a84:	219a      	movs	r1, #154	; 0x9a
 8005a86:	187b      	adds	r3, r7, r1
 8005a88:	881a      	ldrh	r2, [r3, #0]
 8005a8a:	2380      	movs	r3, #128	; 0x80
 8005a8c:	01db      	lsls	r3, r3, #7
 8005a8e:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005a90:	d000      	beq.n	8005a94 <USB_EPStartXfer+0xec4>
 8005a92:	e191      	b.n	8005db8 <USB_EPStartXfer+0x11e8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005a94:	187b      	adds	r3, r7, r1
 8005a96:	881b      	ldrh	r3, [r3, #0]
 8005a98:	2240      	movs	r2, #64	; 0x40
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	d000      	beq.n	8005aa0 <USB_EPStartXfer+0xed0>
 8005a9e:	e18b      	b.n	8005db8 <USB_EPStartXfer+0x11e8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	18d3      	adds	r3, r2, r3
 8005aaa:	881b      	ldrh	r3, [r3, #0]
 8005aac:	b29a      	uxth	r2, r3
 8005aae:	2098      	movs	r0, #152	; 0x98
 8005ab0:	183b      	adds	r3, r7, r0
 8005ab2:	49bc      	ldr	r1, [pc, #752]	; (8005da4 <USB_EPStartXfer+0x11d4>)
 8005ab4:	400a      	ands	r2, r1
 8005ab6:	801a      	strh	r2, [r3, #0]
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	18d3      	adds	r3, r2, r3
 8005ac2:	183a      	adds	r2, r7, r0
 8005ac4:	8812      	ldrh	r2, [r2, #0]
 8005ac6:	49b8      	ldr	r1, [pc, #736]	; (8005da8 <USB_EPStartXfer+0x11d8>)
 8005ac8:	430a      	orrs	r2, r1
 8005aca:	b292      	uxth	r2, r2
 8005acc:	801a      	strh	r2, [r3, #0]
 8005ace:	e173      	b.n	8005db8 <USB_EPStartXfer+0x11e8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	78db      	ldrb	r3, [r3, #3]
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d000      	beq.n	8005ada <USB_EPStartXfer+0xf0a>
 8005ad8:	e160      	b.n	8005d9c <USB_EPStartXfer+0x11cc>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	699a      	ldr	r2, [r3, #24]
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d90d      	bls.n	8005b02 <USB_EPStartXfer+0xf32>
        {
          len = ep->maxpacket;
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	2186      	movs	r1, #134	; 0x86
 8005aec:	0049      	lsls	r1, r1, #1
 8005aee:	187a      	adds	r2, r7, r1
 8005af0:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	699a      	ldr	r2, [r3, #24]
 8005af6:	187b      	adds	r3, r7, r1
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	1ad2      	subs	r2, r2, r3
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	619a      	str	r2, [r3, #24]
 8005b00:	e008      	b.n	8005b14 <USB_EPStartXfer+0xf44>
        }
        else
        {
          len = ep->xfer_len;
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	699b      	ldr	r3, [r3, #24]
 8005b06:	2286      	movs	r2, #134	; 0x86
 8005b08:	0052      	lsls	r2, r2, #1
 8005b0a:	18ba      	adds	r2, r7, r2
 8005b0c:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	2200      	movs	r2, #0
 8005b12:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	785b      	ldrb	r3, [r3, #1]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d000      	beq.n	8005b1e <USB_EPStartXfer+0xf4e>
 8005b1c:	e075      	b.n	8005c0a <USB_EPStartXfer+0x103a>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	21d0      	movs	r1, #208	; 0xd0
 8005b22:	187a      	adds	r2, r7, r1
 8005b24:	6013      	str	r3, [r2, #0]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2250      	movs	r2, #80	; 0x50
 8005b2a:	5a9b      	ldrh	r3, [r3, r2]
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	001a      	movs	r2, r3
 8005b30:	187b      	adds	r3, r7, r1
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	189b      	adds	r3, r3, r2
 8005b36:	187a      	adds	r2, r7, r1
 8005b38:	6013      	str	r3, [r2, #0]
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	00da      	lsls	r2, r3, #3
 8005b40:	187b      	adds	r3, r7, r1
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	18d3      	adds	r3, r2, r3
 8005b46:	4a99      	ldr	r2, [pc, #612]	; (8005dac <USB_EPStartXfer+0x11dc>)
 8005b48:	4694      	mov	ip, r2
 8005b4a:	4463      	add	r3, ip
 8005b4c:	21cc      	movs	r1, #204	; 0xcc
 8005b4e:	187a      	adds	r2, r7, r1
 8005b50:	6013      	str	r3, [r2, #0]
 8005b52:	2386      	movs	r3, #134	; 0x86
 8005b54:	005b      	lsls	r3, r3, #1
 8005b56:	18fb      	adds	r3, r7, r3
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d114      	bne.n	8005b88 <USB_EPStartXfer+0xfb8>
 8005b5e:	187b      	adds	r3, r7, r1
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	881b      	ldrh	r3, [r3, #0]
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	4a92      	ldr	r2, [pc, #584]	; (8005db0 <USB_EPStartXfer+0x11e0>)
 8005b68:	4013      	ands	r3, r2
 8005b6a:	b29a      	uxth	r2, r3
 8005b6c:	187b      	adds	r3, r7, r1
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	801a      	strh	r2, [r3, #0]
 8005b72:	187b      	adds	r3, r7, r1
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	881b      	ldrh	r3, [r3, #0]
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	4a8e      	ldr	r2, [pc, #568]	; (8005db4 <USB_EPStartXfer+0x11e4>)
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	b29a      	uxth	r2, r3
 8005b80:	187b      	adds	r3, r7, r1
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	801a      	strh	r2, [r3, #0]
 8005b86:	e066      	b.n	8005c56 <USB_EPStartXfer+0x1086>
 8005b88:	2286      	movs	r2, #134	; 0x86
 8005b8a:	0052      	lsls	r2, r2, #1
 8005b8c:	18bb      	adds	r3, r7, r2
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	2b3e      	cmp	r3, #62	; 0x3e
 8005b92:	d81a      	bhi.n	8005bca <USB_EPStartXfer+0xffa>
 8005b94:	18bb      	adds	r3, r7, r2
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	085b      	lsrs	r3, r3, #1
 8005b9a:	21e0      	movs	r1, #224	; 0xe0
 8005b9c:	1878      	adds	r0, r7, r1
 8005b9e:	6003      	str	r3, [r0, #0]
 8005ba0:	18bb      	adds	r3, r7, r2
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	4013      	ands	r3, r2
 8005ba8:	d004      	beq.n	8005bb4 <USB_EPStartXfer+0xfe4>
 8005baa:	187b      	adds	r3, r7, r1
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	3301      	adds	r3, #1
 8005bb0:	187a      	adds	r2, r7, r1
 8005bb2:	6013      	str	r3, [r2, #0]
 8005bb4:	23e0      	movs	r3, #224	; 0xe0
 8005bb6:	18fb      	adds	r3, r7, r3
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	029b      	lsls	r3, r3, #10
 8005bbe:	b29a      	uxth	r2, r3
 8005bc0:	23cc      	movs	r3, #204	; 0xcc
 8005bc2:	18fb      	adds	r3, r7, r3
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	801a      	strh	r2, [r3, #0]
 8005bc8:	e045      	b.n	8005c56 <USB_EPStartXfer+0x1086>
 8005bca:	2286      	movs	r2, #134	; 0x86
 8005bcc:	0052      	lsls	r2, r2, #1
 8005bce:	18bb      	adds	r3, r7, r2
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	095b      	lsrs	r3, r3, #5
 8005bd4:	21e0      	movs	r1, #224	; 0xe0
 8005bd6:	1878      	adds	r0, r7, r1
 8005bd8:	6003      	str	r3, [r0, #0]
 8005bda:	18bb      	adds	r3, r7, r2
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	221f      	movs	r2, #31
 8005be0:	4013      	ands	r3, r2
 8005be2:	d104      	bne.n	8005bee <USB_EPStartXfer+0x101e>
 8005be4:	187b      	adds	r3, r7, r1
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	3b01      	subs	r3, #1
 8005bea:	187a      	adds	r2, r7, r1
 8005bec:	6013      	str	r3, [r2, #0]
 8005bee:	23e0      	movs	r3, #224	; 0xe0
 8005bf0:	18fb      	adds	r3, r7, r3
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	029b      	lsls	r3, r3, #10
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	4a6e      	ldr	r2, [pc, #440]	; (8005db4 <USB_EPStartXfer+0x11e4>)
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	b29a      	uxth	r2, r3
 8005c00:	23cc      	movs	r3, #204	; 0xcc
 8005c02:	18fb      	adds	r3, r7, r3
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	801a      	strh	r2, [r3, #0]
 8005c08:	e025      	b.n	8005c56 <USB_EPStartXfer+0x1086>
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	785b      	ldrb	r3, [r3, #1]
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d121      	bne.n	8005c56 <USB_EPStartXfer+0x1086>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	21d8      	movs	r1, #216	; 0xd8
 8005c16:	187a      	adds	r2, r7, r1
 8005c18:	6013      	str	r3, [r2, #0]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2250      	movs	r2, #80	; 0x50
 8005c1e:	5a9b      	ldrh	r3, [r3, r2]
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	001a      	movs	r2, r3
 8005c24:	187b      	adds	r3, r7, r1
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	189b      	adds	r3, r3, r2
 8005c2a:	187a      	adds	r2, r7, r1
 8005c2c:	6013      	str	r3, [r2, #0]
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	00da      	lsls	r2, r3, #3
 8005c34:	187b      	adds	r3, r7, r1
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	18d3      	adds	r3, r2, r3
 8005c3a:	4a5c      	ldr	r2, [pc, #368]	; (8005dac <USB_EPStartXfer+0x11dc>)
 8005c3c:	4694      	mov	ip, r2
 8005c3e:	4463      	add	r3, ip
 8005c40:	21d4      	movs	r1, #212	; 0xd4
 8005c42:	187a      	adds	r2, r7, r1
 8005c44:	6013      	str	r3, [r2, #0]
 8005c46:	2386      	movs	r3, #134	; 0x86
 8005c48:	005b      	lsls	r3, r3, #1
 8005c4a:	18fb      	adds	r3, r7, r3
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	b29a      	uxth	r2, r3
 8005c50:	187b      	adds	r3, r7, r1
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	801a      	strh	r2, [r3, #0]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	22c8      	movs	r2, #200	; 0xc8
 8005c5a:	18ba      	adds	r2, r7, r2
 8005c5c:	6013      	str	r3, [r2, #0]
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	785b      	ldrb	r3, [r3, #1]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d000      	beq.n	8005c68 <USB_EPStartXfer+0x1098>
 8005c66:	e075      	b.n	8005d54 <USB_EPStartXfer+0x1184>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	21c0      	movs	r1, #192	; 0xc0
 8005c6c:	187a      	adds	r2, r7, r1
 8005c6e:	6013      	str	r3, [r2, #0]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2250      	movs	r2, #80	; 0x50
 8005c74:	5a9b      	ldrh	r3, [r3, r2]
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	001a      	movs	r2, r3
 8005c7a:	187b      	adds	r3, r7, r1
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	189b      	adds	r3, r3, r2
 8005c80:	187a      	adds	r2, r7, r1
 8005c82:	6013      	str	r3, [r2, #0]
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	00da      	lsls	r2, r3, #3
 8005c8a:	187b      	adds	r3, r7, r1
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	18d3      	adds	r3, r2, r3
 8005c90:	4a43      	ldr	r2, [pc, #268]	; (8005da0 <USB_EPStartXfer+0x11d0>)
 8005c92:	4694      	mov	ip, r2
 8005c94:	4463      	add	r3, ip
 8005c96:	21bc      	movs	r1, #188	; 0xbc
 8005c98:	187a      	adds	r2, r7, r1
 8005c9a:	6013      	str	r3, [r2, #0]
 8005c9c:	2386      	movs	r3, #134	; 0x86
 8005c9e:	005b      	lsls	r3, r3, #1
 8005ca0:	18fb      	adds	r3, r7, r3
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d114      	bne.n	8005cd2 <USB_EPStartXfer+0x1102>
 8005ca8:	187b      	adds	r3, r7, r1
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	881b      	ldrh	r3, [r3, #0]
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	4a3f      	ldr	r2, [pc, #252]	; (8005db0 <USB_EPStartXfer+0x11e0>)
 8005cb2:	4013      	ands	r3, r2
 8005cb4:	b29a      	uxth	r2, r3
 8005cb6:	187b      	adds	r3, r7, r1
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	801a      	strh	r2, [r3, #0]
 8005cbc:	187b      	adds	r3, r7, r1
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	881b      	ldrh	r3, [r3, #0]
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	4a3b      	ldr	r2, [pc, #236]	; (8005db4 <USB_EPStartXfer+0x11e4>)
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	b29a      	uxth	r2, r3
 8005cca:	187b      	adds	r3, r7, r1
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	801a      	strh	r2, [r3, #0]
 8005cd0:	e072      	b.n	8005db8 <USB_EPStartXfer+0x11e8>
 8005cd2:	2286      	movs	r2, #134	; 0x86
 8005cd4:	0052      	lsls	r2, r2, #1
 8005cd6:	18bb      	adds	r3, r7, r2
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	2b3e      	cmp	r3, #62	; 0x3e
 8005cdc:	d81a      	bhi.n	8005d14 <USB_EPStartXfer+0x1144>
 8005cde:	18bb      	adds	r3, r7, r2
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	085b      	lsrs	r3, r3, #1
 8005ce4:	21dc      	movs	r1, #220	; 0xdc
 8005ce6:	1878      	adds	r0, r7, r1
 8005ce8:	6003      	str	r3, [r0, #0]
 8005cea:	18bb      	adds	r3, r7, r2
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	4013      	ands	r3, r2
 8005cf2:	d004      	beq.n	8005cfe <USB_EPStartXfer+0x112e>
 8005cf4:	187b      	adds	r3, r7, r1
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	187a      	adds	r2, r7, r1
 8005cfc:	6013      	str	r3, [r2, #0]
 8005cfe:	23dc      	movs	r3, #220	; 0xdc
 8005d00:	18fb      	adds	r3, r7, r3
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	029b      	lsls	r3, r3, #10
 8005d08:	b29a      	uxth	r2, r3
 8005d0a:	23bc      	movs	r3, #188	; 0xbc
 8005d0c:	18fb      	adds	r3, r7, r3
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	801a      	strh	r2, [r3, #0]
 8005d12:	e051      	b.n	8005db8 <USB_EPStartXfer+0x11e8>
 8005d14:	2286      	movs	r2, #134	; 0x86
 8005d16:	0052      	lsls	r2, r2, #1
 8005d18:	18bb      	adds	r3, r7, r2
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	095b      	lsrs	r3, r3, #5
 8005d1e:	21dc      	movs	r1, #220	; 0xdc
 8005d20:	1878      	adds	r0, r7, r1
 8005d22:	6003      	str	r3, [r0, #0]
 8005d24:	18bb      	adds	r3, r7, r2
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	221f      	movs	r2, #31
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	d104      	bne.n	8005d38 <USB_EPStartXfer+0x1168>
 8005d2e:	187b      	adds	r3, r7, r1
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	3b01      	subs	r3, #1
 8005d34:	187a      	adds	r2, r7, r1
 8005d36:	6013      	str	r3, [r2, #0]
 8005d38:	23dc      	movs	r3, #220	; 0xdc
 8005d3a:	18fb      	adds	r3, r7, r3
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	029b      	lsls	r3, r3, #10
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	4a1b      	ldr	r2, [pc, #108]	; (8005db4 <USB_EPStartXfer+0x11e4>)
 8005d46:	4313      	orrs	r3, r2
 8005d48:	b29a      	uxth	r2, r3
 8005d4a:	23bc      	movs	r3, #188	; 0xbc
 8005d4c:	18fb      	adds	r3, r7, r3
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	801a      	strh	r2, [r3, #0]
 8005d52:	e031      	b.n	8005db8 <USB_EPStartXfer+0x11e8>
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	785b      	ldrb	r3, [r3, #1]
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d12d      	bne.n	8005db8 <USB_EPStartXfer+0x11e8>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2250      	movs	r2, #80	; 0x50
 8005d60:	5a9b      	ldrh	r3, [r3, r2]
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	001a      	movs	r2, r3
 8005d66:	21c8      	movs	r1, #200	; 0xc8
 8005d68:	187b      	adds	r3, r7, r1
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	189b      	adds	r3, r3, r2
 8005d6e:	187a      	adds	r2, r7, r1
 8005d70:	6013      	str	r3, [r2, #0]
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	00da      	lsls	r2, r3, #3
 8005d78:	187b      	adds	r3, r7, r1
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	18d3      	adds	r3, r2, r3
 8005d7e:	4a08      	ldr	r2, [pc, #32]	; (8005da0 <USB_EPStartXfer+0x11d0>)
 8005d80:	4694      	mov	ip, r2
 8005d82:	4463      	add	r3, ip
 8005d84:	21c4      	movs	r1, #196	; 0xc4
 8005d86:	187a      	adds	r2, r7, r1
 8005d88:	6013      	str	r3, [r2, #0]
 8005d8a:	2386      	movs	r3, #134	; 0x86
 8005d8c:	005b      	lsls	r3, r3, #1
 8005d8e:	18fb      	adds	r3, r7, r3
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	b29a      	uxth	r2, r3
 8005d94:	187b      	adds	r3, r7, r1
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	801a      	strh	r2, [r3, #0]
 8005d9a:	e00d      	b.n	8005db8 <USB_EPStartXfer+0x11e8>
      }
      else
      {
        return HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e031      	b.n	8005e04 <USB_EPStartXfer+0x1234>
 8005da0:	00000406 	.word	0x00000406
 8005da4:	ffff8f8f 	.word	0xffff8f8f
 8005da8:	ffff80c0 	.word	0xffff80c0
 8005dac:	00000402 	.word	0x00000402
 8005db0:	ffff83ff 	.word	0xffff83ff
 8005db4:	ffff8000 	.word	0xffff8000
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	18d3      	adds	r3, r2, r3
 8005dc2:	881b      	ldrh	r3, [r3, #0]
 8005dc4:	b29a      	uxth	r2, r3
 8005dc6:	208e      	movs	r0, #142	; 0x8e
 8005dc8:	183b      	adds	r3, r7, r0
 8005dca:	4910      	ldr	r1, [pc, #64]	; (8005e0c <USB_EPStartXfer+0x123c>)
 8005dcc:	400a      	ands	r2, r1
 8005dce:	801a      	strh	r2, [r3, #0]
 8005dd0:	183b      	adds	r3, r7, r0
 8005dd2:	183a      	adds	r2, r7, r0
 8005dd4:	8812      	ldrh	r2, [r2, #0]
 8005dd6:	2180      	movs	r1, #128	; 0x80
 8005dd8:	0149      	lsls	r1, r1, #5
 8005dda:	404a      	eors	r2, r1
 8005ddc:	801a      	strh	r2, [r3, #0]
 8005dde:	183b      	adds	r3, r7, r0
 8005de0:	183a      	adds	r2, r7, r0
 8005de2:	8812      	ldrh	r2, [r2, #0]
 8005de4:	2180      	movs	r1, #128	; 0x80
 8005de6:	0189      	lsls	r1, r1, #6
 8005de8:	404a      	eors	r2, r1
 8005dea:	801a      	strh	r2, [r3, #0]
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	18d3      	adds	r3, r2, r3
 8005df6:	183a      	adds	r2, r7, r0
 8005df8:	8812      	ldrh	r2, [r2, #0]
 8005dfa:	4905      	ldr	r1, [pc, #20]	; (8005e10 <USB_EPStartXfer+0x1240>)
 8005dfc:	430a      	orrs	r2, r1
 8005dfe:	b292      	uxth	r2, r2
 8005e00:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8005e02:	2300      	movs	r3, #0
}
 8005e04:	0018      	movs	r0, r3
 8005e06:	46bd      	mov	sp, r7
 8005e08:	b044      	add	sp, #272	; 0x110
 8005e0a:	bdb0      	pop	{r4, r5, r7, pc}
 8005e0c:	ffffbf8f 	.word	0xffffbf8f
 8005e10:	ffff8080 	.word	0xffff8080

08005e14 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b084      	sub	sp, #16
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	785b      	ldrb	r3, [r3, #1]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d01d      	beq.n	8005e62 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	18d3      	adds	r3, r2, r3
 8005e30:	881b      	ldrh	r3, [r3, #0]
 8005e32:	b29a      	uxth	r2, r3
 8005e34:	200c      	movs	r0, #12
 8005e36:	183b      	adds	r3, r7, r0
 8005e38:	491b      	ldr	r1, [pc, #108]	; (8005ea8 <USB_EPSetStall+0x94>)
 8005e3a:	400a      	ands	r2, r1
 8005e3c:	801a      	strh	r2, [r3, #0]
 8005e3e:	183b      	adds	r3, r7, r0
 8005e40:	183a      	adds	r2, r7, r0
 8005e42:	8812      	ldrh	r2, [r2, #0]
 8005e44:	2110      	movs	r1, #16
 8005e46:	404a      	eors	r2, r1
 8005e48:	801a      	strh	r2, [r3, #0]
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	18d3      	adds	r3, r2, r3
 8005e54:	183a      	adds	r2, r7, r0
 8005e56:	8812      	ldrh	r2, [r2, #0]
 8005e58:	4914      	ldr	r1, [pc, #80]	; (8005eac <USB_EPSetStall+0x98>)
 8005e5a:	430a      	orrs	r2, r1
 8005e5c:	b292      	uxth	r2, r2
 8005e5e:	801a      	strh	r2, [r3, #0]
 8005e60:	e01d      	b.n	8005e9e <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	18d3      	adds	r3, r2, r3
 8005e6c:	881b      	ldrh	r3, [r3, #0]
 8005e6e:	b29a      	uxth	r2, r3
 8005e70:	200e      	movs	r0, #14
 8005e72:	183b      	adds	r3, r7, r0
 8005e74:	490e      	ldr	r1, [pc, #56]	; (8005eb0 <USB_EPSetStall+0x9c>)
 8005e76:	400a      	ands	r2, r1
 8005e78:	801a      	strh	r2, [r3, #0]
 8005e7a:	183b      	adds	r3, r7, r0
 8005e7c:	183a      	adds	r2, r7, r0
 8005e7e:	8812      	ldrh	r2, [r2, #0]
 8005e80:	2180      	movs	r1, #128	; 0x80
 8005e82:	0149      	lsls	r1, r1, #5
 8005e84:	404a      	eors	r2, r1
 8005e86:	801a      	strh	r2, [r3, #0]
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	18d3      	adds	r3, r2, r3
 8005e92:	183a      	adds	r2, r7, r0
 8005e94:	8812      	ldrh	r2, [r2, #0]
 8005e96:	4905      	ldr	r1, [pc, #20]	; (8005eac <USB_EPSetStall+0x98>)
 8005e98:	430a      	orrs	r2, r1
 8005e9a:	b292      	uxth	r2, r2
 8005e9c:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8005e9e:	2300      	movs	r3, #0
}
 8005ea0:	0018      	movs	r0, r3
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	b004      	add	sp, #16
 8005ea6:	bd80      	pop	{r7, pc}
 8005ea8:	ffff8fbf 	.word	0xffff8fbf
 8005eac:	ffff8080 	.word	0xffff8080
 8005eb0:	ffffbf8f 	.word	0xffffbf8f

08005eb4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b086      	sub	sp, #24
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	7b1b      	ldrb	r3, [r3, #12]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d000      	beq.n	8005ec8 <USB_EPClearStall+0x14>
 8005ec6:	e095      	b.n	8005ff4 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	785b      	ldrb	r3, [r3, #1]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d046      	beq.n	8005f5e <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	009b      	lsls	r3, r3, #2
 8005ed8:	18d2      	adds	r2, r2, r3
 8005eda:	2110      	movs	r1, #16
 8005edc:	187b      	adds	r3, r7, r1
 8005ede:	8812      	ldrh	r2, [r2, #0]
 8005ee0:	801a      	strh	r2, [r3, #0]
 8005ee2:	187b      	adds	r3, r7, r1
 8005ee4:	881b      	ldrh	r3, [r3, #0]
 8005ee6:	2240      	movs	r2, #64	; 0x40
 8005ee8:	4013      	ands	r3, r2
 8005eea:	d016      	beq.n	8005f1a <USB_EPClearStall+0x66>
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	18d3      	adds	r3, r2, r3
 8005ef6:	881b      	ldrh	r3, [r3, #0]
 8005ef8:	b29a      	uxth	r2, r3
 8005efa:	200e      	movs	r0, #14
 8005efc:	183b      	adds	r3, r7, r0
 8005efe:	4940      	ldr	r1, [pc, #256]	; (8006000 <USB_EPClearStall+0x14c>)
 8005f00:	400a      	ands	r2, r1
 8005f02:	801a      	strh	r2, [r3, #0]
 8005f04:	687a      	ldr	r2, [r7, #4]
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	18d3      	adds	r3, r2, r3
 8005f0e:	183a      	adds	r2, r7, r0
 8005f10:	8812      	ldrh	r2, [r2, #0]
 8005f12:	493c      	ldr	r1, [pc, #240]	; (8006004 <USB_EPClearStall+0x150>)
 8005f14:	430a      	orrs	r2, r1
 8005f16:	b292      	uxth	r2, r2
 8005f18:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	78db      	ldrb	r3, [r3, #3]
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d068      	beq.n	8005ff4 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	18d3      	adds	r3, r2, r3
 8005f2c:	881b      	ldrh	r3, [r3, #0]
 8005f2e:	b29a      	uxth	r2, r3
 8005f30:	200c      	movs	r0, #12
 8005f32:	183b      	adds	r3, r7, r0
 8005f34:	4934      	ldr	r1, [pc, #208]	; (8006008 <USB_EPClearStall+0x154>)
 8005f36:	400a      	ands	r2, r1
 8005f38:	801a      	strh	r2, [r3, #0]
 8005f3a:	183b      	adds	r3, r7, r0
 8005f3c:	183a      	adds	r2, r7, r0
 8005f3e:	8812      	ldrh	r2, [r2, #0]
 8005f40:	2120      	movs	r1, #32
 8005f42:	404a      	eors	r2, r1
 8005f44:	801a      	strh	r2, [r3, #0]
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	18d3      	adds	r3, r2, r3
 8005f50:	183a      	adds	r2, r7, r0
 8005f52:	8812      	ldrh	r2, [r2, #0]
 8005f54:	492d      	ldr	r1, [pc, #180]	; (800600c <USB_EPClearStall+0x158>)
 8005f56:	430a      	orrs	r2, r1
 8005f58:	b292      	uxth	r2, r2
 8005f5a:	801a      	strh	r2, [r3, #0]
 8005f5c:	e04a      	b.n	8005ff4 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	18d2      	adds	r2, r2, r3
 8005f68:	2116      	movs	r1, #22
 8005f6a:	187b      	adds	r3, r7, r1
 8005f6c:	8812      	ldrh	r2, [r2, #0]
 8005f6e:	801a      	strh	r2, [r3, #0]
 8005f70:	187b      	adds	r3, r7, r1
 8005f72:	881a      	ldrh	r2, [r3, #0]
 8005f74:	2380      	movs	r3, #128	; 0x80
 8005f76:	01db      	lsls	r3, r3, #7
 8005f78:	4013      	ands	r3, r2
 8005f7a:	d016      	beq.n	8005faa <USB_EPClearStall+0xf6>
 8005f7c:	687a      	ldr	r2, [r7, #4]
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	781b      	ldrb	r3, [r3, #0]
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	18d3      	adds	r3, r2, r3
 8005f86:	881b      	ldrh	r3, [r3, #0]
 8005f88:	b29a      	uxth	r2, r3
 8005f8a:	2014      	movs	r0, #20
 8005f8c:	183b      	adds	r3, r7, r0
 8005f8e:	491c      	ldr	r1, [pc, #112]	; (8006000 <USB_EPClearStall+0x14c>)
 8005f90:	400a      	ands	r2, r1
 8005f92:	801a      	strh	r2, [r3, #0]
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	781b      	ldrb	r3, [r3, #0]
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	18d3      	adds	r3, r2, r3
 8005f9e:	183a      	adds	r2, r7, r0
 8005fa0:	8812      	ldrh	r2, [r2, #0]
 8005fa2:	491b      	ldr	r1, [pc, #108]	; (8006010 <USB_EPClearStall+0x15c>)
 8005fa4:	430a      	orrs	r2, r1
 8005fa6:	b292      	uxth	r2, r2
 8005fa8:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	18d3      	adds	r3, r2, r3
 8005fb4:	881b      	ldrh	r3, [r3, #0]
 8005fb6:	b29a      	uxth	r2, r3
 8005fb8:	2012      	movs	r0, #18
 8005fba:	183b      	adds	r3, r7, r0
 8005fbc:	4915      	ldr	r1, [pc, #84]	; (8006014 <USB_EPClearStall+0x160>)
 8005fbe:	400a      	ands	r2, r1
 8005fc0:	801a      	strh	r2, [r3, #0]
 8005fc2:	183b      	adds	r3, r7, r0
 8005fc4:	183a      	adds	r2, r7, r0
 8005fc6:	8812      	ldrh	r2, [r2, #0]
 8005fc8:	2180      	movs	r1, #128	; 0x80
 8005fca:	0149      	lsls	r1, r1, #5
 8005fcc:	404a      	eors	r2, r1
 8005fce:	801a      	strh	r2, [r3, #0]
 8005fd0:	183b      	adds	r3, r7, r0
 8005fd2:	183a      	adds	r2, r7, r0
 8005fd4:	8812      	ldrh	r2, [r2, #0]
 8005fd6:	2180      	movs	r1, #128	; 0x80
 8005fd8:	0189      	lsls	r1, r1, #6
 8005fda:	404a      	eors	r2, r1
 8005fdc:	801a      	strh	r2, [r3, #0]
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	18d3      	adds	r3, r2, r3
 8005fe8:	183a      	adds	r2, r7, r0
 8005fea:	8812      	ldrh	r2, [r2, #0]
 8005fec:	4907      	ldr	r1, [pc, #28]	; (800600c <USB_EPClearStall+0x158>)
 8005fee:	430a      	orrs	r2, r1
 8005ff0:	b292      	uxth	r2, r2
 8005ff2:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8005ff4:	2300      	movs	r3, #0
}
 8005ff6:	0018      	movs	r0, r3
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	b006      	add	sp, #24
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	46c0      	nop			; (mov r8, r8)
 8006000:	ffff8f8f 	.word	0xffff8f8f
 8006004:	ffff80c0 	.word	0xffff80c0
 8006008:	ffff8fbf 	.word	0xffff8fbf
 800600c:	ffff8080 	.word	0xffff8080
 8006010:	ffffc080 	.word	0xffffc080
 8006014:	ffffbf8f 	.word	0xffffbf8f

08006018 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b082      	sub	sp, #8
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	000a      	movs	r2, r1
 8006022:	1cfb      	adds	r3, r7, #3
 8006024:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 8006026:	1cfb      	adds	r3, r7, #3
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d103      	bne.n	8006036 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	224c      	movs	r2, #76	; 0x4c
 8006032:	2180      	movs	r1, #128	; 0x80
 8006034:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 8006036:	2300      	movs	r3, #0
}
 8006038:	0018      	movs	r0, r3
 800603a:	46bd      	mov	sp, r7
 800603c:	b002      	add	sp, #8
 800603e:	bd80      	pop	{r7, pc}

08006040 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b084      	sub	sp, #16
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2244      	movs	r2, #68	; 0x44
 800604c:	5a9b      	ldrh	r3, [r3, r2]
 800604e:	b29b      	uxth	r3, r3
 8006050:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006052:	68fb      	ldr	r3, [r7, #12]
}
 8006054:	0018      	movs	r0, r3
 8006056:	46bd      	mov	sp, r7
 8006058:	b004      	add	sp, #16
 800605a:	bd80      	pop	{r7, pc}

0800605c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b08c      	sub	sp, #48	; 0x30
 8006060:	af00      	add	r7, sp, #0
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	60b9      	str	r1, [r7, #8]
 8006066:	0019      	movs	r1, r3
 8006068:	1dbb      	adds	r3, r7, #6
 800606a:	801a      	strh	r2, [r3, #0]
 800606c:	1d3b      	adds	r3, r7, #4
 800606e:	1c0a      	adds	r2, r1, #0
 8006070:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006072:	1d3b      	adds	r3, r7, #4
 8006074:	881b      	ldrh	r3, [r3, #0]
 8006076:	3301      	adds	r3, #1
 8006078:	085b      	lsrs	r3, r3, #1
 800607a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006084:	1dbb      	adds	r3, r7, #6
 8006086:	881a      	ldrh	r2, [r3, #0]
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	18d3      	adds	r3, r2, r3
 800608c:	2280      	movs	r2, #128	; 0x80
 800608e:	00d2      	lsls	r2, r2, #3
 8006090:	4694      	mov	ip, r2
 8006092:	4463      	add	r3, ip
 8006094:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006096:	6a3b      	ldr	r3, [r7, #32]
 8006098:	62fb      	str	r3, [r7, #44]	; 0x2c
 800609a:	e01b      	b.n	80060d4 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800609c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80060a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a4:	3301      	adds	r3, #1
 80060a6:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80060a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	021b      	lsls	r3, r3, #8
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	001a      	movs	r2, r3
 80060b4:	69bb      	ldr	r3, [r7, #24]
 80060b6:	4313      	orrs	r3, r2
 80060b8:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	b29a      	uxth	r2, r3
 80060be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80060c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c4:	3302      	adds	r3, #2
 80060c6:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 80060c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ca:	3301      	adds	r3, #1
 80060cc:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80060ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d0:	3b01      	subs	r3, #1
 80060d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d1e0      	bne.n	800609c <USB_WritePMA+0x40>
  }
}
 80060da:	46c0      	nop			; (mov r8, r8)
 80060dc:	46c0      	nop			; (mov r8, r8)
 80060de:	46bd      	mov	sp, r7
 80060e0:	b00c      	add	sp, #48	; 0x30
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b08a      	sub	sp, #40	; 0x28
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	60f8      	str	r0, [r7, #12]
 80060ec:	60b9      	str	r1, [r7, #8]
 80060ee:	0019      	movs	r1, r3
 80060f0:	1dbb      	adds	r3, r7, #6
 80060f2:	801a      	strh	r2, [r3, #0]
 80060f4:	1d3b      	adds	r3, r7, #4
 80060f6:	1c0a      	adds	r2, r1, #0
 80060f8:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80060fa:	1d3b      	adds	r3, r7, #4
 80060fc:	881b      	ldrh	r3, [r3, #0]
 80060fe:	085b      	lsrs	r3, r3, #1
 8006100:	b29b      	uxth	r3, r3
 8006102:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800610c:	1dbb      	adds	r3, r7, #6
 800610e:	881a      	ldrh	r2, [r3, #0]
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	18d3      	adds	r3, r2, r3
 8006114:	2280      	movs	r2, #128	; 0x80
 8006116:	00d2      	lsls	r2, r2, #3
 8006118:	4694      	mov	ip, r2
 800611a:	4463      	add	r3, ip
 800611c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800611e:	69bb      	ldr	r3, [r7, #24]
 8006120:	627b      	str	r3, [r7, #36]	; 0x24
 8006122:	e018      	b.n	8006156 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006124:	6a3b      	ldr	r3, [r7, #32]
 8006126:	881b      	ldrh	r3, [r3, #0]
 8006128:	b29b      	uxth	r3, r3
 800612a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800612c:	6a3b      	ldr	r3, [r7, #32]
 800612e:	3302      	adds	r3, #2
 8006130:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	b2da      	uxtb	r2, r3
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	3301      	adds	r3, #1
 800613e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	0a1b      	lsrs	r3, r3, #8
 8006144:	b2da      	uxtb	r2, r3
 8006146:	69fb      	ldr	r3, [r7, #28]
 8006148:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800614a:	69fb      	ldr	r3, [r7, #28]
 800614c:	3301      	adds	r3, #1
 800614e:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8006150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006152:	3b01      	subs	r3, #1
 8006154:	627b      	str	r3, [r7, #36]	; 0x24
 8006156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006158:	2b00      	cmp	r3, #0
 800615a:	d1e3      	bne.n	8006124 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800615c:	1d3b      	adds	r3, r7, #4
 800615e:	881b      	ldrh	r3, [r3, #0]
 8006160:	2201      	movs	r2, #1
 8006162:	4013      	ands	r3, r2
 8006164:	b29b      	uxth	r3, r3
 8006166:	2b00      	cmp	r3, #0
 8006168:	d007      	beq.n	800617a <USB_ReadPMA+0x96>
  {
    temp = *pdwVal;
 800616a:	6a3b      	ldr	r3, [r7, #32]
 800616c:	881b      	ldrh	r3, [r3, #0]
 800616e:	b29b      	uxth	r3, r3
 8006170:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	b2da      	uxtb	r2, r3
 8006176:	69fb      	ldr	r3, [r7, #28]
 8006178:	701a      	strb	r2, [r3, #0]
  }
}
 800617a:	46c0      	nop			; (mov r8, r8)
 800617c:	46bd      	mov	sp, r7
 800617e:	b00a      	add	sp, #40	; 0x28
 8006180:	bd80      	pop	{r7, pc}

08006182 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006182:	b580      	push	{r7, lr}
 8006184:	b082      	sub	sp, #8
 8006186:	af00      	add	r7, sp, #0
 8006188:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800618a:	2300      	movs	r3, #0
}
 800618c:	0018      	movs	r0, r3
 800618e:	46bd      	mov	sp, r7
 8006190:	b002      	add	sp, #8
 8006192:	bd80      	pop	{r7, pc}

08006194 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006194:	b590      	push	{r4, r7, lr}
 8006196:	b085      	sub	sp, #20
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	000a      	movs	r2, r1
 800619e:	1cfb      	adds	r3, r7, #3
 80061a0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80061a2:	240f      	movs	r4, #15
 80061a4:	193b      	adds	r3, r7, r4
 80061a6:	2202      	movs	r2, #2
 80061a8:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	23ad      	movs	r3, #173	; 0xad
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	58d3      	ldr	r3, [r2, r3]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d00e      	beq.n	80061d4 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	23ad      	movs	r3, #173	; 0xad
 80061ba:	009b      	lsls	r3, r3, #2
 80061bc:	58d3      	ldr	r3, [r2, r3]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	1cfa      	adds	r2, r7, #3
 80061c2:	7811      	ldrb	r1, [r2, #0]
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	0010      	movs	r0, r2
 80061c8:	4798      	blx	r3
 80061ca:	1e03      	subs	r3, r0, #0
 80061cc:	d102      	bne.n	80061d4 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 80061ce:	193b      	adds	r3, r7, r4
 80061d0:	2200      	movs	r2, #0
 80061d2:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 80061d4:	230f      	movs	r3, #15
 80061d6:	18fb      	adds	r3, r7, r3
 80061d8:	781b      	ldrb	r3, [r3, #0]
}
 80061da:	0018      	movs	r0, r3
 80061dc:	46bd      	mov	sp, r7
 80061de:	b005      	add	sp, #20
 80061e0:	bd90      	pop	{r4, r7, pc}

080061e2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80061e2:	b580      	push	{r7, lr}
 80061e4:	b082      	sub	sp, #8
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	6078      	str	r0, [r7, #4]
 80061ea:	000a      	movs	r2, r1
 80061ec:	1cfb      	adds	r3, r7, #3
 80061ee:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	23ad      	movs	r3, #173	; 0xad
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	58d3      	ldr	r3, [r2, r3]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	1cfa      	adds	r2, r7, #3
 80061fc:	7811      	ldrb	r1, [r2, #0]
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	0010      	movs	r0, r2
 8006202:	4798      	blx	r3

  return USBD_OK;
 8006204:	2300      	movs	r3, #0
}
 8006206:	0018      	movs	r0, r3
 8006208:	46bd      	mov	sp, r7
 800620a:	b002      	add	sp, #8
 800620c:	bd80      	pop	{r7, pc}
	...

08006210 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b082      	sub	sp, #8
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	22aa      	movs	r2, #170	; 0xaa
 800621e:	0092      	lsls	r2, r2, #2
 8006220:	4694      	mov	ip, r2
 8006222:	4463      	add	r3, ip
 8006224:	683a      	ldr	r2, [r7, #0]
 8006226:	0011      	movs	r1, r2
 8006228:	0018      	movs	r0, r3
 800622a:	f001 f810 	bl	800724e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	23a5      	movs	r3, #165	; 0xa5
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	2101      	movs	r1, #1
 8006236:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4a23      	ldr	r2, [pc, #140]	; (80062c8 <USBD_LL_SetupStage+0xb8>)
 800623c:	5a9b      	ldrh	r3, [r3, r2]
 800623e:	0019      	movs	r1, r3
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	23a6      	movs	r3, #166	; 0xa6
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	23aa      	movs	r3, #170	; 0xaa
 800624c:	009b      	lsls	r3, r3, #2
 800624e:	5cd3      	ldrb	r3, [r2, r3]
 8006250:	001a      	movs	r2, r3
 8006252:	231f      	movs	r3, #31
 8006254:	4013      	ands	r3, r2
 8006256:	2b02      	cmp	r3, #2
 8006258:	d019      	beq.n	800628e <USBD_LL_SetupStage+0x7e>
 800625a:	d822      	bhi.n	80062a2 <USBD_LL_SetupStage+0x92>
 800625c:	2b00      	cmp	r3, #0
 800625e:	d002      	beq.n	8006266 <USBD_LL_SetupStage+0x56>
 8006260:	2b01      	cmp	r3, #1
 8006262:	d00a      	beq.n	800627a <USBD_LL_SetupStage+0x6a>
 8006264:	e01d      	b.n	80062a2 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	22aa      	movs	r2, #170	; 0xaa
 800626a:	0092      	lsls	r2, r2, #2
 800626c:	189a      	adds	r2, r3, r2
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	0011      	movs	r1, r2
 8006272:	0018      	movs	r0, r3
 8006274:	f000 fa10 	bl	8006698 <USBD_StdDevReq>
      break;
 8006278:	e020      	b.n	80062bc <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	22aa      	movs	r2, #170	; 0xaa
 800627e:	0092      	lsls	r2, r2, #2
 8006280:	189a      	adds	r2, r3, r2
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	0011      	movs	r1, r2
 8006286:	0018      	movs	r0, r3
 8006288:	f000 fa78 	bl	800677c <USBD_StdItfReq>
      break;
 800628c:	e016      	b.n	80062bc <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	22aa      	movs	r2, #170	; 0xaa
 8006292:	0092      	lsls	r2, r2, #2
 8006294:	189a      	adds	r2, r3, r2
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	0011      	movs	r1, r2
 800629a:	0018      	movs	r0, r3
 800629c:	f000 fac5 	bl	800682a <USBD_StdEPReq>
      break;
 80062a0:	e00c      	b.n	80062bc <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80062a2:	687a      	ldr	r2, [r7, #4]
 80062a4:	23aa      	movs	r3, #170	; 0xaa
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	5cd3      	ldrb	r3, [r2, r3]
 80062aa:	227f      	movs	r2, #127	; 0x7f
 80062ac:	4393      	bics	r3, r2
 80062ae:	b2da      	uxtb	r2, r3
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	0011      	movs	r1, r2
 80062b4:	0018      	movs	r0, r3
 80062b6:	f001 f97e 	bl	80075b6 <USBD_LL_StallEP>
      break;
 80062ba:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 80062bc:	2300      	movs	r3, #0
}
 80062be:	0018      	movs	r0, r3
 80062c0:	46bd      	mov	sp, r7
 80062c2:	b002      	add	sp, #8
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	46c0      	nop			; (mov r8, r8)
 80062c8:	000002ae 	.word	0x000002ae

080062cc <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b086      	sub	sp, #24
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	607a      	str	r2, [r7, #4]
 80062d6:	200b      	movs	r0, #11
 80062d8:	183b      	adds	r3, r7, r0
 80062da:	1c0a      	adds	r2, r1, #0
 80062dc:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80062de:	183b      	adds	r3, r7, r0
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d154      	bne.n	8006390 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	3355      	adds	r3, #85	; 0x55
 80062ea:	33ff      	adds	r3, #255	; 0xff
 80062ec:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80062ee:	68fa      	ldr	r2, [r7, #12]
 80062f0:	23a5      	movs	r3, #165	; 0xa5
 80062f2:	009b      	lsls	r3, r3, #2
 80062f4:	58d3      	ldr	r3, [r2, r3]
 80062f6:	2b03      	cmp	r3, #3
 80062f8:	d139      	bne.n	800636e <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	68da      	ldr	r2, [r3, #12]
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	429a      	cmp	r2, r3
 8006304:	d919      	bls.n	800633a <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	68da      	ldr	r2, [r3, #12]
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	1ad2      	subs	r2, r2, r3
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	68da      	ldr	r2, [r3, #12]
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800631c:	429a      	cmp	r2, r3
 800631e:	d203      	bcs.n	8006328 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006324:	b29b      	uxth	r3, r3
 8006326:	e002      	b.n	800632e <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800632c:	b29b      	uxth	r3, r3
 800632e:	6879      	ldr	r1, [r7, #4]
 8006330:	68f8      	ldr	r0, [r7, #12]
 8006332:	001a      	movs	r2, r3
 8006334:	f001 f80c 	bl	8007350 <USBD_CtlContinueRx>
 8006338:	e045      	b.n	80063c6 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800633a:	68fa      	ldr	r2, [r7, #12]
 800633c:	23ad      	movs	r3, #173	; 0xad
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	58d3      	ldr	r3, [r2, r3]
 8006342:	691b      	ldr	r3, [r3, #16]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d00d      	beq.n	8006364 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006348:	68fa      	ldr	r2, [r7, #12]
 800634a:	23a7      	movs	r3, #167	; 0xa7
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006350:	2b03      	cmp	r3, #3
 8006352:	d107      	bne.n	8006364 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006354:	68fa      	ldr	r2, [r7, #12]
 8006356:	23ad      	movs	r3, #173	; 0xad
 8006358:	009b      	lsls	r3, r3, #2
 800635a:	58d3      	ldr	r3, [r2, r3]
 800635c:	691b      	ldr	r3, [r3, #16]
 800635e:	68fa      	ldr	r2, [r7, #12]
 8006360:	0010      	movs	r0, r2
 8006362:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	0018      	movs	r0, r3
 8006368:	f001 f805 	bl	8007376 <USBD_CtlSendStatus>
 800636c:	e02b      	b.n	80063c6 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800636e:	68fa      	ldr	r2, [r7, #12]
 8006370:	23a5      	movs	r3, #165	; 0xa5
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	58d3      	ldr	r3, [r2, r3]
 8006376:	2b05      	cmp	r3, #5
 8006378:	d125      	bne.n	80063c6 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800637a:	68fa      	ldr	r2, [r7, #12]
 800637c:	23a5      	movs	r3, #165	; 0xa5
 800637e:	009b      	lsls	r3, r3, #2
 8006380:	2100      	movs	r1, #0
 8006382:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2100      	movs	r1, #0
 8006388:	0018      	movs	r0, r3
 800638a:	f001 f914 	bl	80075b6 <USBD_LL_StallEP>
 800638e:	e01a      	b.n	80063c6 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006390:	68fa      	ldr	r2, [r7, #12]
 8006392:	23ad      	movs	r3, #173	; 0xad
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	58d3      	ldr	r3, [r2, r3]
 8006398:	699b      	ldr	r3, [r3, #24]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d011      	beq.n	80063c2 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800639e:	68fa      	ldr	r2, [r7, #12]
 80063a0:	23a7      	movs	r3, #167	; 0xa7
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 80063a6:	2b03      	cmp	r3, #3
 80063a8:	d10b      	bne.n	80063c2 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80063aa:	68fa      	ldr	r2, [r7, #12]
 80063ac:	23ad      	movs	r3, #173	; 0xad
 80063ae:	009b      	lsls	r3, r3, #2
 80063b0:	58d3      	ldr	r3, [r2, r3]
 80063b2:	699b      	ldr	r3, [r3, #24]
 80063b4:	220b      	movs	r2, #11
 80063b6:	18ba      	adds	r2, r7, r2
 80063b8:	7811      	ldrb	r1, [r2, #0]
 80063ba:	68fa      	ldr	r2, [r7, #12]
 80063bc:	0010      	movs	r0, r2
 80063be:	4798      	blx	r3
 80063c0:	e001      	b.n	80063c6 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80063c2:	2302      	movs	r3, #2
 80063c4:	e000      	b.n	80063c8 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 80063c6:	2300      	movs	r3, #0
}
 80063c8:	0018      	movs	r0, r3
 80063ca:	46bd      	mov	sp, r7
 80063cc:	b006      	add	sp, #24
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b086      	sub	sp, #24
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	607a      	str	r2, [r7, #4]
 80063da:	200b      	movs	r0, #11
 80063dc:	183b      	adds	r3, r7, r0
 80063de:	1c0a      	adds	r2, r1, #0
 80063e0:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80063e2:	183b      	adds	r3, r7, r0
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d000      	beq.n	80063ec <USBD_LL_DataInStage+0x1c>
 80063ea:	e08e      	b.n	800650a <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	3314      	adds	r3, #20
 80063f0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80063f2:	68fa      	ldr	r2, [r7, #12]
 80063f4:	23a5      	movs	r3, #165	; 0xa5
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	58d3      	ldr	r3, [r2, r3]
 80063fa:	2b02      	cmp	r3, #2
 80063fc:	d164      	bne.n	80064c8 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	68da      	ldr	r2, [r3, #12]
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	429a      	cmp	r2, r3
 8006408:	d915      	bls.n	8006436 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	68da      	ldr	r2, [r3, #12]
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	1ad2      	subs	r2, r2, r3
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	b29a      	uxth	r2, r3
 800641e:	6879      	ldr	r1, [r7, #4]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	0018      	movs	r0, r3
 8006424:	f000 ff81 	bl	800732a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006428:	68f8      	ldr	r0, [r7, #12]
 800642a:	2300      	movs	r3, #0
 800642c:	2200      	movs	r2, #0
 800642e:	2100      	movs	r1, #0
 8006430:	f001 f9aa 	bl	8007788 <USBD_LL_PrepareReceive>
 8006434:	e059      	b.n	80064ea <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	689a      	ldr	r2, [r3, #8]
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	691b      	ldr	r3, [r3, #16]
 800643e:	0019      	movs	r1, r3
 8006440:	0010      	movs	r0, r2
 8006442:	f7f9 feef 	bl	8000224 <__aeabi_uidivmod>
 8006446:	1e0b      	subs	r3, r1, #0
 8006448:	d11f      	bne.n	800648a <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	689a      	ldr	r2, [r3, #8]
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006452:	429a      	cmp	r2, r3
 8006454:	d319      	bcc.n	800648a <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	689a      	ldr	r2, [r3, #8]
 800645a:	68f9      	ldr	r1, [r7, #12]
 800645c:	23a6      	movs	r3, #166	; 0xa6
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8006462:	429a      	cmp	r2, r3
 8006464:	d211      	bcs.n	800648a <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2200      	movs	r2, #0
 800646a:	2100      	movs	r1, #0
 800646c:	0018      	movs	r0, r3
 800646e:	f000 ff5c 	bl	800732a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006472:	68fa      	ldr	r2, [r7, #12]
 8006474:	23a6      	movs	r3, #166	; 0xa6
 8006476:	009b      	lsls	r3, r3, #2
 8006478:	2100      	movs	r1, #0
 800647a:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800647c:	68f8      	ldr	r0, [r7, #12]
 800647e:	2300      	movs	r3, #0
 8006480:	2200      	movs	r2, #0
 8006482:	2100      	movs	r1, #0
 8006484:	f001 f980 	bl	8007788 <USBD_LL_PrepareReceive>
 8006488:	e02f      	b.n	80064ea <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800648a:	68fa      	ldr	r2, [r7, #12]
 800648c:	23ad      	movs	r3, #173	; 0xad
 800648e:	009b      	lsls	r3, r3, #2
 8006490:	58d3      	ldr	r3, [r2, r3]
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d00d      	beq.n	80064b4 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006498:	68fa      	ldr	r2, [r7, #12]
 800649a:	23a7      	movs	r3, #167	; 0xa7
 800649c:	009b      	lsls	r3, r3, #2
 800649e:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80064a0:	2b03      	cmp	r3, #3
 80064a2:	d107      	bne.n	80064b4 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80064a4:	68fa      	ldr	r2, [r7, #12]
 80064a6:	23ad      	movs	r3, #173	; 0xad
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	58d3      	ldr	r3, [r2, r3]
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	68fa      	ldr	r2, [r7, #12]
 80064b0:	0010      	movs	r0, r2
 80064b2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2180      	movs	r1, #128	; 0x80
 80064b8:	0018      	movs	r0, r3
 80064ba:	f001 f87c 	bl	80075b6 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	0018      	movs	r0, r3
 80064c2:	f000 ff6c 	bl	800739e <USBD_CtlReceiveStatus>
 80064c6:	e010      	b.n	80064ea <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80064c8:	68fa      	ldr	r2, [r7, #12]
 80064ca:	23a5      	movs	r3, #165	; 0xa5
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	58d3      	ldr	r3, [r2, r3]
 80064d0:	2b04      	cmp	r3, #4
 80064d2:	d005      	beq.n	80064e0 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80064d4:	68fa      	ldr	r2, [r7, #12]
 80064d6:	23a5      	movs	r3, #165	; 0xa5
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d104      	bne.n	80064ea <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2180      	movs	r1, #128	; 0x80
 80064e4:	0018      	movs	r0, r3
 80064e6:	f001 f866 	bl	80075b6 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80064ea:	68fa      	ldr	r2, [r7, #12]
 80064ec:	23a8      	movs	r3, #168	; 0xa8
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	5cd3      	ldrb	r3, [r2, r3]
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d124      	bne.n	8006540 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	0018      	movs	r0, r3
 80064fa:	f7ff fe42 	bl	8006182 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80064fe:	68fa      	ldr	r2, [r7, #12]
 8006500:	23a8      	movs	r3, #168	; 0xa8
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	2100      	movs	r1, #0
 8006506:	54d1      	strb	r1, [r2, r3]
 8006508:	e01a      	b.n	8006540 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800650a:	68fa      	ldr	r2, [r7, #12]
 800650c:	23ad      	movs	r3, #173	; 0xad
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	58d3      	ldr	r3, [r2, r3]
 8006512:	695b      	ldr	r3, [r3, #20]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d011      	beq.n	800653c <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006518:	68fa      	ldr	r2, [r7, #12]
 800651a:	23a7      	movs	r3, #167	; 0xa7
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 8006520:	2b03      	cmp	r3, #3
 8006522:	d10b      	bne.n	800653c <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006524:	68fa      	ldr	r2, [r7, #12]
 8006526:	23ad      	movs	r3, #173	; 0xad
 8006528:	009b      	lsls	r3, r3, #2
 800652a:	58d3      	ldr	r3, [r2, r3]
 800652c:	695b      	ldr	r3, [r3, #20]
 800652e:	220b      	movs	r2, #11
 8006530:	18ba      	adds	r2, r7, r2
 8006532:	7811      	ldrb	r1, [r2, #0]
 8006534:	68fa      	ldr	r2, [r7, #12]
 8006536:	0010      	movs	r0, r2
 8006538:	4798      	blx	r3
 800653a:	e001      	b.n	8006540 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800653c:	2302      	movs	r3, #2
 800653e:	e000      	b.n	8006542 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8006540:	2300      	movs	r3, #0
}
 8006542:	0018      	movs	r0, r3
 8006544:	46bd      	mov	sp, r7
 8006546:	b006      	add	sp, #24
 8006548:	bd80      	pop	{r7, pc}

0800654a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800654a:	b580      	push	{r7, lr}
 800654c:	b082      	sub	sp, #8
 800654e:	af00      	add	r7, sp, #0
 8006550:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	2340      	movs	r3, #64	; 0x40
 8006556:	2200      	movs	r2, #0
 8006558:	2100      	movs	r1, #0
 800655a:	f000 fff5 	bl	8007548 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	23ac      	movs	r3, #172	; 0xac
 8006562:	005b      	lsls	r3, r3, #1
 8006564:	2101      	movs	r1, #1
 8006566:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	23b2      	movs	r3, #178	; 0xb2
 800656c:	005b      	lsls	r3, r3, #1
 800656e:	2140      	movs	r1, #64	; 0x40
 8006570:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	2340      	movs	r3, #64	; 0x40
 8006576:	2200      	movs	r2, #0
 8006578:	2180      	movs	r1, #128	; 0x80
 800657a:	f000 ffe5 	bl	8007548 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2201      	movs	r2, #1
 8006582:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2240      	movs	r2, #64	; 0x40
 8006588:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	23a7      	movs	r3, #167	; 0xa7
 800658e:	009b      	lsls	r3, r3, #2
 8006590:	2101      	movs	r1, #1
 8006592:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	23a5      	movs	r3, #165	; 0xa5
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	2100      	movs	r1, #0
 800659c:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2200      	movs	r2, #0
 80065a2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	23a9      	movs	r3, #169	; 0xa9
 80065a8:	009b      	lsls	r3, r3, #2
 80065aa:	2100      	movs	r1, #0
 80065ac:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	23ae      	movs	r3, #174	; 0xae
 80065b2:	009b      	lsls	r3, r3, #2
 80065b4:	58d3      	ldr	r3, [r2, r3]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d00a      	beq.n	80065d0 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	23ad      	movs	r3, #173	; 0xad
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	58d3      	ldr	r3, [r2, r3]
 80065c2:	685a      	ldr	r2, [r3, #4]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	b2d9      	uxtb	r1, r3
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	0018      	movs	r0, r3
 80065ce:	4790      	blx	r2
  }

  return USBD_OK;
 80065d0:	2300      	movs	r3, #0
}
 80065d2:	0018      	movs	r0, r3
 80065d4:	46bd      	mov	sp, r7
 80065d6:	b002      	add	sp, #8
 80065d8:	bd80      	pop	{r7, pc}

080065da <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80065da:	b580      	push	{r7, lr}
 80065dc:	b082      	sub	sp, #8
 80065de:	af00      	add	r7, sp, #0
 80065e0:	6078      	str	r0, [r7, #4]
 80065e2:	000a      	movs	r2, r1
 80065e4:	1cfb      	adds	r3, r7, #3
 80065e6:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	1cfa      	adds	r2, r7, #3
 80065ec:	7812      	ldrb	r2, [r2, #0]
 80065ee:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80065f0:	2300      	movs	r3, #0
}
 80065f2:	0018      	movs	r0, r3
 80065f4:	46bd      	mov	sp, r7
 80065f6:	b002      	add	sp, #8
 80065f8:	bd80      	pop	{r7, pc}
	...

080065fc <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b082      	sub	sp, #8
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	23a7      	movs	r3, #167	; 0xa7
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	5cd1      	ldrb	r1, [r2, r3]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	4a06      	ldr	r2, [pc, #24]	; (8006628 <USBD_LL_Suspend+0x2c>)
 8006610:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	23a7      	movs	r3, #167	; 0xa7
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	2104      	movs	r1, #4
 800661a:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 800661c:	2300      	movs	r3, #0
}
 800661e:	0018      	movs	r0, r3
 8006620:	46bd      	mov	sp, r7
 8006622:	b002      	add	sp, #8
 8006624:	bd80      	pop	{r7, pc}
 8006626:	46c0      	nop			; (mov r8, r8)
 8006628:	0000029d 	.word	0x0000029d

0800662c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b082      	sub	sp, #8
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	23a7      	movs	r3, #167	; 0xa7
 8006638:	009b      	lsls	r3, r3, #2
 800663a:	5cd3      	ldrb	r3, [r2, r3]
 800663c:	2b04      	cmp	r3, #4
 800663e:	d106      	bne.n	800664e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	4a05      	ldr	r2, [pc, #20]	; (8006658 <USBD_LL_Resume+0x2c>)
 8006644:	5c99      	ldrb	r1, [r3, r2]
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	23a7      	movs	r3, #167	; 0xa7
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 800664e:	2300      	movs	r3, #0
}
 8006650:	0018      	movs	r0, r3
 8006652:	46bd      	mov	sp, r7
 8006654:	b002      	add	sp, #8
 8006656:	bd80      	pop	{r7, pc}
 8006658:	0000029d 	.word	0x0000029d

0800665c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b082      	sub	sp, #8
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	23a7      	movs	r3, #167	; 0xa7
 8006668:	009b      	lsls	r3, r3, #2
 800666a:	5cd3      	ldrb	r3, [r2, r3]
 800666c:	2b03      	cmp	r3, #3
 800666e:	d10e      	bne.n	800668e <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	23ad      	movs	r3, #173	; 0xad
 8006674:	009b      	lsls	r3, r3, #2
 8006676:	58d3      	ldr	r3, [r2, r3]
 8006678:	69db      	ldr	r3, [r3, #28]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d007      	beq.n	800668e <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	23ad      	movs	r3, #173	; 0xad
 8006682:	009b      	lsls	r3, r3, #2
 8006684:	58d3      	ldr	r3, [r2, r3]
 8006686:	69db      	ldr	r3, [r3, #28]
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	0010      	movs	r0, r2
 800668c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800668e:	2300      	movs	r3, #0
}
 8006690:	0018      	movs	r0, r3
 8006692:	46bd      	mov	sp, r7
 8006694:	b002      	add	sp, #8
 8006696:	bd80      	pop	{r7, pc}

08006698 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80066a2:	230f      	movs	r3, #15
 80066a4:	18fb      	adds	r3, r7, r3
 80066a6:	2200      	movs	r2, #0
 80066a8:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	781b      	ldrb	r3, [r3, #0]
 80066ae:	001a      	movs	r2, r3
 80066b0:	2360      	movs	r3, #96	; 0x60
 80066b2:	4013      	ands	r3, r2
 80066b4:	2b40      	cmp	r3, #64	; 0x40
 80066b6:	d004      	beq.n	80066c2 <USBD_StdDevReq+0x2a>
 80066b8:	d84f      	bhi.n	800675a <USBD_StdDevReq+0xc2>
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d00b      	beq.n	80066d6 <USBD_StdDevReq+0x3e>
 80066be:	2b20      	cmp	r3, #32
 80066c0:	d14b      	bne.n	800675a <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	23ad      	movs	r3, #173	; 0xad
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	58d3      	ldr	r3, [r2, r3]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	6839      	ldr	r1, [r7, #0]
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	0010      	movs	r0, r2
 80066d2:	4798      	blx	r3
      break;
 80066d4:	e048      	b.n	8006768 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	785b      	ldrb	r3, [r3, #1]
 80066da:	2b09      	cmp	r3, #9
 80066dc:	d835      	bhi.n	800674a <USBD_StdDevReq+0xb2>
 80066de:	009a      	lsls	r2, r3, #2
 80066e0:	4b25      	ldr	r3, [pc, #148]	; (8006778 <USBD_StdDevReq+0xe0>)
 80066e2:	18d3      	adds	r3, r2, r3
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80066e8:	683a      	ldr	r2, [r7, #0]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	0011      	movs	r1, r2
 80066ee:	0018      	movs	r0, r3
 80066f0:	f000 fa52 	bl	8006b98 <USBD_GetDescriptor>
          break;
 80066f4:	e030      	b.n	8006758 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80066f6:	683a      	ldr	r2, [r7, #0]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	0011      	movs	r1, r2
 80066fc:	0018      	movs	r0, r3
 80066fe:	f000 fbfd 	bl	8006efc <USBD_SetAddress>
          break;
 8006702:	e029      	b.n	8006758 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006704:	683a      	ldr	r2, [r7, #0]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	0011      	movs	r1, r2
 800670a:	0018      	movs	r0, r3
 800670c:	f000 fc4a 	bl	8006fa4 <USBD_SetConfig>
          break;
 8006710:	e022      	b.n	8006758 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006712:	683a      	ldr	r2, [r7, #0]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	0011      	movs	r1, r2
 8006718:	0018      	movs	r0, r3
 800671a:	f000 fce7 	bl	80070ec <USBD_GetConfig>
          break;
 800671e:	e01b      	b.n	8006758 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006720:	683a      	ldr	r2, [r7, #0]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	0011      	movs	r1, r2
 8006726:	0018      	movs	r0, r3
 8006728:	f000 fd1b 	bl	8007162 <USBD_GetStatus>
          break;
 800672c:	e014      	b.n	8006758 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800672e:	683a      	ldr	r2, [r7, #0]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	0011      	movs	r1, r2
 8006734:	0018      	movs	r0, r3
 8006736:	f000 fd4e 	bl	80071d6 <USBD_SetFeature>
          break;
 800673a:	e00d      	b.n	8006758 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800673c:	683a      	ldr	r2, [r7, #0]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	0011      	movs	r1, r2
 8006742:	0018      	movs	r0, r3
 8006744:	f000 fd5d 	bl	8007202 <USBD_ClrFeature>
          break;
 8006748:	e006      	b.n	8006758 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800674a:	683a      	ldr	r2, [r7, #0]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	0011      	movs	r1, r2
 8006750:	0018      	movs	r0, r3
 8006752:	f000 fdb7 	bl	80072c4 <USBD_CtlError>
          break;
 8006756:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8006758:	e006      	b.n	8006768 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800675a:	683a      	ldr	r2, [r7, #0]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	0011      	movs	r1, r2
 8006760:	0018      	movs	r0, r3
 8006762:	f000 fdaf 	bl	80072c4 <USBD_CtlError>
      break;
 8006766:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8006768:	230f      	movs	r3, #15
 800676a:	18fb      	adds	r3, r7, r3
 800676c:	781b      	ldrb	r3, [r3, #0]
}
 800676e:	0018      	movs	r0, r3
 8006770:	46bd      	mov	sp, r7
 8006772:	b004      	add	sp, #16
 8006774:	bd80      	pop	{r7, pc}
 8006776:	46c0      	nop			; (mov r8, r8)
 8006778:	0800792c 	.word	0x0800792c

0800677c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800677c:	b5b0      	push	{r4, r5, r7, lr}
 800677e:	b084      	sub	sp, #16
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006786:	230f      	movs	r3, #15
 8006788:	18fb      	adds	r3, r7, r3
 800678a:	2200      	movs	r2, #0
 800678c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	001a      	movs	r2, r3
 8006794:	2360      	movs	r3, #96	; 0x60
 8006796:	4013      	ands	r3, r2
 8006798:	2b40      	cmp	r3, #64	; 0x40
 800679a:	d004      	beq.n	80067a6 <USBD_StdItfReq+0x2a>
 800679c:	d839      	bhi.n	8006812 <USBD_StdItfReq+0x96>
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d001      	beq.n	80067a6 <USBD_StdItfReq+0x2a>
 80067a2:	2b20      	cmp	r3, #32
 80067a4:	d135      	bne.n	8006812 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	23a7      	movs	r3, #167	; 0xa7
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	5cd3      	ldrb	r3, [r2, r3]
 80067ae:	3b01      	subs	r3, #1
 80067b0:	2b02      	cmp	r3, #2
 80067b2:	d825      	bhi.n	8006800 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	889b      	ldrh	r3, [r3, #4]
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d819      	bhi.n	80067f2 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	23ad      	movs	r3, #173	; 0xad
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	58d3      	ldr	r3, [r2, r3]
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	250f      	movs	r5, #15
 80067ca:	197c      	adds	r4, r7, r5
 80067cc:	6839      	ldr	r1, [r7, #0]
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	0010      	movs	r0, r2
 80067d2:	4798      	blx	r3
 80067d4:	0003      	movs	r3, r0
 80067d6:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	88db      	ldrh	r3, [r3, #6]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d116      	bne.n	800680e <USBD_StdItfReq+0x92>
 80067e0:	197b      	adds	r3, r7, r5
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d112      	bne.n	800680e <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	0018      	movs	r0, r3
 80067ec:	f000 fdc3 	bl	8007376 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80067f0:	e00d      	b.n	800680e <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 80067f2:	683a      	ldr	r2, [r7, #0]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	0011      	movs	r1, r2
 80067f8:	0018      	movs	r0, r3
 80067fa:	f000 fd63 	bl	80072c4 <USBD_CtlError>
          break;
 80067fe:	e006      	b.n	800680e <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 8006800:	683a      	ldr	r2, [r7, #0]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	0011      	movs	r1, r2
 8006806:	0018      	movs	r0, r3
 8006808:	f000 fd5c 	bl	80072c4 <USBD_CtlError>
          break;
 800680c:	e000      	b.n	8006810 <USBD_StdItfReq+0x94>
          break;
 800680e:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8006810:	e006      	b.n	8006820 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 8006812:	683a      	ldr	r2, [r7, #0]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	0011      	movs	r1, r2
 8006818:	0018      	movs	r0, r3
 800681a:	f000 fd53 	bl	80072c4 <USBD_CtlError>
      break;
 800681e:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8006820:	2300      	movs	r3, #0
}
 8006822:	0018      	movs	r0, r3
 8006824:	46bd      	mov	sp, r7
 8006826:	b004      	add	sp, #16
 8006828:	bdb0      	pop	{r4, r5, r7, pc}

0800682a <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800682a:	b5b0      	push	{r4, r5, r7, lr}
 800682c:	b084      	sub	sp, #16
 800682e:	af00      	add	r7, sp, #0
 8006830:	6078      	str	r0, [r7, #4]
 8006832:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006834:	230f      	movs	r3, #15
 8006836:	18fb      	adds	r3, r7, r3
 8006838:	2200      	movs	r2, #0
 800683a:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	889a      	ldrh	r2, [r3, #4]
 8006840:	230e      	movs	r3, #14
 8006842:	18fb      	adds	r3, r7, r3
 8006844:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	001a      	movs	r2, r3
 800684c:	2360      	movs	r3, #96	; 0x60
 800684e:	4013      	ands	r3, r2
 8006850:	2b40      	cmp	r3, #64	; 0x40
 8006852:	d006      	beq.n	8006862 <USBD_StdEPReq+0x38>
 8006854:	d900      	bls.n	8006858 <USBD_StdEPReq+0x2e>
 8006856:	e190      	b.n	8006b7a <USBD_StdEPReq+0x350>
 8006858:	2b00      	cmp	r3, #0
 800685a:	d00c      	beq.n	8006876 <USBD_StdEPReq+0x4c>
 800685c:	2b20      	cmp	r3, #32
 800685e:	d000      	beq.n	8006862 <USBD_StdEPReq+0x38>
 8006860:	e18b      	b.n	8006b7a <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	23ad      	movs	r3, #173	; 0xad
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	58d3      	ldr	r3, [r2, r3]
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	6839      	ldr	r1, [r7, #0]
 800686e:	687a      	ldr	r2, [r7, #4]
 8006870:	0010      	movs	r0, r2
 8006872:	4798      	blx	r3
      break;
 8006874:	e188      	b.n	8006b88 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	001a      	movs	r2, r3
 800687c:	2360      	movs	r3, #96	; 0x60
 800687e:	4013      	ands	r3, r2
 8006880:	2b20      	cmp	r3, #32
 8006882:	d10f      	bne.n	80068a4 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	23ad      	movs	r3, #173	; 0xad
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	58d3      	ldr	r3, [r2, r3]
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	250f      	movs	r5, #15
 8006890:	197c      	adds	r4, r7, r5
 8006892:	6839      	ldr	r1, [r7, #0]
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	0010      	movs	r0, r2
 8006898:	4798      	blx	r3
 800689a:	0003      	movs	r3, r0
 800689c:	7023      	strb	r3, [r4, #0]

        return ret;
 800689e:	197b      	adds	r3, r7, r5
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	e174      	b.n	8006b8e <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	785b      	ldrb	r3, [r3, #1]
 80068a8:	2b03      	cmp	r3, #3
 80068aa:	d007      	beq.n	80068bc <USBD_StdEPReq+0x92>
 80068ac:	dd00      	ble.n	80068b0 <USBD_StdEPReq+0x86>
 80068ae:	e15c      	b.n	8006b6a <USBD_StdEPReq+0x340>
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d100      	bne.n	80068b6 <USBD_StdEPReq+0x8c>
 80068b4:	e092      	b.n	80069dc <USBD_StdEPReq+0x1b2>
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d04b      	beq.n	8006952 <USBD_StdEPReq+0x128>
 80068ba:	e156      	b.n	8006b6a <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	23a7      	movs	r3, #167	; 0xa7
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	5cd3      	ldrb	r3, [r2, r3]
 80068c4:	2b02      	cmp	r3, #2
 80068c6:	d002      	beq.n	80068ce <USBD_StdEPReq+0xa4>
 80068c8:	2b03      	cmp	r3, #3
 80068ca:	d01d      	beq.n	8006908 <USBD_StdEPReq+0xde>
 80068cc:	e039      	b.n	8006942 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80068ce:	220e      	movs	r2, #14
 80068d0:	18bb      	adds	r3, r7, r2
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d010      	beq.n	80068fa <USBD_StdEPReq+0xd0>
 80068d8:	18bb      	adds	r3, r7, r2
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	2b80      	cmp	r3, #128	; 0x80
 80068de:	d00c      	beq.n	80068fa <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80068e0:	18bb      	adds	r3, r7, r2
 80068e2:	781a      	ldrb	r2, [r3, #0]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	0011      	movs	r1, r2
 80068e8:	0018      	movs	r0, r3
 80068ea:	f000 fe64 	bl	80075b6 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2180      	movs	r1, #128	; 0x80
 80068f2:	0018      	movs	r0, r3
 80068f4:	f000 fe5f 	bl	80075b6 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80068f8:	e02a      	b.n	8006950 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 80068fa:	683a      	ldr	r2, [r7, #0]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	0011      	movs	r1, r2
 8006900:	0018      	movs	r0, r3
 8006902:	f000 fcdf 	bl	80072c4 <USBD_CtlError>
              break;
 8006906:	e023      	b.n	8006950 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	885b      	ldrh	r3, [r3, #2]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d113      	bne.n	8006938 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 8006910:	220e      	movs	r2, #14
 8006912:	18bb      	adds	r3, r7, r2
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d00e      	beq.n	8006938 <USBD_StdEPReq+0x10e>
 800691a:	18bb      	adds	r3, r7, r2
 800691c:	781b      	ldrb	r3, [r3, #0]
 800691e:	2b80      	cmp	r3, #128	; 0x80
 8006920:	d00a      	beq.n	8006938 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	88db      	ldrh	r3, [r3, #6]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d106      	bne.n	8006938 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800692a:	18bb      	adds	r3, r7, r2
 800692c:	781a      	ldrb	r2, [r3, #0]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	0011      	movs	r1, r2
 8006932:	0018      	movs	r0, r3
 8006934:	f000 fe3f 	bl	80075b6 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	0018      	movs	r0, r3
 800693c:	f000 fd1b 	bl	8007376 <USBD_CtlSendStatus>

              break;
 8006940:	e006      	b.n	8006950 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 8006942:	683a      	ldr	r2, [r7, #0]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	0011      	movs	r1, r2
 8006948:	0018      	movs	r0, r3
 800694a:	f000 fcbb 	bl	80072c4 <USBD_CtlError>
              break;
 800694e:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8006950:	e112      	b.n	8006b78 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	23a7      	movs	r3, #167	; 0xa7
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	5cd3      	ldrb	r3, [r2, r3]
 800695a:	2b02      	cmp	r3, #2
 800695c:	d002      	beq.n	8006964 <USBD_StdEPReq+0x13a>
 800695e:	2b03      	cmp	r3, #3
 8006960:	d01d      	beq.n	800699e <USBD_StdEPReq+0x174>
 8006962:	e032      	b.n	80069ca <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006964:	220e      	movs	r2, #14
 8006966:	18bb      	adds	r3, r7, r2
 8006968:	781b      	ldrb	r3, [r3, #0]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d010      	beq.n	8006990 <USBD_StdEPReq+0x166>
 800696e:	18bb      	adds	r3, r7, r2
 8006970:	781b      	ldrb	r3, [r3, #0]
 8006972:	2b80      	cmp	r3, #128	; 0x80
 8006974:	d00c      	beq.n	8006990 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006976:	18bb      	adds	r3, r7, r2
 8006978:	781a      	ldrb	r2, [r3, #0]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	0011      	movs	r1, r2
 800697e:	0018      	movs	r0, r3
 8006980:	f000 fe19 	bl	80075b6 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2180      	movs	r1, #128	; 0x80
 8006988:	0018      	movs	r0, r3
 800698a:	f000 fe14 	bl	80075b6 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800698e:	e024      	b.n	80069da <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 8006990:	683a      	ldr	r2, [r7, #0]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	0011      	movs	r1, r2
 8006996:	0018      	movs	r0, r3
 8006998:	f000 fc94 	bl	80072c4 <USBD_CtlError>
              break;
 800699c:	e01d      	b.n	80069da <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	885b      	ldrh	r3, [r3, #2]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d118      	bne.n	80069d8 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80069a6:	210e      	movs	r1, #14
 80069a8:	187b      	adds	r3, r7, r1
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	227f      	movs	r2, #127	; 0x7f
 80069ae:	4013      	ands	r3, r2
 80069b0:	d006      	beq.n	80069c0 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80069b2:	187b      	adds	r3, r7, r1
 80069b4:	781a      	ldrb	r2, [r3, #0]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	0011      	movs	r1, r2
 80069ba:	0018      	movs	r0, r3
 80069bc:	f000 fe26 	bl	800760c <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	0018      	movs	r0, r3
 80069c4:	f000 fcd7 	bl	8007376 <USBD_CtlSendStatus>
              }
              break;
 80069c8:	e006      	b.n	80069d8 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 80069ca:	683a      	ldr	r2, [r7, #0]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	0011      	movs	r1, r2
 80069d0:	0018      	movs	r0, r3
 80069d2:	f000 fc77 	bl	80072c4 <USBD_CtlError>
              break;
 80069d6:	e000      	b.n	80069da <USBD_StdEPReq+0x1b0>
              break;
 80069d8:	46c0      	nop			; (mov r8, r8)
          }
          break;
 80069da:	e0cd      	b.n	8006b78 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	23a7      	movs	r3, #167	; 0xa7
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	5cd3      	ldrb	r3, [r2, r3]
 80069e4:	2b02      	cmp	r3, #2
 80069e6:	d002      	beq.n	80069ee <USBD_StdEPReq+0x1c4>
 80069e8:	2b03      	cmp	r3, #3
 80069ea:	d03c      	beq.n	8006a66 <USBD_StdEPReq+0x23c>
 80069ec:	e0b5      	b.n	8006b5a <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80069ee:	220e      	movs	r2, #14
 80069f0:	18bb      	adds	r3, r7, r2
 80069f2:	781b      	ldrb	r3, [r3, #0]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d00a      	beq.n	8006a0e <USBD_StdEPReq+0x1e4>
 80069f8:	18bb      	adds	r3, r7, r2
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	2b80      	cmp	r3, #128	; 0x80
 80069fe:	d006      	beq.n	8006a0e <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 8006a00:	683a      	ldr	r2, [r7, #0]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	0011      	movs	r1, r2
 8006a06:	0018      	movs	r0, r3
 8006a08:	f000 fc5c 	bl	80072c4 <USBD_CtlError>
                break;
 8006a0c:	e0ac      	b.n	8006b68 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a0e:	220e      	movs	r2, #14
 8006a10:	18bb      	adds	r3, r7, r2
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	b25b      	sxtb	r3, r3
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	da0c      	bge.n	8006a34 <USBD_StdEPReq+0x20a>
 8006a1a:	18bb      	adds	r3, r7, r2
 8006a1c:	781b      	ldrb	r3, [r3, #0]
 8006a1e:	227f      	movs	r2, #127	; 0x7f
 8006a20:	401a      	ands	r2, r3
 8006a22:	0013      	movs	r3, r2
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	189b      	adds	r3, r3, r2
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	3310      	adds	r3, #16
 8006a2c:	687a      	ldr	r2, [r7, #4]
 8006a2e:	18d3      	adds	r3, r2, r3
 8006a30:	3304      	adds	r3, #4
 8006a32:	e00d      	b.n	8006a50 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006a34:	230e      	movs	r3, #14
 8006a36:	18fb      	adds	r3, r7, r3
 8006a38:	781b      	ldrb	r3, [r3, #0]
 8006a3a:	227f      	movs	r2, #127	; 0x7f
 8006a3c:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a3e:	0013      	movs	r3, r2
 8006a40:	009b      	lsls	r3, r3, #2
 8006a42:	189b      	adds	r3, r3, r2
 8006a44:	009b      	lsls	r3, r3, #2
 8006a46:	3351      	adds	r3, #81	; 0x51
 8006a48:	33ff      	adds	r3, #255	; 0xff
 8006a4a:	687a      	ldr	r2, [r7, #4]
 8006a4c:	18d3      	adds	r3, r2, r3
 8006a4e:	3304      	adds	r3, #4
 8006a50:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	2200      	movs	r2, #0
 8006a56:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006a58:	68b9      	ldr	r1, [r7, #8]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2202      	movs	r2, #2
 8006a5e:	0018      	movs	r0, r3
 8006a60:	f000 fc43 	bl	80072ea <USBD_CtlSendData>
              break;
 8006a64:	e080      	b.n	8006b68 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006a66:	220e      	movs	r2, #14
 8006a68:	18bb      	adds	r3, r7, r2
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	b25b      	sxtb	r3, r3
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	da14      	bge.n	8006a9c <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006a72:	18bb      	adds	r3, r7, r2
 8006a74:	781b      	ldrb	r3, [r3, #0]
 8006a76:	220f      	movs	r2, #15
 8006a78:	401a      	ands	r2, r3
 8006a7a:	6879      	ldr	r1, [r7, #4]
 8006a7c:	0013      	movs	r3, r2
 8006a7e:	009b      	lsls	r3, r3, #2
 8006a80:	189b      	adds	r3, r3, r2
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	18cb      	adds	r3, r1, r3
 8006a86:	3318      	adds	r3, #24
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d11e      	bne.n	8006acc <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8006a8e:	683a      	ldr	r2, [r7, #0]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	0011      	movs	r1, r2
 8006a94:	0018      	movs	r0, r3
 8006a96:	f000 fc15 	bl	80072c4 <USBD_CtlError>
                  break;
 8006a9a:	e065      	b.n	8006b68 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006a9c:	230e      	movs	r3, #14
 8006a9e:	18fb      	adds	r3, r7, r3
 8006aa0:	781b      	ldrb	r3, [r3, #0]
 8006aa2:	220f      	movs	r2, #15
 8006aa4:	401a      	ands	r2, r3
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	23ac      	movs	r3, #172	; 0xac
 8006aaa:	0059      	lsls	r1, r3, #1
 8006aac:	0013      	movs	r3, r2
 8006aae:	009b      	lsls	r3, r3, #2
 8006ab0:	189b      	adds	r3, r3, r2
 8006ab2:	009b      	lsls	r3, r3, #2
 8006ab4:	18c3      	adds	r3, r0, r3
 8006ab6:	185b      	adds	r3, r3, r1
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d106      	bne.n	8006acc <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8006abe:	683a      	ldr	r2, [r7, #0]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	0011      	movs	r1, r2
 8006ac4:	0018      	movs	r0, r3
 8006ac6:	f000 fbfd 	bl	80072c4 <USBD_CtlError>
                  break;
 8006aca:	e04d      	b.n	8006b68 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006acc:	220e      	movs	r2, #14
 8006ace:	18bb      	adds	r3, r7, r2
 8006ad0:	781b      	ldrb	r3, [r3, #0]
 8006ad2:	b25b      	sxtb	r3, r3
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	da0c      	bge.n	8006af2 <USBD_StdEPReq+0x2c8>
 8006ad8:	18bb      	adds	r3, r7, r2
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	227f      	movs	r2, #127	; 0x7f
 8006ade:	401a      	ands	r2, r3
 8006ae0:	0013      	movs	r3, r2
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	189b      	adds	r3, r3, r2
 8006ae6:	009b      	lsls	r3, r3, #2
 8006ae8:	3310      	adds	r3, #16
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	18d3      	adds	r3, r2, r3
 8006aee:	3304      	adds	r3, #4
 8006af0:	e00d      	b.n	8006b0e <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006af2:	230e      	movs	r3, #14
 8006af4:	18fb      	adds	r3, r7, r3
 8006af6:	781b      	ldrb	r3, [r3, #0]
 8006af8:	227f      	movs	r2, #127	; 0x7f
 8006afa:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006afc:	0013      	movs	r3, r2
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	189b      	adds	r3, r3, r2
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	3351      	adds	r3, #81	; 0x51
 8006b06:	33ff      	adds	r3, #255	; 0xff
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	18d3      	adds	r3, r2, r3
 8006b0c:	3304      	adds	r3, #4
 8006b0e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006b10:	220e      	movs	r2, #14
 8006b12:	18bb      	adds	r3, r7, r2
 8006b14:	781b      	ldrb	r3, [r3, #0]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d003      	beq.n	8006b22 <USBD_StdEPReq+0x2f8>
 8006b1a:	18bb      	adds	r3, r7, r2
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	2b80      	cmp	r3, #128	; 0x80
 8006b20:	d103      	bne.n	8006b2a <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	2200      	movs	r2, #0
 8006b26:	601a      	str	r2, [r3, #0]
 8006b28:	e010      	b.n	8006b4c <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006b2a:	230e      	movs	r3, #14
 8006b2c:	18fb      	adds	r3, r7, r3
 8006b2e:	781a      	ldrb	r2, [r3, #0]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	0011      	movs	r1, r2
 8006b34:	0018      	movs	r0, r3
 8006b36:	f000 fd94 	bl	8007662 <USBD_LL_IsStallEP>
 8006b3a:	1e03      	subs	r3, r0, #0
 8006b3c:	d003      	beq.n	8006b46 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	2201      	movs	r2, #1
 8006b42:	601a      	str	r2, [r3, #0]
 8006b44:	e002      	b.n	8006b4c <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006b4c:	68b9      	ldr	r1, [r7, #8]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2202      	movs	r2, #2
 8006b52:	0018      	movs	r0, r3
 8006b54:	f000 fbc9 	bl	80072ea <USBD_CtlSendData>
              break;
 8006b58:	e006      	b.n	8006b68 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 8006b5a:	683a      	ldr	r2, [r7, #0]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	0011      	movs	r1, r2
 8006b60:	0018      	movs	r0, r3
 8006b62:	f000 fbaf 	bl	80072c4 <USBD_CtlError>
              break;
 8006b66:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8006b68:	e006      	b.n	8006b78 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 8006b6a:	683a      	ldr	r2, [r7, #0]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	0011      	movs	r1, r2
 8006b70:	0018      	movs	r0, r3
 8006b72:	f000 fba7 	bl	80072c4 <USBD_CtlError>
          break;
 8006b76:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8006b78:	e006      	b.n	8006b88 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 8006b7a:	683a      	ldr	r2, [r7, #0]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	0011      	movs	r1, r2
 8006b80:	0018      	movs	r0, r3
 8006b82:	f000 fb9f 	bl	80072c4 <USBD_CtlError>
      break;
 8006b86:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8006b88:	230f      	movs	r3, #15
 8006b8a:	18fb      	adds	r3, r7, r3
 8006b8c:	781b      	ldrb	r3, [r3, #0]
}
 8006b8e:	0018      	movs	r0, r3
 8006b90:	46bd      	mov	sp, r7
 8006b92:	b004      	add	sp, #16
 8006b94:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006b98 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b084      	sub	sp, #16
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006ba2:	2308      	movs	r3, #8
 8006ba4:	18fb      	adds	r3, r7, r3
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 8006baa:	2300      	movs	r3, #0
 8006bac:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006bae:	230b      	movs	r3, #11
 8006bb0:	18fb      	adds	r3, r7, r3
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	885b      	ldrh	r3, [r3, #2]
 8006bba:	0a1b      	lsrs	r3, r3, #8
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	2b07      	cmp	r3, #7
 8006bc0:	d900      	bls.n	8006bc4 <USBD_GetDescriptor+0x2c>
 8006bc2:	e159      	b.n	8006e78 <USBD_GetDescriptor+0x2e0>
 8006bc4:	009a      	lsls	r2, r3, #2
 8006bc6:	4bcb      	ldr	r3, [pc, #812]	; (8006ef4 <USBD_GetDescriptor+0x35c>)
 8006bc8:	18d3      	adds	r3, r2, r3
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	23ac      	movs	r3, #172	; 0xac
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	58d3      	ldr	r3, [r2, r3]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	7c12      	ldrb	r2, [r2, #16]
 8006bdc:	2108      	movs	r1, #8
 8006bde:	1879      	adds	r1, r7, r1
 8006be0:	0010      	movs	r0, r2
 8006be2:	4798      	blx	r3
 8006be4:	0003      	movs	r3, r0
 8006be6:	60fb      	str	r3, [r7, #12]
      break;
 8006be8:	e153      	b.n	8006e92 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	7c1b      	ldrb	r3, [r3, #16]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d10f      	bne.n	8006c12 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006bf2:	687a      	ldr	r2, [r7, #4]
 8006bf4:	23ad      	movs	r3, #173	; 0xad
 8006bf6:	009b      	lsls	r3, r3, #2
 8006bf8:	58d3      	ldr	r3, [r2, r3]
 8006bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bfc:	2208      	movs	r2, #8
 8006bfe:	18ba      	adds	r2, r7, r2
 8006c00:	0010      	movs	r0, r2
 8006c02:	4798      	blx	r3
 8006c04:	0003      	movs	r3, r0
 8006c06:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	3301      	adds	r3, #1
 8006c0c:	2202      	movs	r2, #2
 8006c0e:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006c10:	e13f      	b.n	8006e92 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	23ad      	movs	r3, #173	; 0xad
 8006c16:	009b      	lsls	r3, r3, #2
 8006c18:	58d3      	ldr	r3, [r2, r3]
 8006c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c1c:	2208      	movs	r2, #8
 8006c1e:	18ba      	adds	r2, r7, r2
 8006c20:	0010      	movs	r0, r2
 8006c22:	4798      	blx	r3
 8006c24:	0003      	movs	r3, r0
 8006c26:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	3301      	adds	r3, #1
 8006c2c:	2202      	movs	r2, #2
 8006c2e:	701a      	strb	r2, [r3, #0]
      break;
 8006c30:	e12f      	b.n	8006e92 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	885b      	ldrh	r3, [r3, #2]
 8006c36:	b2db      	uxtb	r3, r3
 8006c38:	2b05      	cmp	r3, #5
 8006c3a:	d900      	bls.n	8006c3e <USBD_GetDescriptor+0xa6>
 8006c3c:	e0d0      	b.n	8006de0 <USBD_GetDescriptor+0x248>
 8006c3e:	009a      	lsls	r2, r3, #2
 8006c40:	4bad      	ldr	r3, [pc, #692]	; (8006ef8 <USBD_GetDescriptor+0x360>)
 8006c42:	18d3      	adds	r3, r2, r3
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	23ac      	movs	r3, #172	; 0xac
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	58d3      	ldr	r3, [r2, r3]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d00d      	beq.n	8006c72 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006c56:	687a      	ldr	r2, [r7, #4]
 8006c58:	23ac      	movs	r3, #172	; 0xac
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	58d3      	ldr	r3, [r2, r3]
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	687a      	ldr	r2, [r7, #4]
 8006c62:	7c12      	ldrb	r2, [r2, #16]
 8006c64:	2108      	movs	r1, #8
 8006c66:	1879      	adds	r1, r7, r1
 8006c68:	0010      	movs	r0, r2
 8006c6a:	4798      	blx	r3
 8006c6c:	0003      	movs	r3, r0
 8006c6e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c70:	e0c3      	b.n	8006dfa <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006c72:	683a      	ldr	r2, [r7, #0]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	0011      	movs	r1, r2
 8006c78:	0018      	movs	r0, r3
 8006c7a:	f000 fb23 	bl	80072c4 <USBD_CtlError>
            err++;
 8006c7e:	210b      	movs	r1, #11
 8006c80:	187b      	adds	r3, r7, r1
 8006c82:	781a      	ldrb	r2, [r3, #0]
 8006c84:	187b      	adds	r3, r7, r1
 8006c86:	3201      	adds	r2, #1
 8006c88:	701a      	strb	r2, [r3, #0]
          break;
 8006c8a:	e0b6      	b.n	8006dfa <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006c8c:	687a      	ldr	r2, [r7, #4]
 8006c8e:	23ac      	movs	r3, #172	; 0xac
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	58d3      	ldr	r3, [r2, r3]
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d00d      	beq.n	8006cb6 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	23ac      	movs	r3, #172	; 0xac
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	58d3      	ldr	r3, [r2, r3]
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	687a      	ldr	r2, [r7, #4]
 8006ca6:	7c12      	ldrb	r2, [r2, #16]
 8006ca8:	2108      	movs	r1, #8
 8006caa:	1879      	adds	r1, r7, r1
 8006cac:	0010      	movs	r0, r2
 8006cae:	4798      	blx	r3
 8006cb0:	0003      	movs	r3, r0
 8006cb2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006cb4:	e0a1      	b.n	8006dfa <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006cb6:	683a      	ldr	r2, [r7, #0]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	0011      	movs	r1, r2
 8006cbc:	0018      	movs	r0, r3
 8006cbe:	f000 fb01 	bl	80072c4 <USBD_CtlError>
            err++;
 8006cc2:	210b      	movs	r1, #11
 8006cc4:	187b      	adds	r3, r7, r1
 8006cc6:	781a      	ldrb	r2, [r3, #0]
 8006cc8:	187b      	adds	r3, r7, r1
 8006cca:	3201      	adds	r2, #1
 8006ccc:	701a      	strb	r2, [r3, #0]
          break;
 8006cce:	e094      	b.n	8006dfa <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006cd0:	687a      	ldr	r2, [r7, #4]
 8006cd2:	23ac      	movs	r3, #172	; 0xac
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	58d3      	ldr	r3, [r2, r3]
 8006cd8:	68db      	ldr	r3, [r3, #12]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d00d      	beq.n	8006cfa <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006cde:	687a      	ldr	r2, [r7, #4]
 8006ce0:	23ac      	movs	r3, #172	; 0xac
 8006ce2:	009b      	lsls	r3, r3, #2
 8006ce4:	58d3      	ldr	r3, [r2, r3]
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	687a      	ldr	r2, [r7, #4]
 8006cea:	7c12      	ldrb	r2, [r2, #16]
 8006cec:	2108      	movs	r1, #8
 8006cee:	1879      	adds	r1, r7, r1
 8006cf0:	0010      	movs	r0, r2
 8006cf2:	4798      	blx	r3
 8006cf4:	0003      	movs	r3, r0
 8006cf6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006cf8:	e07f      	b.n	8006dfa <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006cfa:	683a      	ldr	r2, [r7, #0]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	0011      	movs	r1, r2
 8006d00:	0018      	movs	r0, r3
 8006d02:	f000 fadf 	bl	80072c4 <USBD_CtlError>
            err++;
 8006d06:	210b      	movs	r1, #11
 8006d08:	187b      	adds	r3, r7, r1
 8006d0a:	781a      	ldrb	r2, [r3, #0]
 8006d0c:	187b      	adds	r3, r7, r1
 8006d0e:	3201      	adds	r2, #1
 8006d10:	701a      	strb	r2, [r3, #0]
          break;
 8006d12:	e072      	b.n	8006dfa <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	23ac      	movs	r3, #172	; 0xac
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	58d3      	ldr	r3, [r2, r3]
 8006d1c:	691b      	ldr	r3, [r3, #16]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d00d      	beq.n	8006d3e <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006d22:	687a      	ldr	r2, [r7, #4]
 8006d24:	23ac      	movs	r3, #172	; 0xac
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	58d3      	ldr	r3, [r2, r3]
 8006d2a:	691b      	ldr	r3, [r3, #16]
 8006d2c:	687a      	ldr	r2, [r7, #4]
 8006d2e:	7c12      	ldrb	r2, [r2, #16]
 8006d30:	2108      	movs	r1, #8
 8006d32:	1879      	adds	r1, r7, r1
 8006d34:	0010      	movs	r0, r2
 8006d36:	4798      	blx	r3
 8006d38:	0003      	movs	r3, r0
 8006d3a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d3c:	e05d      	b.n	8006dfa <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006d3e:	683a      	ldr	r2, [r7, #0]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	0011      	movs	r1, r2
 8006d44:	0018      	movs	r0, r3
 8006d46:	f000 fabd 	bl	80072c4 <USBD_CtlError>
            err++;
 8006d4a:	210b      	movs	r1, #11
 8006d4c:	187b      	adds	r3, r7, r1
 8006d4e:	781a      	ldrb	r2, [r3, #0]
 8006d50:	187b      	adds	r3, r7, r1
 8006d52:	3201      	adds	r2, #1
 8006d54:	701a      	strb	r2, [r3, #0]
          break;
 8006d56:	e050      	b.n	8006dfa <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006d58:	687a      	ldr	r2, [r7, #4]
 8006d5a:	23ac      	movs	r3, #172	; 0xac
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	58d3      	ldr	r3, [r2, r3]
 8006d60:	695b      	ldr	r3, [r3, #20]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00d      	beq.n	8006d82 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006d66:	687a      	ldr	r2, [r7, #4]
 8006d68:	23ac      	movs	r3, #172	; 0xac
 8006d6a:	009b      	lsls	r3, r3, #2
 8006d6c:	58d3      	ldr	r3, [r2, r3]
 8006d6e:	695b      	ldr	r3, [r3, #20]
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	7c12      	ldrb	r2, [r2, #16]
 8006d74:	2108      	movs	r1, #8
 8006d76:	1879      	adds	r1, r7, r1
 8006d78:	0010      	movs	r0, r2
 8006d7a:	4798      	blx	r3
 8006d7c:	0003      	movs	r3, r0
 8006d7e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d80:	e03b      	b.n	8006dfa <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006d82:	683a      	ldr	r2, [r7, #0]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	0011      	movs	r1, r2
 8006d88:	0018      	movs	r0, r3
 8006d8a:	f000 fa9b 	bl	80072c4 <USBD_CtlError>
            err++;
 8006d8e:	210b      	movs	r1, #11
 8006d90:	187b      	adds	r3, r7, r1
 8006d92:	781a      	ldrb	r2, [r3, #0]
 8006d94:	187b      	adds	r3, r7, r1
 8006d96:	3201      	adds	r2, #1
 8006d98:	701a      	strb	r2, [r3, #0]
          break;
 8006d9a:	e02e      	b.n	8006dfa <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	23ac      	movs	r3, #172	; 0xac
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	58d3      	ldr	r3, [r2, r3]
 8006da4:	699b      	ldr	r3, [r3, #24]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d00d      	beq.n	8006dc6 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	23ac      	movs	r3, #172	; 0xac
 8006dae:	009b      	lsls	r3, r3, #2
 8006db0:	58d3      	ldr	r3, [r2, r3]
 8006db2:	699b      	ldr	r3, [r3, #24]
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	7c12      	ldrb	r2, [r2, #16]
 8006db8:	2108      	movs	r1, #8
 8006dba:	1879      	adds	r1, r7, r1
 8006dbc:	0010      	movs	r0, r2
 8006dbe:	4798      	blx	r3
 8006dc0:	0003      	movs	r3, r0
 8006dc2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006dc4:	e019      	b.n	8006dfa <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006dc6:	683a      	ldr	r2, [r7, #0]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	0011      	movs	r1, r2
 8006dcc:	0018      	movs	r0, r3
 8006dce:	f000 fa79 	bl	80072c4 <USBD_CtlError>
            err++;
 8006dd2:	210b      	movs	r1, #11
 8006dd4:	187b      	adds	r3, r7, r1
 8006dd6:	781a      	ldrb	r2, [r3, #0]
 8006dd8:	187b      	adds	r3, r7, r1
 8006dda:	3201      	adds	r2, #1
 8006ddc:	701a      	strb	r2, [r3, #0]
          break;
 8006dde:	e00c      	b.n	8006dfa <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006de0:	683a      	ldr	r2, [r7, #0]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	0011      	movs	r1, r2
 8006de6:	0018      	movs	r0, r3
 8006de8:	f000 fa6c 	bl	80072c4 <USBD_CtlError>
          err++;
 8006dec:	210b      	movs	r1, #11
 8006dee:	187b      	adds	r3, r7, r1
 8006df0:	781a      	ldrb	r2, [r3, #0]
 8006df2:	187b      	adds	r3, r7, r1
 8006df4:	3201      	adds	r2, #1
 8006df6:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8006df8:	e04b      	b.n	8006e92 <USBD_GetDescriptor+0x2fa>
 8006dfa:	e04a      	b.n	8006e92 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	7c1b      	ldrb	r3, [r3, #16]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d10b      	bne.n	8006e1c <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006e04:	687a      	ldr	r2, [r7, #4]
 8006e06:	23ad      	movs	r3, #173	; 0xad
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	58d3      	ldr	r3, [r2, r3]
 8006e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e0e:	2208      	movs	r2, #8
 8006e10:	18ba      	adds	r2, r7, r2
 8006e12:	0010      	movs	r0, r2
 8006e14:	4798      	blx	r3
 8006e16:	0003      	movs	r3, r0
 8006e18:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006e1a:	e03a      	b.n	8006e92 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8006e1c:	683a      	ldr	r2, [r7, #0]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	0011      	movs	r1, r2
 8006e22:	0018      	movs	r0, r3
 8006e24:	f000 fa4e 	bl	80072c4 <USBD_CtlError>
        err++;
 8006e28:	210b      	movs	r1, #11
 8006e2a:	187b      	adds	r3, r7, r1
 8006e2c:	781a      	ldrb	r2, [r3, #0]
 8006e2e:	187b      	adds	r3, r7, r1
 8006e30:	3201      	adds	r2, #1
 8006e32:	701a      	strb	r2, [r3, #0]
      break;
 8006e34:	e02d      	b.n	8006e92 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	7c1b      	ldrb	r3, [r3, #16]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d10f      	bne.n	8006e5e <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	23ad      	movs	r3, #173	; 0xad
 8006e42:	009b      	lsls	r3, r3, #2
 8006e44:	58d3      	ldr	r3, [r2, r3]
 8006e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e48:	2208      	movs	r2, #8
 8006e4a:	18ba      	adds	r2, r7, r2
 8006e4c:	0010      	movs	r0, r2
 8006e4e:	4798      	blx	r3
 8006e50:	0003      	movs	r3, r0
 8006e52:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	3301      	adds	r3, #1
 8006e58:	2207      	movs	r2, #7
 8006e5a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006e5c:	e019      	b.n	8006e92 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8006e5e:	683a      	ldr	r2, [r7, #0]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	0011      	movs	r1, r2
 8006e64:	0018      	movs	r0, r3
 8006e66:	f000 fa2d 	bl	80072c4 <USBD_CtlError>
        err++;
 8006e6a:	210b      	movs	r1, #11
 8006e6c:	187b      	adds	r3, r7, r1
 8006e6e:	781a      	ldrb	r2, [r3, #0]
 8006e70:	187b      	adds	r3, r7, r1
 8006e72:	3201      	adds	r2, #1
 8006e74:	701a      	strb	r2, [r3, #0]
      break;
 8006e76:	e00c      	b.n	8006e92 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 8006e78:	683a      	ldr	r2, [r7, #0]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	0011      	movs	r1, r2
 8006e7e:	0018      	movs	r0, r3
 8006e80:	f000 fa20 	bl	80072c4 <USBD_CtlError>
      err++;
 8006e84:	210b      	movs	r1, #11
 8006e86:	187b      	adds	r3, r7, r1
 8006e88:	781a      	ldrb	r2, [r3, #0]
 8006e8a:	187b      	adds	r3, r7, r1
 8006e8c:	3201      	adds	r2, #1
 8006e8e:	701a      	strb	r2, [r3, #0]
      break;
 8006e90:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 8006e92:	230b      	movs	r3, #11
 8006e94:	18fb      	adds	r3, r7, r3
 8006e96:	781b      	ldrb	r3, [r3, #0]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d127      	bne.n	8006eec <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006e9c:	2108      	movs	r1, #8
 8006e9e:	187b      	adds	r3, r7, r1
 8006ea0:	881b      	ldrh	r3, [r3, #0]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d019      	beq.n	8006eda <USBD_GetDescriptor+0x342>
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	88db      	ldrh	r3, [r3, #6]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d015      	beq.n	8006eda <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	88da      	ldrh	r2, [r3, #6]
 8006eb2:	187b      	adds	r3, r7, r1
 8006eb4:	881b      	ldrh	r3, [r3, #0]
 8006eb6:	1c18      	adds	r0, r3, #0
 8006eb8:	1c11      	adds	r1, r2, #0
 8006eba:	b28a      	uxth	r2, r1
 8006ebc:	b283      	uxth	r3, r0
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	d900      	bls.n	8006ec4 <USBD_GetDescriptor+0x32c>
 8006ec2:	1c01      	adds	r1, r0, #0
 8006ec4:	b28a      	uxth	r2, r1
 8006ec6:	2108      	movs	r1, #8
 8006ec8:	187b      	adds	r3, r7, r1
 8006eca:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006ecc:	187b      	adds	r3, r7, r1
 8006ece:	881a      	ldrh	r2, [r3, #0]
 8006ed0:	68f9      	ldr	r1, [r7, #12]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	0018      	movs	r0, r3
 8006ed6:	f000 fa08 	bl	80072ea <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	88db      	ldrh	r3, [r3, #6]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d105      	bne.n	8006eee <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	0018      	movs	r0, r3
 8006ee6:	f000 fa46 	bl	8007376 <USBD_CtlSendStatus>
 8006eea:	e000      	b.n	8006eee <USBD_GetDescriptor+0x356>
    return;
 8006eec:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	b004      	add	sp, #16
 8006ef2:	bd80      	pop	{r7, pc}
 8006ef4:	08007954 	.word	0x08007954
 8006ef8:	08007974 	.word	0x08007974

08006efc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006efc:	b590      	push	{r4, r7, lr}
 8006efe:	b085      	sub	sp, #20
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	889b      	ldrh	r3, [r3, #4]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d13d      	bne.n	8006f8a <USBD_SetAddress+0x8e>
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	88db      	ldrh	r3, [r3, #6]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d139      	bne.n	8006f8a <USBD_SetAddress+0x8e>
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	885b      	ldrh	r3, [r3, #2]
 8006f1a:	2b7f      	cmp	r3, #127	; 0x7f
 8006f1c:	d835      	bhi.n	8006f8a <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	885b      	ldrh	r3, [r3, #2]
 8006f22:	b2da      	uxtb	r2, r3
 8006f24:	230f      	movs	r3, #15
 8006f26:	18fb      	adds	r3, r7, r3
 8006f28:	217f      	movs	r1, #127	; 0x7f
 8006f2a:	400a      	ands	r2, r1
 8006f2c:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f2e:	687a      	ldr	r2, [r7, #4]
 8006f30:	23a7      	movs	r3, #167	; 0xa7
 8006f32:	009b      	lsls	r3, r3, #2
 8006f34:	5cd3      	ldrb	r3, [r2, r3]
 8006f36:	2b03      	cmp	r3, #3
 8006f38:	d106      	bne.n	8006f48 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 8006f3a:	683a      	ldr	r2, [r7, #0]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	0011      	movs	r1, r2
 8006f40:	0018      	movs	r0, r3
 8006f42:	f000 f9bf 	bl	80072c4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f46:	e027      	b.n	8006f98 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	240f      	movs	r4, #15
 8006f4c:	193a      	adds	r2, r7, r4
 8006f4e:	4914      	ldr	r1, [pc, #80]	; (8006fa0 <USBD_SetAddress+0xa4>)
 8006f50:	7812      	ldrb	r2, [r2, #0]
 8006f52:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006f54:	193b      	adds	r3, r7, r4
 8006f56:	781a      	ldrb	r2, [r3, #0]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	0011      	movs	r1, r2
 8006f5c:	0018      	movs	r0, r3
 8006f5e:	f000 fbb1 	bl	80076c4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	0018      	movs	r0, r3
 8006f66:	f000 fa06 	bl	8007376 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006f6a:	193b      	adds	r3, r7, r4
 8006f6c:	781b      	ldrb	r3, [r3, #0]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d005      	beq.n	8006f7e <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f72:	687a      	ldr	r2, [r7, #4]
 8006f74:	23a7      	movs	r3, #167	; 0xa7
 8006f76:	009b      	lsls	r3, r3, #2
 8006f78:	2102      	movs	r1, #2
 8006f7a:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f7c:	e00c      	b.n	8006f98 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006f7e:	687a      	ldr	r2, [r7, #4]
 8006f80:	23a7      	movs	r3, #167	; 0xa7
 8006f82:	009b      	lsls	r3, r3, #2
 8006f84:	2101      	movs	r1, #1
 8006f86:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f88:	e006      	b.n	8006f98 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006f8a:	683a      	ldr	r2, [r7, #0]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	0011      	movs	r1, r2
 8006f90:	0018      	movs	r0, r3
 8006f92:	f000 f997 	bl	80072c4 <USBD_CtlError>
  }
}
 8006f96:	46c0      	nop			; (mov r8, r8)
 8006f98:	46c0      	nop			; (mov r8, r8)
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	b005      	add	sp, #20
 8006f9e:	bd90      	pop	{r4, r7, pc}
 8006fa0:	0000029e 	.word	0x0000029e

08006fa4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b082      	sub	sp, #8
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	885b      	ldrh	r3, [r3, #2]
 8006fb2:	b2da      	uxtb	r2, r3
 8006fb4:	4b4c      	ldr	r3, [pc, #304]	; (80070e8 <USBD_SetConfig+0x144>)
 8006fb6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006fb8:	4b4b      	ldr	r3, [pc, #300]	; (80070e8 <USBD_SetConfig+0x144>)
 8006fba:	781b      	ldrb	r3, [r3, #0]
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d906      	bls.n	8006fce <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8006fc0:	683a      	ldr	r2, [r7, #0]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	0011      	movs	r1, r2
 8006fc6:	0018      	movs	r0, r3
 8006fc8:	f000 f97c 	bl	80072c4 <USBD_CtlError>
 8006fcc:	e088      	b.n	80070e0 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 8006fce:	687a      	ldr	r2, [r7, #4]
 8006fd0:	23a7      	movs	r3, #167	; 0xa7
 8006fd2:	009b      	lsls	r3, r3, #2
 8006fd4:	5cd3      	ldrb	r3, [r2, r3]
 8006fd6:	2b02      	cmp	r3, #2
 8006fd8:	d002      	beq.n	8006fe0 <USBD_SetConfig+0x3c>
 8006fda:	2b03      	cmp	r3, #3
 8006fdc:	d029      	beq.n	8007032 <USBD_SetConfig+0x8e>
 8006fde:	e071      	b.n	80070c4 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006fe0:	4b41      	ldr	r3, [pc, #260]	; (80070e8 <USBD_SetConfig+0x144>)
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d01f      	beq.n	8007028 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8006fe8:	4b3f      	ldr	r3, [pc, #252]	; (80070e8 <USBD_SetConfig+0x144>)
 8006fea:	781b      	ldrb	r3, [r3, #0]
 8006fec:	001a      	movs	r2, r3
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006ff2:	687a      	ldr	r2, [r7, #4]
 8006ff4:	23a7      	movs	r3, #167	; 0xa7
 8006ff6:	009b      	lsls	r3, r3, #2
 8006ff8:	2103      	movs	r1, #3
 8006ffa:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006ffc:	4b3a      	ldr	r3, [pc, #232]	; (80070e8 <USBD_SetConfig+0x144>)
 8006ffe:	781a      	ldrb	r2, [r3, #0]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	0011      	movs	r1, r2
 8007004:	0018      	movs	r0, r3
 8007006:	f7ff f8c5 	bl	8006194 <USBD_SetClassConfig>
 800700a:	0003      	movs	r3, r0
 800700c:	2b02      	cmp	r3, #2
 800700e:	d106      	bne.n	800701e <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8007010:	683a      	ldr	r2, [r7, #0]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	0011      	movs	r1, r2
 8007016:	0018      	movs	r0, r3
 8007018:	f000 f954 	bl	80072c4 <USBD_CtlError>
            return;
 800701c:	e060      	b.n	80070e0 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	0018      	movs	r0, r3
 8007022:	f000 f9a8 	bl	8007376 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007026:	e05b      	b.n	80070e0 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	0018      	movs	r0, r3
 800702c:	f000 f9a3 	bl	8007376 <USBD_CtlSendStatus>
        break;
 8007030:	e056      	b.n	80070e0 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007032:	4b2d      	ldr	r3, [pc, #180]	; (80070e8 <USBD_SetConfig+0x144>)
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d115      	bne.n	8007066 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	23a7      	movs	r3, #167	; 0xa7
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	2102      	movs	r1, #2
 8007042:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8007044:	4b28      	ldr	r3, [pc, #160]	; (80070e8 <USBD_SetConfig+0x144>)
 8007046:	781b      	ldrb	r3, [r3, #0]
 8007048:	001a      	movs	r2, r3
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800704e:	4b26      	ldr	r3, [pc, #152]	; (80070e8 <USBD_SetConfig+0x144>)
 8007050:	781a      	ldrb	r2, [r3, #0]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	0011      	movs	r1, r2
 8007056:	0018      	movs	r0, r3
 8007058:	f7ff f8c3 	bl	80061e2 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	0018      	movs	r0, r3
 8007060:	f000 f989 	bl	8007376 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007064:	e03c      	b.n	80070e0 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 8007066:	4b20      	ldr	r3, [pc, #128]	; (80070e8 <USBD_SetConfig+0x144>)
 8007068:	781b      	ldrb	r3, [r3, #0]
 800706a:	001a      	movs	r2, r3
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	429a      	cmp	r2, r3
 8007072:	d022      	beq.n	80070ba <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	b2da      	uxtb	r2, r3
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	0011      	movs	r1, r2
 800707e:	0018      	movs	r0, r3
 8007080:	f7ff f8af 	bl	80061e2 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007084:	4b18      	ldr	r3, [pc, #96]	; (80070e8 <USBD_SetConfig+0x144>)
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	001a      	movs	r2, r3
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800708e:	4b16      	ldr	r3, [pc, #88]	; (80070e8 <USBD_SetConfig+0x144>)
 8007090:	781a      	ldrb	r2, [r3, #0]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	0011      	movs	r1, r2
 8007096:	0018      	movs	r0, r3
 8007098:	f7ff f87c 	bl	8006194 <USBD_SetClassConfig>
 800709c:	0003      	movs	r3, r0
 800709e:	2b02      	cmp	r3, #2
 80070a0:	d106      	bne.n	80070b0 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 80070a2:	683a      	ldr	r2, [r7, #0]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	0011      	movs	r1, r2
 80070a8:	0018      	movs	r0, r3
 80070aa:	f000 f90b 	bl	80072c4 <USBD_CtlError>
            return;
 80070ae:	e017      	b.n	80070e0 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	0018      	movs	r0, r3
 80070b4:	f000 f95f 	bl	8007376 <USBD_CtlSendStatus>
        break;
 80070b8:	e012      	b.n	80070e0 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	0018      	movs	r0, r3
 80070be:	f000 f95a 	bl	8007376 <USBD_CtlSendStatus>
        break;
 80070c2:	e00d      	b.n	80070e0 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 80070c4:	683a      	ldr	r2, [r7, #0]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	0011      	movs	r1, r2
 80070ca:	0018      	movs	r0, r3
 80070cc:	f000 f8fa 	bl	80072c4 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80070d0:	4b05      	ldr	r3, [pc, #20]	; (80070e8 <USBD_SetConfig+0x144>)
 80070d2:	781a      	ldrb	r2, [r3, #0]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	0011      	movs	r1, r2
 80070d8:	0018      	movs	r0, r3
 80070da:	f7ff f882 	bl	80061e2 <USBD_ClrClassConfig>
        break;
 80070de:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 80070e0:	46bd      	mov	sp, r7
 80070e2:	b002      	add	sp, #8
 80070e4:	bd80      	pop	{r7, pc}
 80070e6:	46c0      	nop			; (mov r8, r8)
 80070e8:	2000004e 	.word	0x2000004e

080070ec <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b082      	sub	sp, #8
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	88db      	ldrh	r3, [r3, #6]
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	d006      	beq.n	800710c <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 80070fe:	683a      	ldr	r2, [r7, #0]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	0011      	movs	r1, r2
 8007104:	0018      	movs	r0, r3
 8007106:	f000 f8dd 	bl	80072c4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800710a:	e026      	b.n	800715a <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 800710c:	687a      	ldr	r2, [r7, #4]
 800710e:	23a7      	movs	r3, #167	; 0xa7
 8007110:	009b      	lsls	r3, r3, #2
 8007112:	5cd3      	ldrb	r3, [r2, r3]
 8007114:	2b02      	cmp	r3, #2
 8007116:	dc02      	bgt.n	800711e <USBD_GetConfig+0x32>
 8007118:	2b00      	cmp	r3, #0
 800711a:	dc03      	bgt.n	8007124 <USBD_GetConfig+0x38>
 800711c:	e016      	b.n	800714c <USBD_GetConfig+0x60>
 800711e:	2b03      	cmp	r3, #3
 8007120:	d00c      	beq.n	800713c <USBD_GetConfig+0x50>
 8007122:	e013      	b.n	800714c <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2200      	movs	r2, #0
 8007128:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	3308      	adds	r3, #8
 800712e:	0019      	movs	r1, r3
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2201      	movs	r2, #1
 8007134:	0018      	movs	r0, r3
 8007136:	f000 f8d8 	bl	80072ea <USBD_CtlSendData>
        break;
 800713a:	e00e      	b.n	800715a <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	1d19      	adds	r1, r3, #4
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2201      	movs	r2, #1
 8007144:	0018      	movs	r0, r3
 8007146:	f000 f8d0 	bl	80072ea <USBD_CtlSendData>
        break;
 800714a:	e006      	b.n	800715a <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 800714c:	683a      	ldr	r2, [r7, #0]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	0011      	movs	r1, r2
 8007152:	0018      	movs	r0, r3
 8007154:	f000 f8b6 	bl	80072c4 <USBD_CtlError>
        break;
 8007158:	46c0      	nop			; (mov r8, r8)
}
 800715a:	46c0      	nop			; (mov r8, r8)
 800715c:	46bd      	mov	sp, r7
 800715e:	b002      	add	sp, #8
 8007160:	bd80      	pop	{r7, pc}

08007162 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007162:	b580      	push	{r7, lr}
 8007164:	b082      	sub	sp, #8
 8007166:	af00      	add	r7, sp, #0
 8007168:	6078      	str	r0, [r7, #4]
 800716a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800716c:	687a      	ldr	r2, [r7, #4]
 800716e:	23a7      	movs	r3, #167	; 0xa7
 8007170:	009b      	lsls	r3, r3, #2
 8007172:	5cd3      	ldrb	r3, [r2, r3]
 8007174:	3b01      	subs	r3, #1
 8007176:	2b02      	cmp	r3, #2
 8007178:	d822      	bhi.n	80071c0 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	88db      	ldrh	r3, [r3, #6]
 800717e:	2b02      	cmp	r3, #2
 8007180:	d006      	beq.n	8007190 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8007182:	683a      	ldr	r2, [r7, #0]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	0011      	movs	r1, r2
 8007188:	0018      	movs	r0, r3
 800718a:	f000 f89b 	bl	80072c4 <USBD_CtlError>
        break;
 800718e:	e01e      	b.n	80071ce <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2201      	movs	r2, #1
 8007194:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007196:	687a      	ldr	r2, [r7, #4]
 8007198:	23a9      	movs	r3, #169	; 0xa9
 800719a:	009b      	lsls	r3, r3, #2
 800719c:	58d3      	ldr	r3, [r2, r3]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d005      	beq.n	80071ae <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	68db      	ldr	r3, [r3, #12]
 80071a6:	2202      	movs	r2, #2
 80071a8:	431a      	orrs	r2, r3
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	330c      	adds	r3, #12
 80071b2:	0019      	movs	r1, r3
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2202      	movs	r2, #2
 80071b8:	0018      	movs	r0, r3
 80071ba:	f000 f896 	bl	80072ea <USBD_CtlSendData>
      break;
 80071be:	e006      	b.n	80071ce <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 80071c0:	683a      	ldr	r2, [r7, #0]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	0011      	movs	r1, r2
 80071c6:	0018      	movs	r0, r3
 80071c8:	f000 f87c 	bl	80072c4 <USBD_CtlError>
      break;
 80071cc:	46c0      	nop			; (mov r8, r8)
  }
}
 80071ce:	46c0      	nop			; (mov r8, r8)
 80071d0:	46bd      	mov	sp, r7
 80071d2:	b002      	add	sp, #8
 80071d4:	bd80      	pop	{r7, pc}

080071d6 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80071d6:	b580      	push	{r7, lr}
 80071d8:	b082      	sub	sp, #8
 80071da:	af00      	add	r7, sp, #0
 80071dc:	6078      	str	r0, [r7, #4]
 80071de:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	885b      	ldrh	r3, [r3, #2]
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d108      	bne.n	80071fa <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 80071e8:	687a      	ldr	r2, [r7, #4]
 80071ea:	23a9      	movs	r3, #169	; 0xa9
 80071ec:	009b      	lsls	r3, r3, #2
 80071ee:	2101      	movs	r1, #1
 80071f0:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	0018      	movs	r0, r3
 80071f6:	f000 f8be 	bl	8007376 <USBD_CtlSendStatus>
  }
}
 80071fa:	46c0      	nop			; (mov r8, r8)
 80071fc:	46bd      	mov	sp, r7
 80071fe:	b002      	add	sp, #8
 8007200:	bd80      	pop	{r7, pc}

08007202 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007202:	b580      	push	{r7, lr}
 8007204:	b082      	sub	sp, #8
 8007206:	af00      	add	r7, sp, #0
 8007208:	6078      	str	r0, [r7, #4]
 800720a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	23a7      	movs	r3, #167	; 0xa7
 8007210:	009b      	lsls	r3, r3, #2
 8007212:	5cd3      	ldrb	r3, [r2, r3]
 8007214:	3b01      	subs	r3, #1
 8007216:	2b02      	cmp	r3, #2
 8007218:	d80d      	bhi.n	8007236 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	885b      	ldrh	r3, [r3, #2]
 800721e:	2b01      	cmp	r3, #1
 8007220:	d110      	bne.n	8007244 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	23a9      	movs	r3, #169	; 0xa9
 8007226:	009b      	lsls	r3, r3, #2
 8007228:	2100      	movs	r1, #0
 800722a:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	0018      	movs	r0, r3
 8007230:	f000 f8a1 	bl	8007376 <USBD_CtlSendStatus>
      }
      break;
 8007234:	e006      	b.n	8007244 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8007236:	683a      	ldr	r2, [r7, #0]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	0011      	movs	r1, r2
 800723c:	0018      	movs	r0, r3
 800723e:	f000 f841 	bl	80072c4 <USBD_CtlError>
      break;
 8007242:	e000      	b.n	8007246 <USBD_ClrFeature+0x44>
      break;
 8007244:	46c0      	nop			; (mov r8, r8)
  }
}
 8007246:	46c0      	nop			; (mov r8, r8)
 8007248:	46bd      	mov	sp, r7
 800724a:	b002      	add	sp, #8
 800724c:	bd80      	pop	{r7, pc}

0800724e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800724e:	b580      	push	{r7, lr}
 8007250:	b082      	sub	sp, #8
 8007252:	af00      	add	r7, sp, #0
 8007254:	6078      	str	r0, [r7, #4]
 8007256:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	781a      	ldrb	r2, [r3, #0]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	785a      	ldrb	r2, [r3, #1]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	3302      	adds	r3, #2
 800726c:	781b      	ldrb	r3, [r3, #0]
 800726e:	b29a      	uxth	r2, r3
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	3303      	adds	r3, #3
 8007274:	781b      	ldrb	r3, [r3, #0]
 8007276:	b29b      	uxth	r3, r3
 8007278:	021b      	lsls	r3, r3, #8
 800727a:	b29b      	uxth	r3, r3
 800727c:	18d3      	adds	r3, r2, r3
 800727e:	b29a      	uxth	r2, r3
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	3304      	adds	r3, #4
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	b29a      	uxth	r2, r3
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	3305      	adds	r3, #5
 8007290:	781b      	ldrb	r3, [r3, #0]
 8007292:	b29b      	uxth	r3, r3
 8007294:	021b      	lsls	r3, r3, #8
 8007296:	b29b      	uxth	r3, r3
 8007298:	18d3      	adds	r3, r2, r3
 800729a:	b29a      	uxth	r2, r3
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	3306      	adds	r3, #6
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	b29a      	uxth	r2, r3
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	3307      	adds	r3, #7
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	021b      	lsls	r3, r3, #8
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	18d3      	adds	r3, r2, r3
 80072b6:	b29a      	uxth	r2, r3
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	80da      	strh	r2, [r3, #6]

}
 80072bc:	46c0      	nop			; (mov r8, r8)
 80072be:	46bd      	mov	sp, r7
 80072c0:	b002      	add	sp, #8
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b082      	sub	sp, #8
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2180      	movs	r1, #128	; 0x80
 80072d2:	0018      	movs	r0, r3
 80072d4:	f000 f96f 	bl	80075b6 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2100      	movs	r1, #0
 80072dc:	0018      	movs	r0, r3
 80072de:	f000 f96a 	bl	80075b6 <USBD_LL_StallEP>
}
 80072e2:	46c0      	nop			; (mov r8, r8)
 80072e4:	46bd      	mov	sp, r7
 80072e6:	b002      	add	sp, #8
 80072e8:	bd80      	pop	{r7, pc}

080072ea <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80072ea:	b580      	push	{r7, lr}
 80072ec:	b084      	sub	sp, #16
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	60f8      	str	r0, [r7, #12]
 80072f2:	60b9      	str	r1, [r7, #8]
 80072f4:	1dbb      	adds	r3, r7, #6
 80072f6:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80072f8:	68fa      	ldr	r2, [r7, #12]
 80072fa:	23a5      	movs	r3, #165	; 0xa5
 80072fc:	009b      	lsls	r3, r3, #2
 80072fe:	2102      	movs	r1, #2
 8007300:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8007302:	1dbb      	adds	r3, r7, #6
 8007304:	881a      	ldrh	r2, [r3, #0]
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800730a:	1dbb      	adds	r3, r7, #6
 800730c:	881a      	ldrh	r2, [r3, #0]
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007312:	1dbb      	adds	r3, r7, #6
 8007314:	881b      	ldrh	r3, [r3, #0]
 8007316:	68ba      	ldr	r2, [r7, #8]
 8007318:	68f8      	ldr	r0, [r7, #12]
 800731a:	2100      	movs	r1, #0
 800731c:	f000 f9fd 	bl	800771a <USBD_LL_Transmit>

  return USBD_OK;
 8007320:	2300      	movs	r3, #0
}
 8007322:	0018      	movs	r0, r3
 8007324:	46bd      	mov	sp, r7
 8007326:	b004      	add	sp, #16
 8007328:	bd80      	pop	{r7, pc}

0800732a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800732a:	b580      	push	{r7, lr}
 800732c:	b084      	sub	sp, #16
 800732e:	af00      	add	r7, sp, #0
 8007330:	60f8      	str	r0, [r7, #12]
 8007332:	60b9      	str	r1, [r7, #8]
 8007334:	1dbb      	adds	r3, r7, #6
 8007336:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007338:	1dbb      	adds	r3, r7, #6
 800733a:	881b      	ldrh	r3, [r3, #0]
 800733c:	68ba      	ldr	r2, [r7, #8]
 800733e:	68f8      	ldr	r0, [r7, #12]
 8007340:	2100      	movs	r1, #0
 8007342:	f000 f9ea 	bl	800771a <USBD_LL_Transmit>

  return USBD_OK;
 8007346:	2300      	movs	r3, #0
}
 8007348:	0018      	movs	r0, r3
 800734a:	46bd      	mov	sp, r7
 800734c:	b004      	add	sp, #16
 800734e:	bd80      	pop	{r7, pc}

08007350 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b084      	sub	sp, #16
 8007354:	af00      	add	r7, sp, #0
 8007356:	60f8      	str	r0, [r7, #12]
 8007358:	60b9      	str	r1, [r7, #8]
 800735a:	1dbb      	adds	r3, r7, #6
 800735c:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800735e:	1dbb      	adds	r3, r7, #6
 8007360:	881b      	ldrh	r3, [r3, #0]
 8007362:	68ba      	ldr	r2, [r7, #8]
 8007364:	68f8      	ldr	r0, [r7, #12]
 8007366:	2100      	movs	r1, #0
 8007368:	f000 fa0e 	bl	8007788 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800736c:	2300      	movs	r3, #0
}
 800736e:	0018      	movs	r0, r3
 8007370:	46bd      	mov	sp, r7
 8007372:	b004      	add	sp, #16
 8007374:	bd80      	pop	{r7, pc}

08007376 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007376:	b580      	push	{r7, lr}
 8007378:	b082      	sub	sp, #8
 800737a:	af00      	add	r7, sp, #0
 800737c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800737e:	687a      	ldr	r2, [r7, #4]
 8007380:	23a5      	movs	r3, #165	; 0xa5
 8007382:	009b      	lsls	r3, r3, #2
 8007384:	2104      	movs	r1, #4
 8007386:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	2300      	movs	r3, #0
 800738c:	2200      	movs	r2, #0
 800738e:	2100      	movs	r1, #0
 8007390:	f000 f9c3 	bl	800771a <USBD_LL_Transmit>

  return USBD_OK;
 8007394:	2300      	movs	r3, #0
}
 8007396:	0018      	movs	r0, r3
 8007398:	46bd      	mov	sp, r7
 800739a:	b002      	add	sp, #8
 800739c:	bd80      	pop	{r7, pc}

0800739e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800739e:	b580      	push	{r7, lr}
 80073a0:	b082      	sub	sp, #8
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	23a5      	movs	r3, #165	; 0xa5
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	2105      	movs	r1, #5
 80073ae:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	2300      	movs	r3, #0
 80073b4:	2200      	movs	r2, #0
 80073b6:	2100      	movs	r1, #0
 80073b8:	f000 f9e6 	bl	8007788 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80073bc:	2300      	movs	r3, #0
}
 80073be:	0018      	movs	r0, r3
 80073c0:	46bd      	mov	sp, r7
 80073c2:	b002      	add	sp, #8
 80073c4:	bd80      	pop	{r7, pc}

080073c6 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073c6:	b580      	push	{r7, lr}
 80073c8:	b082      	sub	sp, #8
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80073ce:	687a      	ldr	r2, [r7, #4]
 80073d0:	23bc      	movs	r3, #188	; 0xbc
 80073d2:	009b      	lsls	r3, r3, #2
 80073d4:	58d2      	ldr	r2, [r2, r3]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	21ac      	movs	r1, #172	; 0xac
 80073da:	0089      	lsls	r1, r1, #2
 80073dc:	468c      	mov	ip, r1
 80073de:	4463      	add	r3, ip
 80073e0:	0019      	movs	r1, r3
 80073e2:	0010      	movs	r0, r2
 80073e4:	f7fe ff14 	bl	8006210 <USBD_LL_SetupStage>
}
 80073e8:	46c0      	nop			; (mov r8, r8)
 80073ea:	46bd      	mov	sp, r7
 80073ec:	b002      	add	sp, #8
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073f0:	b590      	push	{r4, r7, lr}
 80073f2:	b083      	sub	sp, #12
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	000a      	movs	r2, r1
 80073fa:	1cfb      	adds	r3, r7, #3
 80073fc:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	23bc      	movs	r3, #188	; 0xbc
 8007402:	009b      	lsls	r3, r3, #2
 8007404:	58d4      	ldr	r4, [r2, r3]
 8007406:	1cfb      	adds	r3, r7, #3
 8007408:	781a      	ldrb	r2, [r3, #0]
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	23be      	movs	r3, #190	; 0xbe
 800740e:	0059      	lsls	r1, r3, #1
 8007410:	0013      	movs	r3, r2
 8007412:	009b      	lsls	r3, r3, #2
 8007414:	189b      	adds	r3, r3, r2
 8007416:	00db      	lsls	r3, r3, #3
 8007418:	18c3      	adds	r3, r0, r3
 800741a:	185b      	adds	r3, r3, r1
 800741c:	681a      	ldr	r2, [r3, #0]
 800741e:	1cfb      	adds	r3, r7, #3
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	0019      	movs	r1, r3
 8007424:	0020      	movs	r0, r4
 8007426:	f7fe ff51 	bl	80062cc <USBD_LL_DataOutStage>
}
 800742a:	46c0      	nop			; (mov r8, r8)
 800742c:	46bd      	mov	sp, r7
 800742e:	b003      	add	sp, #12
 8007430:	bd90      	pop	{r4, r7, pc}

08007432 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007432:	b580      	push	{r7, lr}
 8007434:	b082      	sub	sp, #8
 8007436:	af00      	add	r7, sp, #0
 8007438:	6078      	str	r0, [r7, #4]
 800743a:	000a      	movs	r2, r1
 800743c:	1cfb      	adds	r3, r7, #3
 800743e:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	23bc      	movs	r3, #188	; 0xbc
 8007444:	009b      	lsls	r3, r3, #2
 8007446:	58d0      	ldr	r0, [r2, r3]
 8007448:	1cfb      	adds	r3, r7, #3
 800744a:	781a      	ldrb	r2, [r3, #0]
 800744c:	6879      	ldr	r1, [r7, #4]
 800744e:	0013      	movs	r3, r2
 8007450:	009b      	lsls	r3, r3, #2
 8007452:	189b      	adds	r3, r3, r2
 8007454:	00db      	lsls	r3, r3, #3
 8007456:	18cb      	adds	r3, r1, r3
 8007458:	333c      	adds	r3, #60	; 0x3c
 800745a:	681a      	ldr	r2, [r3, #0]
 800745c:	1cfb      	adds	r3, r7, #3
 800745e:	781b      	ldrb	r3, [r3, #0]
 8007460:	0019      	movs	r1, r3
 8007462:	f7fe ffb5 	bl	80063d0 <USBD_LL_DataInStage>
}
 8007466:	46c0      	nop			; (mov r8, r8)
 8007468:	46bd      	mov	sp, r7
 800746a:	b002      	add	sp, #8
 800746c:	bd80      	pop	{r7, pc}

0800746e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800746e:	b580      	push	{r7, lr}
 8007470:	b082      	sub	sp, #8
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007476:	687a      	ldr	r2, [r7, #4]
 8007478:	23bc      	movs	r3, #188	; 0xbc
 800747a:	009b      	lsls	r3, r3, #2
 800747c:	58d3      	ldr	r3, [r2, r3]
 800747e:	0018      	movs	r0, r3
 8007480:	f7ff f8ec 	bl	800665c <USBD_LL_SOF>
}
 8007484:	46c0      	nop			; (mov r8, r8)
 8007486:	46bd      	mov	sp, r7
 8007488:	b002      	add	sp, #8
 800748a:	bd80      	pop	{r7, pc}

0800748c <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b084      	sub	sp, #16
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007494:	230f      	movs	r3, #15
 8007496:	18fb      	adds	r3, r7, r3
 8007498:	2201      	movs	r2, #1
 800749a:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	689b      	ldr	r3, [r3, #8]
 80074a0:	2b02      	cmp	r3, #2
 80074a2:	d001      	beq.n	80074a8 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 80074a4:	f7f9 f95a 	bl	800075c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	23bc      	movs	r3, #188	; 0xbc
 80074ac:	009b      	lsls	r3, r3, #2
 80074ae:	58d2      	ldr	r2, [r2, r3]
 80074b0:	230f      	movs	r3, #15
 80074b2:	18fb      	adds	r3, r7, r3
 80074b4:	781b      	ldrb	r3, [r3, #0]
 80074b6:	0019      	movs	r1, r3
 80074b8:	0010      	movs	r0, r2
 80074ba:	f7ff f88e 	bl	80065da <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	23bc      	movs	r3, #188	; 0xbc
 80074c2:	009b      	lsls	r3, r3, #2
 80074c4:	58d3      	ldr	r3, [r2, r3]
 80074c6:	0018      	movs	r0, r3
 80074c8:	f7ff f83f 	bl	800654a <USBD_LL_Reset>
}
 80074cc:	46c0      	nop			; (mov r8, r8)
 80074ce:	46bd      	mov	sp, r7
 80074d0:	b004      	add	sp, #16
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b082      	sub	sp, #8
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	23bc      	movs	r3, #188	; 0xbc
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	58d3      	ldr	r3, [r2, r3]
 80074e4:	0018      	movs	r0, r3
 80074e6:	f7ff f889 	bl	80065fc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	699b      	ldr	r3, [r3, #24]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d005      	beq.n	80074fe <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80074f2:	4b05      	ldr	r3, [pc, #20]	; (8007508 <HAL_PCD_SuspendCallback+0x34>)
 80074f4:	691a      	ldr	r2, [r3, #16]
 80074f6:	4b04      	ldr	r3, [pc, #16]	; (8007508 <HAL_PCD_SuspendCallback+0x34>)
 80074f8:	2106      	movs	r1, #6
 80074fa:	430a      	orrs	r2, r1
 80074fc:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 80074fe:	46c0      	nop			; (mov r8, r8)
 8007500:	46bd      	mov	sp, r7
 8007502:	b002      	add	sp, #8
 8007504:	bd80      	pop	{r7, pc}
 8007506:	46c0      	nop			; (mov r8, r8)
 8007508:	e000ed00 	.word	0xe000ed00

0800750c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b082      	sub	sp, #8
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	699b      	ldr	r3, [r3, #24]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d007      	beq.n	800752c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800751c:	4b09      	ldr	r3, [pc, #36]	; (8007544 <HAL_PCD_ResumeCallback+0x38>)
 800751e:	691a      	ldr	r2, [r3, #16]
 8007520:	4b08      	ldr	r3, [pc, #32]	; (8007544 <HAL_PCD_ResumeCallback+0x38>)
 8007522:	2106      	movs	r1, #6
 8007524:	438a      	bics	r2, r1
 8007526:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8007528:	f000 f965 	bl	80077f6 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800752c:	687a      	ldr	r2, [r7, #4]
 800752e:	23bc      	movs	r3, #188	; 0xbc
 8007530:	009b      	lsls	r3, r3, #2
 8007532:	58d3      	ldr	r3, [r2, r3]
 8007534:	0018      	movs	r0, r3
 8007536:	f7ff f879 	bl	800662c <USBD_LL_Resume>
}
 800753a:	46c0      	nop			; (mov r8, r8)
 800753c:	46bd      	mov	sp, r7
 800753e:	b002      	add	sp, #8
 8007540:	bd80      	pop	{r7, pc}
 8007542:	46c0      	nop			; (mov r8, r8)
 8007544:	e000ed00 	.word	0xe000ed00

08007548 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800754a:	b085      	sub	sp, #20
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	000c      	movs	r4, r1
 8007552:	0010      	movs	r0, r2
 8007554:	0019      	movs	r1, r3
 8007556:	1cfb      	adds	r3, r7, #3
 8007558:	1c22      	adds	r2, r4, #0
 800755a:	701a      	strb	r2, [r3, #0]
 800755c:	1cbb      	adds	r3, r7, #2
 800755e:	1c02      	adds	r2, r0, #0
 8007560:	701a      	strb	r2, [r3, #0]
 8007562:	003b      	movs	r3, r7
 8007564:	1c0a      	adds	r2, r1, #0
 8007566:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007568:	260f      	movs	r6, #15
 800756a:	19bb      	adds	r3, r7, r6
 800756c:	2200      	movs	r2, #0
 800756e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007570:	250e      	movs	r5, #14
 8007572:	197b      	adds	r3, r7, r5
 8007574:	2200      	movs	r2, #0
 8007576:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007578:	687a      	ldr	r2, [r7, #4]
 800757a:	23b0      	movs	r3, #176	; 0xb0
 800757c:	009b      	lsls	r3, r3, #2
 800757e:	58d0      	ldr	r0, [r2, r3]
 8007580:	19bc      	adds	r4, r7, r6
 8007582:	1cbb      	adds	r3, r7, #2
 8007584:	781d      	ldrb	r5, [r3, #0]
 8007586:	003b      	movs	r3, r7
 8007588:	881a      	ldrh	r2, [r3, #0]
 800758a:	1cfb      	adds	r3, r7, #3
 800758c:	7819      	ldrb	r1, [r3, #0]
 800758e:	002b      	movs	r3, r5
 8007590:	f7f9 ffa7 	bl	80014e2 <HAL_PCD_EP_Open>
 8007594:	0003      	movs	r3, r0
 8007596:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007598:	250e      	movs	r5, #14
 800759a:	197c      	adds	r4, r7, r5
 800759c:	19bb      	adds	r3, r7, r6
 800759e:	781b      	ldrb	r3, [r3, #0]
 80075a0:	0018      	movs	r0, r3
 80075a2:	f000 f92f 	bl	8007804 <USBD_Get_USB_Status>
 80075a6:	0003      	movs	r3, r0
 80075a8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80075aa:	197b      	adds	r3, r7, r5
 80075ac:	781b      	ldrb	r3, [r3, #0]
}
 80075ae:	0018      	movs	r0, r3
 80075b0:	46bd      	mov	sp, r7
 80075b2:	b005      	add	sp, #20
 80075b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080075b6 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80075b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075b8:	b085      	sub	sp, #20
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	6078      	str	r0, [r7, #4]
 80075be:	000a      	movs	r2, r1
 80075c0:	1cfb      	adds	r3, r7, #3
 80075c2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075c4:	210f      	movs	r1, #15
 80075c6:	187b      	adds	r3, r7, r1
 80075c8:	2200      	movs	r2, #0
 80075ca:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075cc:	260e      	movs	r6, #14
 80075ce:	19bb      	adds	r3, r7, r6
 80075d0:	2200      	movs	r2, #0
 80075d2:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80075d4:	687a      	ldr	r2, [r7, #4]
 80075d6:	23b0      	movs	r3, #176	; 0xb0
 80075d8:	009b      	lsls	r3, r3, #2
 80075da:	58d2      	ldr	r2, [r2, r3]
 80075dc:	000d      	movs	r5, r1
 80075de:	187c      	adds	r4, r7, r1
 80075e0:	1cfb      	adds	r3, r7, #3
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	0019      	movs	r1, r3
 80075e6:	0010      	movs	r0, r2
 80075e8:	f7fa f880 	bl	80016ec <HAL_PCD_EP_SetStall>
 80075ec:	0003      	movs	r3, r0
 80075ee:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075f0:	19bc      	adds	r4, r7, r6
 80075f2:	197b      	adds	r3, r7, r5
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	0018      	movs	r0, r3
 80075f8:	f000 f904 	bl	8007804 <USBD_Get_USB_Status>
 80075fc:	0003      	movs	r3, r0
 80075fe:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007600:	19bb      	adds	r3, r7, r6
 8007602:	781b      	ldrb	r3, [r3, #0]
}
 8007604:	0018      	movs	r0, r3
 8007606:	46bd      	mov	sp, r7
 8007608:	b005      	add	sp, #20
 800760a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800760c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800760c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800760e:	b085      	sub	sp, #20
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	000a      	movs	r2, r1
 8007616:	1cfb      	adds	r3, r7, #3
 8007618:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800761a:	210f      	movs	r1, #15
 800761c:	187b      	adds	r3, r7, r1
 800761e:	2200      	movs	r2, #0
 8007620:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007622:	260e      	movs	r6, #14
 8007624:	19bb      	adds	r3, r7, r6
 8007626:	2200      	movs	r2, #0
 8007628:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800762a:	687a      	ldr	r2, [r7, #4]
 800762c:	23b0      	movs	r3, #176	; 0xb0
 800762e:	009b      	lsls	r3, r3, #2
 8007630:	58d2      	ldr	r2, [r2, r3]
 8007632:	000d      	movs	r5, r1
 8007634:	187c      	adds	r4, r7, r1
 8007636:	1cfb      	adds	r3, r7, #3
 8007638:	781b      	ldrb	r3, [r3, #0]
 800763a:	0019      	movs	r1, r3
 800763c:	0010      	movs	r0, r2
 800763e:	f7fa f8b1 	bl	80017a4 <HAL_PCD_EP_ClrStall>
 8007642:	0003      	movs	r3, r0
 8007644:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007646:	19bc      	adds	r4, r7, r6
 8007648:	197b      	adds	r3, r7, r5
 800764a:	781b      	ldrb	r3, [r3, #0]
 800764c:	0018      	movs	r0, r3
 800764e:	f000 f8d9 	bl	8007804 <USBD_Get_USB_Status>
 8007652:	0003      	movs	r3, r0
 8007654:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007656:	19bb      	adds	r3, r7, r6
 8007658:	781b      	ldrb	r3, [r3, #0]
}
 800765a:	0018      	movs	r0, r3
 800765c:	46bd      	mov	sp, r7
 800765e:	b005      	add	sp, #20
 8007660:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007662 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007662:	b580      	push	{r7, lr}
 8007664:	b084      	sub	sp, #16
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
 800766a:	000a      	movs	r2, r1
 800766c:	1cfb      	adds	r3, r7, #3
 800766e:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007670:	687a      	ldr	r2, [r7, #4]
 8007672:	23b0      	movs	r3, #176	; 0xb0
 8007674:	009b      	lsls	r3, r3, #2
 8007676:	58d3      	ldr	r3, [r2, r3]
 8007678:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800767a:	1cfb      	adds	r3, r7, #3
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	b25b      	sxtb	r3, r3
 8007680:	2b00      	cmp	r3, #0
 8007682:	da0d      	bge.n	80076a0 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007684:	1cfb      	adds	r3, r7, #3
 8007686:	781b      	ldrb	r3, [r3, #0]
 8007688:	227f      	movs	r2, #127	; 0x7f
 800768a:	4013      	ands	r3, r2
 800768c:	68f9      	ldr	r1, [r7, #12]
 800768e:	1c5a      	adds	r2, r3, #1
 8007690:	0013      	movs	r3, r2
 8007692:	009b      	lsls	r3, r3, #2
 8007694:	189b      	adds	r3, r3, r2
 8007696:	00db      	lsls	r3, r3, #3
 8007698:	18cb      	adds	r3, r1, r3
 800769a:	3302      	adds	r3, #2
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	e00d      	b.n	80076bc <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80076a0:	1cfb      	adds	r3, r7, #3
 80076a2:	781b      	ldrb	r3, [r3, #0]
 80076a4:	227f      	movs	r2, #127	; 0x7f
 80076a6:	401a      	ands	r2, r3
 80076a8:	68f8      	ldr	r0, [r7, #12]
 80076aa:	23b5      	movs	r3, #181	; 0xb5
 80076ac:	0059      	lsls	r1, r3, #1
 80076ae:	0013      	movs	r3, r2
 80076b0:	009b      	lsls	r3, r3, #2
 80076b2:	189b      	adds	r3, r3, r2
 80076b4:	00db      	lsls	r3, r3, #3
 80076b6:	18c3      	adds	r3, r0, r3
 80076b8:	185b      	adds	r3, r3, r1
 80076ba:	781b      	ldrb	r3, [r3, #0]
  }
}
 80076bc:	0018      	movs	r0, r3
 80076be:	46bd      	mov	sp, r7
 80076c0:	b004      	add	sp, #16
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80076c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076c6:	b085      	sub	sp, #20
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	000a      	movs	r2, r1
 80076ce:	1cfb      	adds	r3, r7, #3
 80076d0:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076d2:	210f      	movs	r1, #15
 80076d4:	187b      	adds	r3, r7, r1
 80076d6:	2200      	movs	r2, #0
 80076d8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076da:	260e      	movs	r6, #14
 80076dc:	19bb      	adds	r3, r7, r6
 80076de:	2200      	movs	r2, #0
 80076e0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80076e2:	687a      	ldr	r2, [r7, #4]
 80076e4:	23b0      	movs	r3, #176	; 0xb0
 80076e6:	009b      	lsls	r3, r3, #2
 80076e8:	58d2      	ldr	r2, [r2, r3]
 80076ea:	000d      	movs	r5, r1
 80076ec:	187c      	adds	r4, r7, r1
 80076ee:	1cfb      	adds	r3, r7, #3
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	0019      	movs	r1, r3
 80076f4:	0010      	movs	r0, r2
 80076f6:	f7f9 fec9 	bl	800148c <HAL_PCD_SetAddress>
 80076fa:	0003      	movs	r3, r0
 80076fc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076fe:	19bc      	adds	r4, r7, r6
 8007700:	197b      	adds	r3, r7, r5
 8007702:	781b      	ldrb	r3, [r3, #0]
 8007704:	0018      	movs	r0, r3
 8007706:	f000 f87d 	bl	8007804 <USBD_Get_USB_Status>
 800770a:	0003      	movs	r3, r0
 800770c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800770e:	19bb      	adds	r3, r7, r6
 8007710:	781b      	ldrb	r3, [r3, #0]
}
 8007712:	0018      	movs	r0, r3
 8007714:	46bd      	mov	sp, r7
 8007716:	b005      	add	sp, #20
 8007718:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800771a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800771a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800771c:	b087      	sub	sp, #28
 800771e:	af00      	add	r7, sp, #0
 8007720:	60f8      	str	r0, [r7, #12]
 8007722:	0008      	movs	r0, r1
 8007724:	607a      	str	r2, [r7, #4]
 8007726:	0019      	movs	r1, r3
 8007728:	230b      	movs	r3, #11
 800772a:	18fb      	adds	r3, r7, r3
 800772c:	1c02      	adds	r2, r0, #0
 800772e:	701a      	strb	r2, [r3, #0]
 8007730:	2408      	movs	r4, #8
 8007732:	193b      	adds	r3, r7, r4
 8007734:	1c0a      	adds	r2, r1, #0
 8007736:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007738:	2117      	movs	r1, #23
 800773a:	187b      	adds	r3, r7, r1
 800773c:	2200      	movs	r2, #0
 800773e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007740:	2516      	movs	r5, #22
 8007742:	197b      	adds	r3, r7, r5
 8007744:	2200      	movs	r2, #0
 8007746:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007748:	68fa      	ldr	r2, [r7, #12]
 800774a:	23b0      	movs	r3, #176	; 0xb0
 800774c:	009b      	lsls	r3, r3, #2
 800774e:	58d0      	ldr	r0, [r2, r3]
 8007750:	193b      	adds	r3, r7, r4
 8007752:	881d      	ldrh	r5, [r3, #0]
 8007754:	000e      	movs	r6, r1
 8007756:	187c      	adds	r4, r7, r1
 8007758:	687a      	ldr	r2, [r7, #4]
 800775a:	230b      	movs	r3, #11
 800775c:	18fb      	adds	r3, r7, r3
 800775e:	7819      	ldrb	r1, [r3, #0]
 8007760:	002b      	movs	r3, r5
 8007762:	f7f9 ff7a 	bl	800165a <HAL_PCD_EP_Transmit>
 8007766:	0003      	movs	r3, r0
 8007768:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800776a:	2516      	movs	r5, #22
 800776c:	197c      	adds	r4, r7, r5
 800776e:	19bb      	adds	r3, r7, r6
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	0018      	movs	r0, r3
 8007774:	f000 f846 	bl	8007804 <USBD_Get_USB_Status>
 8007778:	0003      	movs	r3, r0
 800777a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800777c:	197b      	adds	r3, r7, r5
 800777e:	781b      	ldrb	r3, [r3, #0]
}
 8007780:	0018      	movs	r0, r3
 8007782:	46bd      	mov	sp, r7
 8007784:	b007      	add	sp, #28
 8007786:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007788 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800778a:	b087      	sub	sp, #28
 800778c:	af00      	add	r7, sp, #0
 800778e:	60f8      	str	r0, [r7, #12]
 8007790:	0008      	movs	r0, r1
 8007792:	607a      	str	r2, [r7, #4]
 8007794:	0019      	movs	r1, r3
 8007796:	230b      	movs	r3, #11
 8007798:	18fb      	adds	r3, r7, r3
 800779a:	1c02      	adds	r2, r0, #0
 800779c:	701a      	strb	r2, [r3, #0]
 800779e:	2408      	movs	r4, #8
 80077a0:	193b      	adds	r3, r7, r4
 80077a2:	1c0a      	adds	r2, r1, #0
 80077a4:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077a6:	2117      	movs	r1, #23
 80077a8:	187b      	adds	r3, r7, r1
 80077aa:	2200      	movs	r2, #0
 80077ac:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077ae:	2516      	movs	r5, #22
 80077b0:	197b      	adds	r3, r7, r5
 80077b2:	2200      	movs	r2, #0
 80077b4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80077b6:	68fa      	ldr	r2, [r7, #12]
 80077b8:	23b0      	movs	r3, #176	; 0xb0
 80077ba:	009b      	lsls	r3, r3, #2
 80077bc:	58d0      	ldr	r0, [r2, r3]
 80077be:	193b      	adds	r3, r7, r4
 80077c0:	881d      	ldrh	r5, [r3, #0]
 80077c2:	000e      	movs	r6, r1
 80077c4:	187c      	adds	r4, r7, r1
 80077c6:	687a      	ldr	r2, [r7, #4]
 80077c8:	230b      	movs	r3, #11
 80077ca:	18fb      	adds	r3, r7, r3
 80077cc:	7819      	ldrb	r1, [r3, #0]
 80077ce:	002b      	movs	r3, r5
 80077d0:	f7f9 feff 	bl	80015d2 <HAL_PCD_EP_Receive>
 80077d4:	0003      	movs	r3, r0
 80077d6:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077d8:	2516      	movs	r5, #22
 80077da:	197c      	adds	r4, r7, r5
 80077dc:	19bb      	adds	r3, r7, r6
 80077de:	781b      	ldrb	r3, [r3, #0]
 80077e0:	0018      	movs	r0, r3
 80077e2:	f000 f80f 	bl	8007804 <USBD_Get_USB_Status>
 80077e6:	0003      	movs	r3, r0
 80077e8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80077ea:	197b      	adds	r3, r7, r5
 80077ec:	781b      	ldrb	r3, [r3, #0]
}
 80077ee:	0018      	movs	r0, r3
 80077f0:	46bd      	mov	sp, r7
 80077f2:	b007      	add	sp, #28
 80077f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080077f6 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80077f6:	b580      	push	{r7, lr}
 80077f8:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80077fa:	f7f8 fd4d 	bl	8000298 <SystemClock_Config>
}
 80077fe:	46c0      	nop			; (mov r8, r8)
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}

08007804 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	0002      	movs	r2, r0
 800780c:	1dfb      	adds	r3, r7, #7
 800780e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007810:	230f      	movs	r3, #15
 8007812:	18fb      	adds	r3, r7, r3
 8007814:	2200      	movs	r2, #0
 8007816:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8007818:	1dfb      	adds	r3, r7, #7
 800781a:	781b      	ldrb	r3, [r3, #0]
 800781c:	2b03      	cmp	r3, #3
 800781e:	d017      	beq.n	8007850 <USBD_Get_USB_Status+0x4c>
 8007820:	dc1b      	bgt.n	800785a <USBD_Get_USB_Status+0x56>
 8007822:	2b02      	cmp	r3, #2
 8007824:	d00f      	beq.n	8007846 <USBD_Get_USB_Status+0x42>
 8007826:	dc18      	bgt.n	800785a <USBD_Get_USB_Status+0x56>
 8007828:	2b00      	cmp	r3, #0
 800782a:	d002      	beq.n	8007832 <USBD_Get_USB_Status+0x2e>
 800782c:	2b01      	cmp	r3, #1
 800782e:	d005      	beq.n	800783c <USBD_Get_USB_Status+0x38>
 8007830:	e013      	b.n	800785a <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007832:	230f      	movs	r3, #15
 8007834:	18fb      	adds	r3, r7, r3
 8007836:	2200      	movs	r2, #0
 8007838:	701a      	strb	r2, [r3, #0]
    break;
 800783a:	e013      	b.n	8007864 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800783c:	230f      	movs	r3, #15
 800783e:	18fb      	adds	r3, r7, r3
 8007840:	2202      	movs	r2, #2
 8007842:	701a      	strb	r2, [r3, #0]
    break;
 8007844:	e00e      	b.n	8007864 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007846:	230f      	movs	r3, #15
 8007848:	18fb      	adds	r3, r7, r3
 800784a:	2201      	movs	r2, #1
 800784c:	701a      	strb	r2, [r3, #0]
    break;
 800784e:	e009      	b.n	8007864 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007850:	230f      	movs	r3, #15
 8007852:	18fb      	adds	r3, r7, r3
 8007854:	2202      	movs	r2, #2
 8007856:	701a      	strb	r2, [r3, #0]
    break;
 8007858:	e004      	b.n	8007864 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 800785a:	230f      	movs	r3, #15
 800785c:	18fb      	adds	r3, r7, r3
 800785e:	2202      	movs	r2, #2
 8007860:	701a      	strb	r2, [r3, #0]
    break;
 8007862:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 8007864:	230f      	movs	r3, #15
 8007866:	18fb      	adds	r3, r7, r3
 8007868:	781b      	ldrb	r3, [r3, #0]
}
 800786a:	0018      	movs	r0, r3
 800786c:	46bd      	mov	sp, r7
 800786e:	b004      	add	sp, #16
 8007870:	bd80      	pop	{r7, pc}
	...

08007874 <__libc_init_array>:
 8007874:	b570      	push	{r4, r5, r6, lr}
 8007876:	2600      	movs	r6, #0
 8007878:	4d0c      	ldr	r5, [pc, #48]	; (80078ac <__libc_init_array+0x38>)
 800787a:	4c0d      	ldr	r4, [pc, #52]	; (80078b0 <__libc_init_array+0x3c>)
 800787c:	1b64      	subs	r4, r4, r5
 800787e:	10a4      	asrs	r4, r4, #2
 8007880:	42a6      	cmp	r6, r4
 8007882:	d109      	bne.n	8007898 <__libc_init_array+0x24>
 8007884:	2600      	movs	r6, #0
 8007886:	f000 f821 	bl	80078cc <_init>
 800788a:	4d0a      	ldr	r5, [pc, #40]	; (80078b4 <__libc_init_array+0x40>)
 800788c:	4c0a      	ldr	r4, [pc, #40]	; (80078b8 <__libc_init_array+0x44>)
 800788e:	1b64      	subs	r4, r4, r5
 8007890:	10a4      	asrs	r4, r4, #2
 8007892:	42a6      	cmp	r6, r4
 8007894:	d105      	bne.n	80078a2 <__libc_init_array+0x2e>
 8007896:	bd70      	pop	{r4, r5, r6, pc}
 8007898:	00b3      	lsls	r3, r6, #2
 800789a:	58eb      	ldr	r3, [r5, r3]
 800789c:	4798      	blx	r3
 800789e:	3601      	adds	r6, #1
 80078a0:	e7ee      	b.n	8007880 <__libc_init_array+0xc>
 80078a2:	00b3      	lsls	r3, r6, #2
 80078a4:	58eb      	ldr	r3, [r5, r3]
 80078a6:	4798      	blx	r3
 80078a8:	3601      	adds	r6, #1
 80078aa:	e7f2      	b.n	8007892 <__libc_init_array+0x1e>
 80078ac:	0800798c 	.word	0x0800798c
 80078b0:	0800798c 	.word	0x0800798c
 80078b4:	0800798c 	.word	0x0800798c
 80078b8:	08007990 	.word	0x08007990

080078bc <memset>:
 80078bc:	0003      	movs	r3, r0
 80078be:	1882      	adds	r2, r0, r2
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d100      	bne.n	80078c6 <memset+0xa>
 80078c4:	4770      	bx	lr
 80078c6:	7019      	strb	r1, [r3, #0]
 80078c8:	3301      	adds	r3, #1
 80078ca:	e7f9      	b.n	80078c0 <memset+0x4>

080078cc <_init>:
 80078cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ce:	46c0      	nop			; (mov r8, r8)
 80078d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078d2:	bc08      	pop	{r3}
 80078d4:	469e      	mov	lr, r3
 80078d6:	4770      	bx	lr

080078d8 <_fini>:
 80078d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078da:	46c0      	nop			; (mov r8, r8)
 80078dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078de:	bc08      	pop	{r3}
 80078e0:	469e      	mov	lr, r3
 80078e2:	4770      	bx	lr
